
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009094  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08009278  08009278  00019278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800939c  0800939c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800939c  0800939c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a0  080093a0  000193a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080093a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba4  200001e8  0800958c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d8c  0800958c  00021d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019438  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039b2  00000000  00000000  00039649  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  0003d000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dc59  00000000  00000000  0003f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012932  00000000  00000000  0005d251  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e941  00000000  00000000  0006fb83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e4c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000589c  00000000  00000000  0010e540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001e8 	.word	0x200001e8
 8000200:	00000000 	.word	0x00000000
 8000204:	08009260 	.word	0x08009260

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001ec 	.word	0x200001ec
 8000220:	08009260 	.word	0x08009260

08000224 <__io_putchar>:



PUTCHAR_PROTOTYPE

{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]

//同样USART2改为你的串口

HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 800022c:	1d39      	adds	r1, r7, #4
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
 8000232:	2201      	movs	r2, #1
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <__io_putchar+0x20>)
 8000236:	f003 ff10 	bl	800405a <HAL_UART_Transmit>

    return ch;
 800023a:	687b      	ldr	r3, [r7, #4]

}
 800023c:	4618      	mov	r0, r3
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	2000044c 	.word	0x2000044c

08000248 <userAppStart>:
uint32_t temp1=0;
uint32_t temp_count=0;
uint32_t count=0;
uint8_t flash_flag=0;

void userAppStart(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	  for(int i=0;i<2;i++){
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	e014      	b.n	800027e <userAppStart+0x36>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	4819      	ldr	r0, [pc, #100]	; (80002c0 <userAppStart+0x78>)
 800025a:	f001 f9f3 	bl	8001644 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800025e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000262:	f000 fd55 	bl	8000d10 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000266:	2200      	movs	r2, #0
 8000268:	2101      	movs	r1, #1
 800026a:	4815      	ldr	r0, [pc, #84]	; (80002c0 <userAppStart+0x78>)
 800026c:	f001 f9ea 	bl	8001644 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000274:	f000 fd4c 	bl	8000d10 <HAL_Delay>
	  for(int i=0;i<2;i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b01      	cmp	r3, #1
 8000282:	dde7      	ble.n	8000254 <userAppStart+0xc>
	  }
	if(((*(__IO uint32_t *)ApplicationAddress) & 0x2FFE0000) == 0x20000000){
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <userAppStart+0x7c>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <userAppStart+0x80>)
 800028a:	4013      	ands	r3, r2
 800028c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000290:	d111      	bne.n	80002b6 <userAppStart+0x6e>
		jumpAddress = *(__IO uint32_t *)(ApplicationAddress +4);
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <userAppStart+0x84>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <userAppStart+0x88>)
 8000298:	6013      	str	r3, [r2, #0]
		jump_To_Application  = (pFunction) jumpAddress;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <userAppStart+0x88>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <userAppStart+0x8c>)
 80002a2:	601a      	str	r2, [r3, #0]
		__set_MSP(*(__IO uint32_t *) ApplicationAddress);
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <userAppStart+0x7c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	f383 8808 	msr	MSP, r3
		jump_To_Application();
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <userAppStart+0x8c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4798      	blx	r3
	}
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010c00 	.word	0x40010c00
 80002c4:	0800e000 	.word	0x0800e000
 80002c8:	2ffe0000 	.word	0x2ffe0000
 80002cc:	0800e004 	.word	0x0800e004
 80002d0:	20000cd4 	.word	0x20000cd4
 80002d4:	20000448 	.word	0x20000448

080002d8 <writeFlashTest>:
		  print_addr+=4;
		}
		print_addr=0x0800e000;
}

void writeFlashTest(void){
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0
    //1、解锁FLASH
	HAL_FLASH_Unlock();
 80002de:	f000 feb7 	bl	8001050 <HAL_FLASH_Unlock>
	//2、擦除FLASH
	//初始化FLASH_EraseInitTypeDef
	FLASH_EraseInitTypeDef f;
	f.TypeErase = FLASH_TYPEERASE_PAGES;
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
	f.PageAddress = addr;
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <writeFlashTest+0x70>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	60fb      	str	r3, [r7, #12]
	f.NbPages = 1;
 80002ec:	2301      	movs	r3, #1
 80002ee:	613b      	str	r3, [r7, #16]
	//设置PageError
	uint32_t PageError = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	603b      	str	r3, [r7, #0]
	//调用擦除函数
	HAL_FLASHEx_Erase(&f, &PageError);
 80002f4:	463a      	mov	r2, r7
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4611      	mov	r1, r2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 ff90 	bl	8001220 <HAL_FLASHEx_Erase>
	//3、对FLASH烧写
	for(int i=0;i<valid_data;i++){
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	e014      	b.n	8000330 <writeFlashTest+0x58>
		HAL_FLASH_Program(TYPEPROGRAM_WORD, addr, writeFlashData[i]);
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <writeFlashTest+0x70>)
 8000308:	6819      	ldr	r1, [r3, #0]
 800030a:	4a10      	ldr	r2, [pc, #64]	; (800034c <writeFlashTest+0x74>)
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000312:	f04f 0400 	mov.w	r4, #0
 8000316:	461a      	mov	r2, r3
 8000318:	4623      	mov	r3, r4
 800031a:	2002      	movs	r0, #2
 800031c:	f000 fe28 	bl	8000f70 <HAL_FLASH_Program>
		addr+=4;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <writeFlashTest+0x70>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3304      	adds	r3, #4
 8000326:	4a08      	ldr	r2, [pc, #32]	; (8000348 <writeFlashTest+0x70>)
 8000328:	6013      	str	r3, [r2, #0]
	for(int i=0;i<valid_data;i++){
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	3301      	adds	r3, #1
 800032e:	617b      	str	r3, [r7, #20]
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <writeFlashTest+0x78>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	429a      	cmp	r2, r3
 8000338:	dbe5      	blt.n	8000306 <writeFlashTest+0x2e>
	}
	//4、锁住FLASH
	HAL_FLASH_Lock();
 800033a:	f000 feaf 	bl	800109c <HAL_FLASH_Lock>
}
 800033e:	bf00      	nop
 8000340:	371c      	adds	r7, #28
 8000342:	46bd      	mov	sp, r7
 8000344:	bd90      	pop	{r4, r7, pc}
 8000346:	bf00      	nop
 8000348:	20000000 	.word	0x20000000
 800034c:	2000048c 	.word	0x2000048c
 8000350:	20000204 	.word	0x20000204

08000354 <printFlashTest>:
//FLASH读取数据测试
void printFlashTest(void){
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
#if 1
	for(int i=0;i<(valid_data);i++){
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	e012      	b.n	8000386 <printFlashTest+0x32>
	  uint32_t temp = *(__IO uint32_t*)(print_addr);
 8000360:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <printFlashTest+0x44>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	603b      	str	r3, [r7, #0]
	  printf("addr:0x%x, data:0x%x\r\n", print_addr, temp);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <printFlashTest+0x44>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <printFlashTest+0x48>)
 8000372:	f008 f887 	bl	8008484 <iprintf>
	  print_addr+=4;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <printFlashTest+0x44>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	3304      	adds	r3, #4
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <printFlashTest+0x44>)
 800037e:	6013      	str	r3, [r2, #0]
	for(int i=0;i<(valid_data);i++){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <printFlashTest+0x4c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbe7      	blt.n	8000360 <printFlashTest+0xc>
	}
#endif
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000004 	.word	0x20000004
 800039c:	08009278 	.word	0x08009278
 80003a0:	20000204 	.word	0x20000204

080003a4 <firmware_update>:

void  firmware_update(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
  if(flag2==1){
 80003aa:	4b55      	ldr	r3, [pc, #340]	; (8000500 <firmware_update+0x15c>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	f040 80a2 	bne.w	80004f8 <firmware_update+0x154>
	HAL_TIM_Base_Stop_IT((TIM_HandleTypeDef *)&htim1);
 80003b4:	4853      	ldr	r0, [pc, #332]	; (8000504 <firmware_update+0x160>)
 80003b6:	f003 fa63 	bl	8003880 <HAL_TIM_Base_Stop_IT>
	if(my_RxLength<64){
 80003ba:	4b53      	ldr	r3, [pc, #332]	; (8000508 <firmware_update+0x164>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b3f      	cmp	r3, #63	; 0x3f
 80003c0:	d84b      	bhi.n	800045a <firmware_update+0xb6>
		valid_data=my_RxLength/4+count;
 80003c2:	4b51      	ldr	r3, [pc, #324]	; (8000508 <firmware_update+0x164>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	089a      	lsrs	r2, r3, #2
 80003c8:	4b50      	ldr	r3, [pc, #320]	; (800050c <firmware_update+0x168>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	461a      	mov	r2, r3
 80003d0:	4b4f      	ldr	r3, [pc, #316]	; (8000510 <firmware_update+0x16c>)
 80003d2:	601a      	str	r2, [r3, #0]
		for(int i=0;i<(my_RxLength/4);i++){
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	e02e      	b.n	8000438 <firmware_update+0x94>
			temp1=0;
 80003da:	4b4e      	ldr	r3, [pc, #312]	; (8000514 <firmware_update+0x170>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
			for(int j=4;j>0;j--){
 80003e0:	2304      	movs	r3, #4
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	e013      	b.n	800040e <firmware_update+0x6a>
				temp1 |= ((my_RxBuf[4*i+j])<<(8*j));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	009a      	lsls	r2, r3, #2
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	4413      	add	r3, r2
 80003ee:	4a4a      	ldr	r2, [pc, #296]	; (8000518 <firmware_update+0x174>)
 80003f0:	5cd3      	ldrb	r3, [r2, r3]
 80003f2:	461a      	mov	r2, r3
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	00db      	lsls	r3, r3, #3
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b45      	ldr	r3, [pc, #276]	; (8000514 <firmware_update+0x170>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4313      	orrs	r3, r2
 8000404:	4a43      	ldr	r2, [pc, #268]	; (8000514 <firmware_update+0x170>)
 8000406:	6013      	str	r3, [r2, #0]
			for(int j=4;j>0;j--){
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3b01      	subs	r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	2b00      	cmp	r3, #0
 8000412:	dce8      	bgt.n	80003e6 <firmware_update+0x42>
			}
			writeFlashData[temp_count++]=temp1;
 8000414:	4b41      	ldr	r3, [pc, #260]	; (800051c <firmware_update+0x178>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	4940      	ldr	r1, [pc, #256]	; (800051c <firmware_update+0x178>)
 800041c:	600a      	str	r2, [r1, #0]
 800041e:	4a3d      	ldr	r2, [pc, #244]	; (8000514 <firmware_update+0x170>)
 8000420:	6812      	ldr	r2, [r2, #0]
 8000422:	493f      	ldr	r1, [pc, #252]	; (8000520 <firmware_update+0x17c>)
 8000424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count++;
 8000428:	4b38      	ldr	r3, [pc, #224]	; (800050c <firmware_update+0x168>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a37      	ldr	r2, [pc, #220]	; (800050c <firmware_update+0x168>)
 8000430:	6013      	str	r3, [r2, #0]
		for(int i=0;i<(my_RxLength/4);i++){
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	3301      	adds	r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	4b33      	ldr	r3, [pc, #204]	; (8000508 <firmware_update+0x164>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	089a      	lsrs	r2, r3, #2
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	429a      	cmp	r2, r3
 8000442:	d8ca      	bhi.n	80003da <firmware_update+0x36>
		}
		writeFlashTest();
 8000444:	f7ff ff48 	bl	80002d8 <writeFlashTest>
		printFlashTest();
 8000448:	f7ff ff84 	bl	8000354 <printFlashTest>
		HAL_Delay(3000);
 800044c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000450:	f000 fc5e 	bl	8000d10 <HAL_Delay>
		userAppStart();
 8000454:	f7ff fef8 	bl	8000248 <userAppStart>
 8000458:	e04b      	b.n	80004f2 <firmware_update+0x14e>
	}else{
		for(int i=0;i<(my_RxLength/4);i++){
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	e02e      	b.n	80004be <firmware_update+0x11a>
			temp1=0;
 8000460:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <firmware_update+0x170>)
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
			for(int j=0;j<4;j++){
 8000466:	2300      	movs	r3, #0
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	e013      	b.n	8000494 <firmware_update+0xf0>
				temp1 |= ((my_RxBuf[4*i+j])<<(8*j));
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	009a      	lsls	r2, r3, #2
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	4413      	add	r3, r2
 8000474:	4a28      	ldr	r2, [pc, #160]	; (8000518 <firmware_update+0x174>)
 8000476:	5cd3      	ldrb	r3, [r2, r3]
 8000478:	461a      	mov	r2, r3
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	00db      	lsls	r3, r3, #3
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	461a      	mov	r2, r3
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <firmware_update+0x170>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4313      	orrs	r3, r2
 800048a:	4a22      	ldr	r2, [pc, #136]	; (8000514 <firmware_update+0x170>)
 800048c:	6013      	str	r3, [r2, #0]
			for(int j=0;j<4;j++){
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	2b03      	cmp	r3, #3
 8000498:	dde8      	ble.n	800046c <firmware_update+0xc8>
			}
			writeFlashData[temp_count++]=temp1;
 800049a:	4b20      	ldr	r3, [pc, #128]	; (800051c <firmware_update+0x178>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	491e      	ldr	r1, [pc, #120]	; (800051c <firmware_update+0x178>)
 80004a2:	600a      	str	r2, [r1, #0]
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <firmware_update+0x170>)
 80004a6:	6812      	ldr	r2, [r2, #0]
 80004a8:	491d      	ldr	r1, [pc, #116]	; (8000520 <firmware_update+0x17c>)
 80004aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			count++;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <firmware_update+0x168>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	4a15      	ldr	r2, [pc, #84]	; (800050c <firmware_update+0x168>)
 80004b6:	6013      	str	r3, [r2, #0]
		for(int i=0;i<(my_RxLength/4);i++){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3301      	adds	r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <firmware_update+0x164>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	089a      	lsrs	r2, r3, #2
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d8ca      	bhi.n	8000460 <firmware_update+0xbc>
		}
		if(temp_count>511){
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <firmware_update+0x178>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004d2:	d30e      	bcc.n	80004f2 <firmware_update+0x14e>
			valid_data=count;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <firmware_update+0x168>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <firmware_update+0x16c>)
 80004dc:	601a      	str	r2, [r3, #0]
			writeFlashTest();
 80004de:	f7ff fefb 	bl	80002d8 <writeFlashTest>
			printFlashTest();
 80004e2:	f7ff ff37 	bl	8000354 <printFlashTest>
			temp_count=0;
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <firmware_update+0x178>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
			count=0;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <firmware_update+0x168>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
		}
	}
	flag2=0;
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <firmware_update+0x15c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
  }
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000fc4 	.word	0x20000fc4
 8000504:	20000c8c 	.word	0x20000c8c
 8000508:	20000fc8 	.word	0x20000fc8
 800050c:	20000210 	.word	0x20000210
 8000510:	20000204 	.word	0x20000204
 8000514:	20000208 	.word	0x20000208
 8000518:	20000fcc 	.word	0x20000fcc
 800051c:	2000020c 	.word	0x2000020c
 8000520:	2000048c 	.word	0x2000048c

08000524 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d10c      	bne.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(flash_flag>1)
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d902      	bls.n	8000544 <HAL_TIM_PeriodElapsedCallback+0x20>
			HAL_TIM_Base_Stop_IT((TIM_HandleTypeDef *)&htim1);
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000540:	f003 f99e 	bl	8003880 <HAL_TIM_Base_Stop_IT>
		flash_flag++;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800054e:	701a      	strb	r2, [r3, #0]
	}
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40012c00 	.word	0x40012c00
 800055c:	20000214 	.word	0x20000214
 8000560:	20000c8c 	.word	0x20000c8c

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fb70 	bl	8000c4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f81e 	bl	80005ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,0);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000576:	480b      	ldr	r0, [pc, #44]	; (80005a4 <main+0x40>)
 8000578:	f001 f864 	bl	8001644 <HAL_GPIO_WritePin>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8f0 	bl	8000760 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000580:	f000 f8c4 	bl	800070c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000584:	f007 fab6 	bl	8007af4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000588:	f000 f86e 	bl	8000668 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,1);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <main+0x40>)
 8000594:	f001 f856 	bl	8001644 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *)&htim1);
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <main+0x44>)
 800059a:	f003 f911 	bl	80037c0 <HAL_TIM_Base_Start_IT>
//		  userAppStart();
		  ;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  firmware_update();
 800059e:	f7ff ff01 	bl	80003a4 <firmware_update>
	  if(flash_flag>2)
 80005a2:	e7fc      	b.n	800059e <main+0x3a>
 80005a4:	40011000 	.word	0x40011000
 80005a8:	20000c8c 	.word	0x20000c8c

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b096      	sub	sp, #88	; 0x58
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f007 ff59 	bl	8008472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]
 80005de:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000600:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fbb8 	bl	8002d7c <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000612:	f000 f93b 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	2101      	movs	r1, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fe22 	bl	800327c <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063e:	f000 f925 	bl	800088c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000642:	2310      	movs	r3, #16
 8000644:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f002 ffb0 	bl	80035b4 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800065a:	f000 f917 	bl	800088c <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3758      	adds	r7, #88	; 0x58
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_TIM1_Init+0x9c>)
 8000686:	4a20      	ldr	r2, [pc, #128]	; (8000708 <MX_TIM1_Init+0xa0>)
 8000688:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_TIM1_Init+0x9c>)
 800068c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_TIM1_Init+0x9c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM1_Init+0x9c>)
 800069a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800069e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006b4:	f003 f834 	bl	8003720 <HAL_TIM_Base_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006be:	f000 f8e5 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006d0:	f003 fa0c 	bl	8003aec <HAL_TIM_ConfigClockSource>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006da:	f000 f8d7 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ec:	f003 fbea 	bl	8003ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006f6:	f000 f8c9 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000c8c 	.word	0x20000c8c
 8000708:	40012c00 	.word	0x40012c00

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART1_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART1_UART_Init+0x4c>)
 8000744:	f003 fc3c 	bl	8003fc0 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f89d 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000044c 	.word	0x2000044c
 800075c:	40013800 	.word	0x40013800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000774:	4b40      	ldr	r3, [pc, #256]	; (8000878 <MX_GPIO_Init+0x118>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a3f      	ldr	r2, [pc, #252]	; (8000878 <MX_GPIO_Init+0x118>)
 800077a:	f043 0320 	orr.w	r3, r3, #32
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <MX_GPIO_Init+0x118>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <MX_GPIO_Init+0x118>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a39      	ldr	r2, [pc, #228]	; (8000878 <MX_GPIO_Init+0x118>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_GPIO_Init+0x118>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_GPIO_Init+0x118>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a33      	ldr	r2, [pc, #204]	; (8000878 <MX_GPIO_Init+0x118>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <MX_GPIO_Init+0x118>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <MX_GPIO_Init+0x118>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a2d      	ldr	r2, [pc, #180]	; (8000878 <MX_GPIO_Init+0x118>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_GPIO_Init+0x118>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2101      	movs	r1, #1
 80007d8:	4828      	ldr	r0, [pc, #160]	; (800087c <MX_GPIO_Init+0x11c>)
 80007da:	f000 ff33 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e4:	4826      	ldr	r0, [pc, #152]	; (8000880 <MX_GPIO_Init+0x120>)
 80007e6:	f000 ff2d 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_GPIO_Init+0x11c>)
 8000802:	f000 fdb5 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	481a      	ldr	r0, [pc, #104]	; (8000884 <MX_GPIO_Init+0x124>)
 800081c:	f000 fda8 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0x120>)
 8000836:	f000 fd9b 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800083a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	480b      	ldr	r0, [pc, #44]	; (8000880 <MX_GPIO_Init+0x120>)
 8000854:	f000 fd8c 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000858:	2304      	movs	r3, #4
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_GPIO_Init+0x128>)
 800086c:	f000 fd80 	bl	8001370 <HAL_GPIO_Init>

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	40010c00 	.word	0x40010c00
 8000880:	40011000 	.word	0x40011000
 8000884:	40010800 	.word	0x40010800
 8000888:	40011400 	.word	0x40011400

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x60>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x60>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_TIM_Base_MspInit+0x74>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12b      	bne.n	8000966 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_TIM_Base_MspInit+0x78>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <HAL_TIM_Base_MspInit+0x78>)
 8000914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_TIM_Base_MspInit+0x78>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2018      	movs	r0, #24
 800092c:	f000 fae9 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000930:	2018      	movs	r0, #24
 8000932:	f000 fb02 	bl	8000f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2019      	movs	r0, #25
 800093c:	f000 fae1 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000940:	2019      	movs	r0, #25
 8000942:	f000 fafa 	bl	8000f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	201a      	movs	r0, #26
 800094c:	f000 fad9 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000950:	201a      	movs	r0, #26
 8000952:	f000 faf2 	bl	8000f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	201b      	movs	r0, #27
 800095c:	f000 fad1 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000960:	201b      	movs	r0, #27
 8000962:	f000 faea 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40012c00 	.word	0x40012c00
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <HAL_UART_MspInit+0x8c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d131      	bne.n	80009fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_UART_MspInit+0x90>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <HAL_UART_MspInit+0x90>)
 800099e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <HAL_UART_MspInit+0x94>)
 80009de:	f000 fcc7 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0x94>)
 80009f8:	f000 fcba 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010800 	.word	0x40010800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <HardFault_Handler+0x4>

08000a22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <BusFault_Handler+0x4>

08000a2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <UsageFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f93c 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a6a:	f000 ff34 	bl	80018d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20001a9c 	.word	0x20001a9c

08000a78 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <TIM1_BRK_IRQHandler+0x10>)
 8000a7e:	f002 ff2d 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000c8c 	.word	0x20000c8c

08000a8c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <TIM1_UP_IRQHandler+0x10>)
 8000a92:	f002 ff23 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000c8c 	.word	0x20000c8c

08000aa0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000aa6:	f002 ff19 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000c8c 	.word	0x20000c8c

08000ab4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM1_CC_IRQHandler+0x10>)
 8000aba:	f002 ff0f 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000c8c 	.word	0x20000c8c

08000ac8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
	}

return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e009      	b.n	8000b28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fb81 	bl	8000224 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf1      	blt.n	8000b14 <_write+0x12>
	}
	return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_close>:

int _close(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b60:	605a      	str	r2, [r3, #4]
	return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
	...

08000b9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x50>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x16>
		heap_end = &end;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <_sbrk+0x50>)
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <_sbrk+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <_sbrk+0x50>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <_sbrk+0x50>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	466a      	mov	r2, sp
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d907      	bls.n	8000bd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bc6:	f007 fc1f 	bl	8008408 <__errno>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	230c      	movs	r3, #12
 8000bce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	e006      	b.n	8000be4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <_sbrk+0x50>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a03      	ldr	r2, [pc, #12]	; (8000bec <_sbrk+0x50>)
 8000be0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000218 	.word	0x20000218
 8000bf0:	20001d90 	.word	0x20001d90

08000bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c02:	e003      	b.n	8000c0c <LoopCopyDataInit>

08000c04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c0a:	3104      	adds	r1, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c0c:	480a      	ldr	r0, [pc, #40]	; (8000c38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c14:	d3f6      	bcc.n	8000c04 <CopyDataInit>
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c18:	e002      	b.n	8000c20 <LoopFillZerobss>

08000c1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c1c:	f842 3b04 	str.w	r3, [r2], #4

08000c20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c24:	d3f9      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c26:	f7ff ffe5 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f007 fbf3 	bl	8008414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff fc99 	bl	8000564 <main>
  bx lr
 8000c32:	4770      	bx	lr
  ldr r3, =_sidata
 8000c34:	080093a4 	.word	0x080093a4
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c3c:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8000c40:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8000c44:	20001d8c 	.word	0x20001d8c

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x28>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x28>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f945 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fe16 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40022000 	.word	0x40022000

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f95d 	bl	8000f56 <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f925 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000010 	.word	0x20000010
 8000cd4:	2000000c 	.word	0x2000000c

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x1c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x20>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	20000010 	.word	0x20000010
 8000cf8:	20000cd8 	.word	0x20000cd8

08000cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <HAL_GetTick+0x10>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000cd8 	.word	0x20000cd8

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff fff0 	bl	8000cfc <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_Delay+0x40>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffe0 	bl	8000cfc <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000010 	.word	0x20000010

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4906      	ldr	r1, [pc, #24]	; (8000dec <__NVIC_EnableIRQ+0x34>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff90 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff2d 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff42 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff90 	bl	8000e44 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5f 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff35 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa2 	bl	8000ea8 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_FLASH_Program+0xd8>)
 8000f8c:	7e1b      	ldrb	r3, [r3, #24]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d101      	bne.n	8000f96 <HAL_FLASH_Program+0x26>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e054      	b.n	8001040 <HAL_FLASH_Program+0xd0>
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <HAL_FLASH_Program+0xd8>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fa0:	f000 f8a8 	bl	80010f4 <FLASH_WaitForLastOperation>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d144      	bne.n	8001038 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d102      	bne.n	8000fba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	757b      	strb	r3, [r7, #21]
 8000fb8:	e007      	b.n	8000fca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d102      	bne.n	8000fc6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	757b      	strb	r3, [r7, #21]
 8000fc4:	e001      	b.n	8000fca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75bb      	strb	r3, [r7, #22]
 8000fce:	e02d      	b.n	800102c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fd0:	7dbb      	ldrb	r3, [r7, #22]
 8000fd2:	005a      	lsls	r2, r3, #1
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	eb02 0c03 	add.w	ip, r2, r3
 8000fda:	7dbb      	ldrb	r3, [r7, #22]
 8000fdc:	0119      	lsls	r1, r3, #4
 8000fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fe2:	f1c1 0620 	rsb	r6, r1, #32
 8000fe6:	f1a1 0020 	sub.w	r0, r1, #32
 8000fea:	fa22 f401 	lsr.w	r4, r2, r1
 8000fee:	fa03 f606 	lsl.w	r6, r3, r6
 8000ff2:	4334      	orrs	r4, r6
 8000ff4:	fa23 f000 	lsr.w	r0, r3, r0
 8000ff8:	4304      	orrs	r4, r0
 8000ffa:	fa23 f501 	lsr.w	r5, r3, r1
 8000ffe:	b2a3      	uxth	r3, r4
 8001000:	4619      	mov	r1, r3
 8001002:	4660      	mov	r0, ip
 8001004:	f000 f85a 	bl	80010bc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001008:	f24c 3050 	movw	r0, #50000	; 0xc350
 800100c:	f000 f872 	bl	80010f4 <FLASH_WaitForLastOperation>
 8001010:	4603      	mov	r3, r0
 8001012:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_FLASH_Program+0xdc>)
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HAL_FLASH_Program+0xdc>)
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d107      	bne.n	8001036 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001026:	7dbb      	ldrb	r3, [r7, #22]
 8001028:	3301      	adds	r3, #1
 800102a:	75bb      	strb	r3, [r7, #22]
 800102c:	7dba      	ldrb	r2, [r7, #22]
 800102e:	7d7b      	ldrb	r3, [r7, #21]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3cd      	bcc.n	8000fd0 <HAL_FLASH_Program+0x60>
 8001034:	e000      	b.n	8001038 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001036:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_FLASH_Program+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	761a      	strb	r2, [r3, #24]

  return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001048:	20000ce0 	.word	0x20000ce0
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_FLASH_Unlock+0x40>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00d      	beq.n	8001082 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_FLASH_Unlock+0x40>)
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_FLASH_Unlock+0x44>)
 800106a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_FLASH_Unlock+0x40>)
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_FLASH_Unlock+0x48>)
 8001070:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_FLASH_Unlock+0x40>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001082:	79fb      	ldrb	r3, [r7, #7]
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000
 8001094:	45670123 	.word	0x45670123
 8001098:	cdef89ab 	.word	0xcdef89ab

0800109c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_FLASH_Lock+0x1c>)
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_FLASH_Lock+0x1c>)
 80010a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000

080010bc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <FLASH_Program_HalfWord+0x30>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <FLASH_Program_HalfWord+0x34>)
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <FLASH_Program_HalfWord+0x34>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	887a      	ldrh	r2, [r7, #2]
 80010de:	801a      	strh	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000ce0 	.word	0x20000ce0
 80010f0:	40022000 	.word	0x40022000

080010f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff fdfe 	bl	8000cfc <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001102:	e010      	b.n	8001126 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110a:	d00c      	beq.n	8001126 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <FLASH_WaitForLastOperation+0x2e>
 8001112:	f7ff fdf3 	bl	8000cfc <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d201      	bcs.n	8001126 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e025      	b.n	8001172 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <FLASH_WaitForLastOperation+0x88>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1e8      	bne.n	8001104 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <FLASH_WaitForLastOperation+0x88>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <FLASH_WaitForLastOperation+0x88>)
 8001140:	2220      	movs	r2, #32
 8001142:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <FLASH_WaitForLastOperation+0x88>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10b      	bne.n	8001168 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <FLASH_WaitForLastOperation+0x88>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001158:	2b00      	cmp	r3, #0
 800115a:	d105      	bne.n	8001168 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <FLASH_WaitForLastOperation+0x88>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001168:	f000 f80a 	bl	8001180 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000

08001180 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <FLASH_SetErrorCode+0x98>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d009      	beq.n	80011aa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <FLASH_SetErrorCode+0x9c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <FLASH_SetErrorCode+0x9c>)
 80011a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <FLASH_SetErrorCode+0x98>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <FLASH_SetErrorCode+0x9c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <FLASH_SetErrorCode+0x9c>)
 80011c0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <FLASH_SetErrorCode+0x98>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <FLASH_SetErrorCode+0x9c>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <FLASH_SetErrorCode+0x9c>)
 80011e0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <FLASH_SetErrorCode+0x98>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <FLASH_SetErrorCode+0x98>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f240 1201 	movw	r2, #257	; 0x101
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d106      	bne.n	8001206 <FLASH_SetErrorCode+0x86>
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <FLASH_SetErrorCode+0x98>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <FLASH_SetErrorCode+0x98>)
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	61d3      	str	r3, [r2, #28]
}  
 8001204:	e002      	b.n	800120c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <FLASH_SetErrorCode+0x98>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60d3      	str	r3, [r2, #12]
}  
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	20000ce0 	.word	0x20000ce0

08001220 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_FLASHEx_Erase+0xd0>)
 8001234:	7e1b      	ldrb	r3, [r3, #24]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_FLASHEx_Erase+0x1e>
 800123a:	2302      	movs	r3, #2
 800123c:	e053      	b.n	80012e6 <HAL_FLASHEx_Erase+0xc6>
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <HAL_FLASHEx_Erase+0xd0>)
 8001240:	2201      	movs	r2, #1
 8001242:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d116      	bne.n	800127a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800124c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001250:	f7ff ff50 	bl	80010f4 <FLASH_WaitForLastOperation>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d141      	bne.n	80012de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 f84c 	bl	80012f8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001260:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001264:	f7ff ff46 	bl	80010f4 <FLASH_WaitForLastOperation>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_FLASHEx_Erase+0xd4>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <HAL_FLASHEx_Erase+0xd4>)
 8001272:	f023 0304 	bic.w	r3, r3, #4
 8001276:	6113      	str	r3, [r2, #16]
 8001278:	e031      	b.n	80012de <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800127a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800127e:	f7ff ff39 	bl	80010f4 <FLASH_WaitForLastOperation>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d12a      	bne.n	80012de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f04f 32ff 	mov.w	r2, #4294967295
 800128e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	e019      	b.n	80012cc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f000 f849 	bl	8001330 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800129e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012a2:	f7ff ff27 	bl	80010f4 <FLASH_WaitForLastOperation>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_FLASHEx_Erase+0xd4>)
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_FLASHEx_Erase+0xd4>)
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	601a      	str	r2, [r3, #0]
            break;
 80012c2:	e00c      	b.n	80012de <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ca:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	02da      	lsls	r2, r3, #11
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3dc      	bcc.n	8001298 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <HAL_FLASHEx_Erase+0xd0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	761a      	strb	r2, [r3, #24]

  return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000ce0 	.word	0x20000ce0
 80012f4:	40022000 	.word	0x40022000

080012f8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <FLASH_MassErase+0x30>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <FLASH_MassErase+0x34>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <FLASH_MassErase+0x34>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <FLASH_MassErase+0x34>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <FLASH_MassErase+0x34>)
 8001318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000ce0 	.word	0x20000ce0
 800132c:	40022000 	.word	0x40022000

08001330 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <FLASH_PageErase+0x38>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <FLASH_PageErase+0x3c>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <FLASH_PageErase+0x3c>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <FLASH_PageErase+0x3c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <FLASH_PageErase+0x3c>)
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <FLASH_PageErase+0x3c>)
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000ce0 	.word	0x20000ce0
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e133      	b.n	80015ec <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001384:	2201      	movs	r2, #1
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8122 	bne.w	80015e6 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d034      	beq.n	8001414 <HAL_GPIO_Init+0xa4>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d80d      	bhi.n	80013ca <HAL_GPIO_Init+0x5a>
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d02b      	beq.n	800140a <HAL_GPIO_Init+0x9a>
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d804      	bhi.n	80013c0 <HAL_GPIO_Init+0x50>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d031      	beq.n	800141e <HAL_GPIO_Init+0xae>
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d01c      	beq.n	80013f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013be:	e048      	b.n	8001452 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d043      	beq.n	800144c <HAL_GPIO_Init+0xdc>
 80013c4:	2b11      	cmp	r3, #17
 80013c6:	d01b      	beq.n	8001400 <HAL_GPIO_Init+0x90>
          break;
 80013c8:	e043      	b.n	8001452 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013ca:	4a8f      	ldr	r2, [pc, #572]	; (8001608 <HAL_GPIO_Init+0x298>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d026      	beq.n	800141e <HAL_GPIO_Init+0xae>
 80013d0:	4a8d      	ldr	r2, [pc, #564]	; (8001608 <HAL_GPIO_Init+0x298>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d806      	bhi.n	80013e4 <HAL_GPIO_Init+0x74>
 80013d6:	4a8d      	ldr	r2, [pc, #564]	; (800160c <HAL_GPIO_Init+0x29c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d020      	beq.n	800141e <HAL_GPIO_Init+0xae>
 80013dc:	4a8c      	ldr	r2, [pc, #560]	; (8001610 <HAL_GPIO_Init+0x2a0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01d      	beq.n	800141e <HAL_GPIO_Init+0xae>
          break;
 80013e2:	e036      	b.n	8001452 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013e4:	4a8b      	ldr	r2, [pc, #556]	; (8001614 <HAL_GPIO_Init+0x2a4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0xae>
 80013ea:	4a8b      	ldr	r2, [pc, #556]	; (8001618 <HAL_GPIO_Init+0x2a8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d016      	beq.n	800141e <HAL_GPIO_Init+0xae>
 80013f0:	4a8a      	ldr	r2, [pc, #552]	; (800161c <HAL_GPIO_Init+0x2ac>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0xae>
          break;
 80013f6:	e02c      	b.n	8001452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e028      	b.n	8001452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	3304      	adds	r3, #4
 8001406:	623b      	str	r3, [r7, #32]
          break;
 8001408:	e023      	b.n	8001452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	3308      	adds	r3, #8
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e01e      	b.n	8001452 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	330c      	adds	r3, #12
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e019      	b.n	8001452 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001426:	2304      	movs	r3, #4
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e012      	b.n	8001452 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	611a      	str	r2, [r3, #16]
          break;
 800143e:	e008      	b.n	8001452 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	615a      	str	r2, [r3, #20]
          break;
 800144a:	e002      	b.n	8001452 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2bff      	cmp	r3, #255	; 0xff
 8001456:	d801      	bhi.n	800145c <HAL_GPIO_Init+0xec>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	e001      	b.n	8001460 <HAL_GPIO_Init+0xf0>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3304      	adds	r3, #4
 8001460:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2bff      	cmp	r3, #255	; 0xff
 8001466:	d802      	bhi.n	800146e <HAL_GPIO_Init+0xfe>
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x104>
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	3b08      	subs	r3, #8
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	210f      	movs	r1, #15
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	401a      	ands	r2, r3
 8001486:	6a39      	ldr	r1, [r7, #32]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	431a      	orrs	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a2 	beq.w	80015e6 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a2:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a5e      	ldr	r2, [pc, #376]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014ba:	4a5a      	ldr	r2, [pc, #360]	; (8001624 <HAL_GPIO_Init+0x2b4>)
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	3302      	adds	r3, #2
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a51      	ldr	r2, [pc, #324]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x1b6>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a50      	ldr	r2, [pc, #320]	; (800162c <HAL_GPIO_Init+0x2bc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x1b2>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4f      	ldr	r2, [pc, #316]	; (8001630 <HAL_GPIO_Init+0x2c0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x1ae>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4e      	ldr	r2, [pc, #312]	; (8001634 <HAL_GPIO_Init+0x2c4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x1aa>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4d      	ldr	r2, [pc, #308]	; (8001638 <HAL_GPIO_Init+0x2c8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x1a6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4c      	ldr	r2, [pc, #304]	; (800163c <HAL_GPIO_Init+0x2cc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x1a2>
 800150e:	2305      	movs	r3, #5
 8001510:	e00a      	b.n	8001528 <HAL_GPIO_Init+0x1b8>
 8001512:	2306      	movs	r3, #6
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x1b8>
 8001516:	2304      	movs	r3, #4
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x1b8>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x1b8>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x1b8>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x1b8>
 8001526:	2300      	movs	r3, #0
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001538:	493a      	ldr	r1, [pc, #232]	; (8001624 <HAL_GPIO_Init+0x2b4>)
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	493a      	ldr	r1, [pc, #232]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
 800155e:	e006      	b.n	800156e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	43db      	mvns	r3, r3
 8001568:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800156a:	4013      	ands	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4930      	ldr	r1, [pc, #192]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e006      	b.n	8001596 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	43db      	mvns	r3, r3
 8001590:	492b      	ldr	r1, [pc, #172]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001592:	4013      	ands	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4926      	ldr	r1, [pc, #152]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4921      	ldr	r1, [pc, #132]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	491c      	ldr	r1, [pc, #112]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60cb      	str	r3, [r1, #12]
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	43db      	mvns	r3, r3
 80015e0:	4917      	ldr	r1, [pc, #92]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	3301      	adds	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f47f aec4 	bne.w	8001384 <HAL_GPIO_Init+0x14>
  }
}
 80015fc:	bf00      	nop
 80015fe:	372c      	adds	r7, #44	; 0x2c
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	10210000 	.word	0x10210000
 800160c:	10110000 	.word	0x10110000
 8001610:	10120000 	.word	0x10120000
 8001614:	10310000 	.word	0x10310000
 8001618:	10320000 	.word	0x10320000
 800161c:	10220000 	.word	0x10220000
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40011000 	.word	0x40011000
 8001634:	40011400 	.word	0x40011400
 8001638:	40011800 	.word	0x40011800
 800163c:	40011c00 	.word	0x40011c00
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af06      	add	r7, sp, #24
 800167a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0fd      	b.n	8001882 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f006 fc0a 	bl	8007eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fe65 	bl	800437c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	687e      	ldr	r6, [r7, #4]
 80016ba:	466d      	mov	r5, sp
 80016bc:	f106 0410 	add.w	r4, r6, #16
 80016c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	1d33      	adds	r3, r6, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f002 fe2f 	bl	8004330 <USB_CoreInit>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0ce      	b.n	8001882 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fe60 	bl	80043b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e04c      	b.n	8001790 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3301      	adds	r3, #1
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	b298      	uxth	r0, r3
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3336      	adds	r3, #54	; 0x36
 8001734:	4602      	mov	r2, r0
 8001736:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3303      	adds	r3, #3
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3338      	adds	r3, #56	; 0x38
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	333c      	adds	r3, #60	; 0x3c
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	3340      	adds	r3, #64	; 0x40
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	3301      	adds	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d3ad      	bcc.n	80016f6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e044      	b.n	800182a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	f203 1369 	addw	r3, r3, #361	; 0x169
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	d3b5      	bcc.n	80017a0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	687e      	ldr	r6, [r7, #4]
 800183c:	466d      	mov	r5, sp
 800183e:	f106 0410 	add.w	r4, r6, #16
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	1d33      	adds	r3, r6, #4
 800184c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f002 fdba 	bl	80043c8 <USB_DevInit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00d      	b.n	8001882 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f004 fd54 	bl	8006328 <USB_DevDisconnect>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800188a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_PCD_Start+0x16>
 800189c:	2302      	movs	r3, #2
 800189e:	e016      	b.n	80018ce <HAL_PCD_Start+0x44>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fd4f 	bl	8004350 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80018b2:	2101      	movs	r1, #1
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f006 fd70 	bl	800839a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 fd28 	bl	8006314 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b088      	sub	sp, #32
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 fd2a 	bl	800633c <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018f2:	d102      	bne.n	80018fa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fb61 	bl	8001fbc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fd1c 	bl	800633c <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190e:	d112      	bne.n	8001936 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001922:	b292      	uxth	r2, r2
 8001924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f006 fb3e 	bl	8007faa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f925 	bl	8001b80 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fcfe 	bl	800633c <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800194a:	d10b      	bne.n	8001964 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f004 fce7 	bl	800633c <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001978:	d10b      	bne.n	8001992 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800198c:	b292      	uxth	r2, r2
 800198e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f004 fcd0 	bl	800633c <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a6:	d126      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0208 	bic.w	r2, r2, #8
 80019d2:	b292      	uxth	r2, r2
 80019d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f006 fb1f 	bl	800801c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fc9e 	bl	800633c <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a0a:	f040 8084 	bne.w	8001b16 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	77fb      	strb	r3, [r7, #31]
 8001a12:	e011      	b.n	8001a38 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	441a      	add	r2, r3
 8001a20:	7ffb      	ldrb	r3, [r7, #31]
 8001a22:	8812      	ldrh	r2, [r2, #0]
 8001a24:	b292      	uxth	r2, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	f107 0120 	add.w	r1, r7, #32
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	3301      	adds	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
 8001a38:	7ffb      	ldrb	r3, [r7, #31]
 8001a3a:	2b07      	cmp	r3, #7
 8001a3c:	d9ea      	bls.n	8001a14 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	b292      	uxth	r2, r2
 8001a52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001a6e:	bf00      	nop
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f6      	beq.n	8001a70 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	77fb      	strb	r3, [r7, #31]
 8001a9e:	e010      	b.n	8001ac2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001aa0:	7ffb      	ldrb	r3, [r7, #31]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	7ffa      	ldrb	r2, [r7, #31]
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	440a      	add	r2, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	f107 0120 	add.w	r1, r7, #32
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001aba:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	77fb      	strb	r3, [r7, #31]
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d9eb      	bls.n	8001aa0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0208 	orr.w	r2, r2, #8
 8001ada:	b292      	uxth	r2, r2
 8001adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	b292      	uxth	r2, r2
 8001af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0204 	orr.w	r2, r2, #4
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f006 fa69 	bl	8007fe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fc0e 	bl	800633c <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2a:	d10e      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f006 fa22 	bl	8007f8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 fbf4 	bl	800633c <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b5e:	d10b      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b72:	b292      	uxth	r2, r2
 8001b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_PCD_SetAddress+0x1a>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e013      	b.n	8001bc2 <HAL_PCD_SetAddress+0x42>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fb9b 	bl	80062ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	4608      	mov	r0, r1
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4603      	mov	r3, r0
 8001bda:	70fb      	strb	r3, [r7, #3]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	803b      	strh	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da0e      	bge.n	8001c0e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	705a      	strb	r2, [r3, #1]
 8001c0c:	e00e      	b.n	8001c2c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 0207 	and.w	r2, r3, #7
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c38:	883a      	ldrh	r2, [r7, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	78ba      	ldrb	r2, [r7, #2]
 8001c42:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c56:	78bb      	ldrb	r3, [r7, #2]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_PCD_EP_Open+0xa6>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e00e      	b.n	8001c8e <HAL_PCD_EP_Open+0xc4>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fbc2 	bl	8004408 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da0e      	bge.n	8001cc8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	705a      	strb	r2, [r3, #1]
 8001cc6:	e00e      	b.n	8001ce6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 0207 	and.w	r2, r3, #7
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_EP_Close+0x6a>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00e      	b.n	8001d1e <HAL_PCD_EP_Close+0x88>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fee4 	bl	8004adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	460b      	mov	r3, r1
 8001d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	f003 0207 	and.w	r2, r3, #7
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f896 	bl	8004eb4 <USB_EPStartXfer>
 8001d88:	e005      	b.n	8001d96 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6979      	ldr	r1, [r7, #20]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 f88f 	bl	8004eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 0207 	and.w	r2, r3, #7
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2201      	movs	r2, #1
 8001e18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d106      	bne.n	8001e3e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6979      	ldr	r1, [r7, #20]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 f83c 	bl	8004eb4 <USB_EPStartXfer>
 8001e3c:	e005      	b.n	8001e4a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6979      	ldr	r1, [r7, #20]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 f835 	bl	8004eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 0207 	and.w	r2, r3, #7
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d901      	bls.n	8001e72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e04c      	b.n	8001f0c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da0e      	bge.n	8001e98 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	705a      	strb	r2, [r3, #1]
 8001e96:	e00c      	b.n	8001eb2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_PCD_EP_SetStall+0x7e>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e01c      	b.n	8001f0c <HAL_PCD_EP_SetStall+0xb8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68f9      	ldr	r1, [r7, #12]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 f907 	bl	80060f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d108      	bne.n	8001f02 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f004 fa2c 	bl	800635a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d901      	bls.n	8001f32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e040      	b.n	8001fb4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da0e      	bge.n	8001f58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	705a      	strb	r2, [r3, #1]
 8001f56:	e00e      	b.n	8001f76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 0207 	and.w	r2, r3, #7
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_PCD_EP_ClrStall+0x82>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e00e      	b.n	8001fb4 <HAL_PCD_EP_ClrStall+0xa0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68f9      	ldr	r1, [r7, #12]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 f8f5 	bl	8006194 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08e      	sub	sp, #56	; 0x38
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fc4:	e2df      	b.n	8002586 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fce:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001fdc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 8158 	bne.w	8002296 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d152      	bne.n	8002096 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002000:	81fb      	strh	r3, [r7, #14]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	89fb      	ldrh	r3, [r7, #14]
 8002008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800200c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002010:	b29b      	uxth	r3, r3
 8002012:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3328      	adds	r3, #40	; 0x28
 8002018:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	3302      	adds	r3, #2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	4413      	add	r3, r2
 8002038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	441a      	add	r2, r3
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f005 ff7f 	bl	8007f5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 828e 	beq.w	8002586 <PCD_EP_ISR_Handler+0x5ca>
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 8289 	bne.w	8002586 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002080:	b2da      	uxtb	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b292      	uxth	r2, r2
 8002088:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002094:	e277      	b.n	8002586 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d034      	beq.n	800211a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	3306      	adds	r3, #6
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f004 f982 	bl	80063f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002100:	4013      	ands	r3, r2
 8002102:	823b      	strh	r3, [r7, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	8a3a      	ldrh	r2, [r7, #16]
 800210a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800210e:	b292      	uxth	r2, r2
 8002110:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f005 fef4 	bl	8007f00 <HAL_PCD_SetupStageCallback>
 8002118:	e235      	b.n	8002586 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800211a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800211e:	2b00      	cmp	r3, #0
 8002120:	f280 8231 	bge.w	8002586 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29a      	uxth	r2, r3
 800212c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002130:	4013      	ands	r3, r2
 8002132:	83bb      	strh	r3, [r7, #28]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	8bba      	ldrh	r2, [r7, #28]
 800213a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800213e:	b292      	uxth	r2, r2
 8002140:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214a:	b29b      	uxth	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	3306      	adds	r3, #6
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d019      	beq.n	80021aa <PCD_EP_ISR_Handler+0x1ee>
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	6959      	ldr	r1, [r3, #20]
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800218e:	b29b      	uxth	r3, r3
 8002190:	f004 f932 	bl	80063f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	441a      	add	r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021a2:	2100      	movs	r1, #0
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f005 febd 	bl	8007f24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	4413      	add	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d112      	bne.n	80021f8 <PCD_EP_ISR_Handler+0x23c>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021dc:	b29a      	uxth	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	801a      	strh	r2, [r3, #0]
 80021f6:	e02f      	b.n	8002258 <PCD_EP_ISR_Handler+0x29c>
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b3e      	cmp	r3, #62	; 0x3e
 80021fe:	d813      	bhi.n	8002228 <PCD_EP_ISR_Handler+0x26c>
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <PCD_EP_ISR_Handler+0x25e>
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	3301      	adds	r3, #1
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	b29b      	uxth	r3, r3
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	b29a      	uxth	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	e017      	b.n	8002258 <PCD_EP_ISR_Handler+0x29c>
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <PCD_EP_ISR_Handler+0x286>
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	3b01      	subs	r3, #1
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	b29b      	uxth	r3, r3
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	b29b      	uxth	r3, r3
 800224a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800224e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002252:	b29a      	uxth	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002268:	827b      	strh	r3, [r7, #18]
 800226a:	8a7b      	ldrh	r3, [r7, #18]
 800226c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002270:	827b      	strh	r3, [r7, #18]
 8002272:	8a7b      	ldrh	r3, [r7, #18]
 8002274:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002278:	827b      	strh	r3, [r7, #18]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	8a7b      	ldrh	r3, [r7, #18]
 8002280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002290:	b29b      	uxth	r3, r3
 8002292:	8013      	strh	r3, [r2, #0]
 8002294:	e177      	b.n	8002586 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f280 80ea 	bge.w	8002486 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022c8:	4013      	ands	r3, r2
 80022ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e0:	b292      	uxth	r2, r2
 80022e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	7b1b      	ldrb	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d122      	bne.n	8002348 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	3306      	adds	r3, #6
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800232c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8087 	beq.w	8002442 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	6959      	ldr	r1, [r3, #20]
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	88da      	ldrh	r2, [r3, #6]
 8002340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002342:	f004 f859 	bl	80063f8 <USB_ReadPMA>
 8002346:	e07c      	b.n	8002442 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	78db      	ldrb	r3, [r3, #3]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d108      	bne.n	8002362 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002350:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002352:	461a      	mov	r2, r3
 8002354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f923 	bl	80025a2 <HAL_PCD_EP_DB_Receive>
 800235c:	4603      	mov	r3, r0
 800235e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002360:	e06f      	b.n	8002442 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237c:	847b      	strh	r3, [r7, #34]	; 0x22
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	441a      	add	r2, r3
 800238c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800238e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800239e:	b29b      	uxth	r3, r3
 80023a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d021      	beq.n	8002400 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	3302      	adds	r3, #2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02a      	beq.n	8002442 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	891a      	ldrh	r2, [r3, #8]
 80023f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023fa:	f003 fffd 	bl	80063f8 <USB_ReadPMA>
 80023fe:	e020      	b.n	8002442 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002408:	b29b      	uxth	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	3306      	adds	r3, #6
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002428:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800242a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	6959      	ldr	r1, [r3, #20]
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	895a      	ldrh	r2, [r3, #10]
 800243c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800243e:	f003 ffdb 	bl	80063f8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002448:	441a      	add	r2, r3
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002454:	441a      	add	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <PCD_EP_ISR_Handler+0x4b0>
 8002462:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d206      	bcs.n	800247a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f005 fd56 	bl	8007f24 <HAL_PCD_DataOutStageCallback>
 8002478:	e005      	b.n	8002486 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fd17 	bl	8004eb4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002486:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b00      	cmp	r3, #0
 800248e:	d07a      	beq.n	8002586 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002490:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	843b      	strh	r3, [r7, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	441a      	add	r2, r3
 80024ce:	8c3b      	ldrh	r3, [r7, #32]
 80024d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d8:	b29b      	uxth	r3, r3
 80024da:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	78db      	ldrb	r3, [r3, #3]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d108      	bne.n	80024f6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d146      	bne.n	800257a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80024ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d141      	bne.n	800257a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	3302      	adds	r3, #2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	8bfb      	ldrh	r3, [r7, #30]
 8002526:	429a      	cmp	r2, r3
 8002528:	d906      	bls.n	8002538 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	8bfb      	ldrh	r3, [r7, #30]
 8002530:	1ad2      	subs	r2, r2, r3
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	619a      	str	r2, [r3, #24]
 8002536:	e002      	b.n	800253e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f005 fd04 	bl	8007f5a <HAL_PCD_DataInStageCallback>
 8002552:	e018      	b.n	8002586 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	8bfb      	ldrh	r3, [r7, #30]
 800255a:	441a      	add	r2, r3
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	8bfb      	ldrh	r3, [r7, #30]
 8002566:	441a      	add	r2, r3
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fc9e 	bl	8004eb4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002578:	e005      	b.n	8002586 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800257a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800257c:	461a      	mov	r2, r3
 800257e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f91b 	bl	80027bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800258e:	b29b      	uxth	r3, r3
 8002590:	b21b      	sxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f6ff ad17 	blt.w	8001fc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3738      	adds	r7, #56	; 0x38
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b088      	sub	sp, #32
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d07e      	beq.n	80026b8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	3302      	adds	r3, #2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	8b7b      	ldrh	r3, [r7, #26]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d306      	bcc.n	80025fc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	8b7b      	ldrh	r3, [r7, #26]
 80025f4:	1ad2      	subs	r2, r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	e002      	b.n	8002602 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d123      	bne.n	8002652 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002624:	833b      	strh	r3, [r7, #24]
 8002626:	8b3b      	ldrh	r3, [r7, #24]
 8002628:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800262c:	833b      	strh	r3, [r7, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	441a      	add	r2, r3
 800263c:	8b3b      	ldrh	r3, [r7, #24]
 800263e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264e:	b29b      	uxth	r3, r3
 8002650:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01f      	beq.n	800269c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	82fb      	strh	r3, [r7, #22]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	8afb      	ldrh	r3, [r7, #22]
 8002688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800268c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002698:	b29b      	uxth	r3, r3
 800269a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800269c:	8b7b      	ldrh	r3, [r7, #26]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8087 	beq.w	80027b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	891a      	ldrh	r2, [r3, #8]
 80026b0:	8b7b      	ldrh	r3, [r7, #26]
 80026b2:	f003 fea1 	bl	80063f8 <USB_ReadPMA>
 80026b6:	e07c      	b.n	80027b2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	3306      	adds	r3, #6
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	8b7b      	ldrh	r3, [r7, #26]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d306      	bcc.n	80026fa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	8b7b      	ldrh	r3, [r7, #26]
 80026f2:	1ad2      	subs	r2, r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	619a      	str	r2, [r3, #24]
 80026f8:	e002      	b.n	8002700 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	83fb      	strh	r3, [r7, #30]
 8002724:	8bfb      	ldrh	r3, [r7, #30]
 8002726:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800272a:	83fb      	strh	r3, [r7, #30]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	441a      	add	r2, r3
 800273a:	8bfb      	ldrh	r3, [r7, #30]
 800273c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274c:	b29b      	uxth	r3, r3
 800274e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11f      	bne.n	800279a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002774:	83bb      	strh	r3, [r7, #28]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	8bbb      	ldrh	r3, [r7, #28]
 8002786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800278e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002792:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002796:	b29b      	uxth	r3, r3
 8002798:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800279a:	8b7b      	ldrh	r3, [r7, #26]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6959      	ldr	r1, [r3, #20]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	895a      	ldrh	r2, [r3, #10]
 80027ac:	8b7b      	ldrh	r3, [r7, #26]
 80027ae:	f003 fe23 	bl	80063f8 <USB_ReadPMA>
    }
  }

  return count;
 80027b2:	8b7b      	ldrh	r3, [r7, #26]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b092      	sub	sp, #72	; 0x48
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8132 	beq.w	8002a3a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	3302      	adds	r3, #2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002806:	429a      	cmp	r2, r3
 8002808:	d906      	bls.n	8002818 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002810:	1ad2      	subs	r2, r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	e002      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12c      	bne.n	8002880 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f005 fb94 	bl	8007f5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 822f 	beq.w	8002c9c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	827b      	strh	r3, [r7, #18]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	441a      	add	r2, r3
 8002868:	8a7b      	ldrh	r3, [r7, #18]
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]
 800287e:	e20d      	b.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01f      	beq.n	80028ca <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	441a      	add	r2, r3
 80028b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f040 81e3 	bne.w	8002c9c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028dc:	441a      	add	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028e8:	441a      	add	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d309      	bcc.n	800290e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	621a      	str	r2, [r3, #32]
 800290c:	e014      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002922:	e009      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d155      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0x230>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	011a      	lsls	r2, r3, #4
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	2b00      	cmp	r3, #0
 800296c:	d112      	bne.n	8002994 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	801a      	strh	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298c:	b29a      	uxth	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	e047      	b.n	8002a24 <HAL_PCD_EP_DB_Transmit+0x268>
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	2b3e      	cmp	r3, #62	; 0x3e
 8002998:	d811      	bhi.n	80029be <HAL_PCD_EP_DB_Transmit+0x202>
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	3301      	adds	r3, #1
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e032      	b.n	8002a24 <HAL_PCD_EP_DB_Transmit+0x268>
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x218>
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	b29b      	uxth	r3, r3
 80029dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	e01b      	b.n	8002a24 <HAL_PCD_EP_DB_Transmit+0x268>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	785b      	ldrb	r3, [r3, #1]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d117      	bne.n	8002a24 <HAL_PCD_EP_DB_Transmit+0x268>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	623b      	str	r3, [r7, #32]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	4413      	add	r3, r2
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	011a      	lsls	r2, r3, #4
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	4413      	add	r3, r2
 8002a16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6959      	ldr	r1, [r3, #20]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	891a      	ldrh	r2, [r3, #8]
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f003 fc9c 	bl	8006370 <USB_WritePMA>
 8002a38:	e130      	b.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3306      	adds	r3, #6
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a62:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d306      	bcc.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e002      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12c      	bne.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f005 fa62 	bl	8007f5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 80fd 	bne.w	8002c9c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8013      	strh	r3, [r2, #0]
 8002ae2:	e0db      	b.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11f      	bne.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	441a      	add	r2, r3
 8002b18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 80b1 	bne.w	8002c9c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b40:	441a      	add	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b4c:	441a      	add	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6a1a      	ldr	r2, [r3, #32]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d309      	bcc.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	1ad2      	subs	r2, r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	621a      	str	r2, [r3, #32]
 8002b70:	e014      	b.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b86:	e009      	b.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	785b      	ldrb	r3, [r3, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d155      	bne.n	8002c56 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbe:	4413      	add	r3, r2
 8002bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	011a      	lsls	r2, r3, #4
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bca:	4413      	add	r3, r2
 8002bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d112      	bne.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x442>
 8002bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	801a      	strh	r2, [r3, #0]
 8002bfc:	e044      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	2b3e      	cmp	r3, #62	; 0x3e
 8002c02:	d811      	bhi.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c16:	3301      	adds	r3, #1
 8002c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	029b      	lsls	r3, r3, #10
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	e02f      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x482>
 8002c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	029b      	lsls	r3, r3, #10
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	e018      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d114      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	4413      	add	r3, r2
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	011a      	lsls	r2, r3, #4
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c78:	4413      	add	r3, r2
 8002c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6959      	ldr	r1, [r3, #20]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	895a      	ldrh	r2, [r3, #10]
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f003 fb6a 	bl	8006370 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb6:	823b      	strh	r3, [r7, #16]
 8002cb8:	8a3b      	ldrh	r3, [r7, #16]
 8002cba:	f083 0310 	eor.w	r3, r3, #16
 8002cbe:	823b      	strh	r3, [r7, #16]
 8002cc0:	8a3b      	ldrh	r3, [r7, #16]
 8002cc2:	f083 0320 	eor.w	r3, r3, #32
 8002cc6:	823b      	strh	r3, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	8a3b      	ldrh	r3, [r7, #16]
 8002cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3748      	adds	r7, #72	; 0x48
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	817b      	strh	r3, [r7, #10]
 8002d04:	4613      	mov	r3, r2
 8002d06:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d14:	897b      	ldrh	r3, [r7, #10]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e009      	b.n	8002d40 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d2c:	897a      	ldrh	r2, [r7, #10]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	80da      	strh	r2, [r3, #6]
 8002d54:	e00b      	b.n	8002d6e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e26c      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8087 	beq.w	8002eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9c:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d00c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002da8:	4b8f      	ldr	r3, [pc, #572]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d112      	bne.n	8002dda <HAL_RCC_OscConfig+0x5e>
 8002db4:	4b8c      	ldr	r3, [pc, #560]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc2:	4b89      	ldr	r3, [pc, #548]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d06c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x12c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d168      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e246      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x76>
 8002de4:	4b80      	ldr	r3, [pc, #512]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7f      	ldr	r2, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e02e      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x98>
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7a      	ldr	r2, [pc, #488]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b78      	ldr	r3, [pc, #480]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a77      	ldr	r2, [pc, #476]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0xbc>
 8002e1e:	4b72      	ldr	r3, [pc, #456]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a71      	ldr	r2, [pc, #452]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b6f      	ldr	r3, [pc, #444]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6e      	ldr	r2, [pc, #440]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xd4>
 8002e38:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a6a      	ldr	r2, [pc, #424]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fd ff50 	bl	8000cfc <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fd ff4c 	bl	8000cfc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1fa      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe4>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fd ff3c 	bl	8000cfc <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fd ff38 	bl	8000cfc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1e6      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x10c>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ec2:	4b49      	ldr	r3, [pc, #292]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x18c>
 8002ece:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x176>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1ba      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4939      	ldr	r1, [pc, #228]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	e03a      	b.n	8002f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCC_OscConfig+0x270>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7fd fef1 	bl	8000cfc <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fd feed 	bl	8000cfc <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e19b      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4927      	ldr	r1, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_RCC_OscConfig+0x270>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fd fed0 	bl	8000cfc <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fd fecc 	bl	8000cfc <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e17a      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d03a      	beq.n	8003000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d019      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_RCC_OscConfig+0x274>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fd feb0 	bl	8000cfc <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fd feac 	bl	8000cfc <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e15a      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f000 fada 	bl	8003578 <RCC_Delay>
 8002fc4:	e01c      	b.n	8003000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fcc:	f7fd fe96 	bl	8000cfc <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd2:	e00f      	b.n	8002ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fd fe92 	bl	8000cfc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e140      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	42420000 	.word	0x42420000
 8002ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	4b9e      	ldr	r3, [pc, #632]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e9      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a6 	beq.w	800315a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003012:	4b97      	ldr	r3, [pc, #604]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301e:	4b94      	ldr	r3, [pc, #592]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a93      	ldr	r2, [pc, #588]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003028:	61d3      	str	r3, [r2, #28]
 800302a:	4b91      	ldr	r3, [pc, #580]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b8e      	ldr	r3, [pc, #568]	; (8003274 <HAL_RCC_OscConfig+0x4f8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b8b      	ldr	r3, [pc, #556]	; (8003274 <HAL_RCC_OscConfig+0x4f8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a8a      	ldr	r2, [pc, #552]	; (8003274 <HAL_RCC_OscConfig+0x4f8>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7fd fe53 	bl	8000cfc <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fd fe4f 	bl	8000cfc <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b64      	cmp	r3, #100	; 0x64
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0fd      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	4b81      	ldr	r3, [pc, #516]	; (8003274 <HAL_RCC_OscConfig+0x4f8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x312>
 8003080:	4b7b      	ldr	r3, [pc, #492]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a7a      	ldr	r2, [pc, #488]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	e02d      	b.n	80030ea <HAL_RCC_OscConfig+0x36e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x334>
 8003096:	4b76      	ldr	r3, [pc, #472]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a75      	ldr	r2, [pc, #468]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6213      	str	r3, [r2, #32]
 80030a2:	4b73      	ldr	r3, [pc, #460]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a72      	ldr	r2, [pc, #456]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	e01c      	b.n	80030ea <HAL_RCC_OscConfig+0x36e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCC_OscConfig+0x356>
 80030b8:	4b6d      	ldr	r3, [pc, #436]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a6c      	ldr	r2, [pc, #432]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6213      	str	r3, [r2, #32]
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a69      	ldr	r2, [pc, #420]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0x36e>
 80030d2:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a66      	ldr	r2, [pc, #408]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	6213      	str	r3, [r2, #32]
 80030de:	4b64      	ldr	r3, [pc, #400]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a63      	ldr	r2, [pc, #396]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	f023 0304 	bic.w	r3, r3, #4
 80030e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d015      	beq.n	800311e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fe03 	bl	8000cfc <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fd fdff 	bl	8000cfc <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0ab      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	4b57      	ldr	r3, [pc, #348]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ee      	beq.n	80030fa <HAL_RCC_OscConfig+0x37e>
 800311c:	e014      	b.n	8003148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fd fded 	bl	8000cfc <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd fde9 	bl	8000cfc <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e095      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	4b4c      	ldr	r3, [pc, #304]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ee      	bne.n	8003126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b48      	ldr	r3, [pc, #288]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a47      	ldr	r2, [pc, #284]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8081 	beq.w	8003266 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d061      	beq.n	8003234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d146      	bne.n	8003206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <HAL_RCC_OscConfig+0x4fc>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fd fdbd 	bl	8000cfc <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fd fdb9 	bl	8000cfc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e067      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d108      	bne.n	80031c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	492d      	ldr	r1, [pc, #180]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c0:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a19      	ldr	r1, [r3, #32]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	430b      	orrs	r3, r1
 80031d2:	4927      	ldr	r1, [pc, #156]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_OscConfig+0x4fc>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fd fd8d 	bl	8000cfc <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fd fd89 	bl	8000cfc <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e037      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x46a>
 8003204:	e02f      	b.n	8003266 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <HAL_RCC_OscConfig+0x4fc>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd fd76 	bl	8000cfc <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd fd72 	bl	8000cfc <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e020      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x498>
 8003232:	e018      	b.n	8003266 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e013      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_OscConfig+0x4f4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	429a      	cmp	r2, r3
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
 8003278:	42420060 	.word	0x42420060

0800327c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0d0      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d910      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b67      	ldr	r3, [pc, #412]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	4965      	ldr	r1, [pc, #404]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b63      	ldr	r3, [pc, #396]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a52      	ldr	r2, [pc, #328]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	494d      	ldr	r1, [pc, #308]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d040      	beq.n	800339c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d115      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e073      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06b      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4936      	ldr	r1, [pc, #216]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800336c:	f7fd fcc6 	bl	8000cfc <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	e00a      	b.n	800338a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003374:	f7fd fcc2 	bl	8000cfc <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e053      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 020c 	and.w	r2, r3, #12
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	429a      	cmp	r2, r3
 800339a:	d1eb      	bne.n	8003374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d210      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	4922      	ldr	r1, [pc, #136]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e032      	b.n	8003432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4916      	ldr	r1, [pc, #88]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490e      	ldr	r1, [pc, #56]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800340a:	f000 f821 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800340e:	4601      	mov	r1, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	fa21 f303 	lsr.w	r3, r1, r3
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1cc>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fc24 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
 8003444:	080092ec 	.word	0x080092ec
 8003448:	20000008 	.word	0x20000008
 800344c:	2000000c 	.word	0x2000000c

08003450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b490      	push	{r4, r7}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003458:	1d3c      	adds	r4, r7, #4
 800345a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800345c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800347a:	4b23      	ldr	r3, [pc, #140]	; (8003508 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x40>
 800348a:	2b08      	cmp	r3, #8
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x46>
 800348e:	e02d      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003492:	623b      	str	r3, [r7, #32]
      break;
 8003494:	e02d      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	0c9b      	lsrs	r3, r3, #18
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034a2:	4413      	add	r3, r2
 80034a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0c5b      	lsrs	r3, r3, #17
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034c2:	4413      	add	r3, r2
 80034c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	4a0f      	ldr	r2, [pc, #60]	; (800350c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ce:	fb02 f203 	mul.w	r2, r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	e004      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034e0:	fb02 f303 	mul.w	r3, r2, r3
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	623b      	str	r3, [r7, #32]
      break;
 80034ea:	e002      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ee:	623b      	str	r3, [r7, #32]
      break;
 80034f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f2:	6a3b      	ldr	r3, [r7, #32]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3728      	adds	r7, #40	; 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc90      	pop	{r4, r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	08009290 	.word	0x08009290
 8003504:	080092a0 	.word	0x080092a0
 8003508:	40021000 	.word	0x40021000
 800350c:	007a1200 	.word	0x007a1200
 8003510:	003d0900 	.word	0x003d0900

08003514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <HAL_RCC_GetHCLKFreq+0x10>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	20000008 	.word	0x20000008

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800352c:	f7ff fff2 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003530:	4601      	mov	r1, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4a03      	ldr	r2, [pc, #12]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	080092fc 	.word	0x080092fc

08003550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003554:	f7ff ffde 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003558:	4601      	mov	r1, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	0adb      	lsrs	r3, r3, #11
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4a03      	ldr	r2, [pc, #12]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	080092fc 	.word	0x080092fc

08003578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <RCC_Delay+0x34>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <RCC_Delay+0x38>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0a5b      	lsrs	r3, r3, #9
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003594:	bf00      	nop
  }
  while (Delay --);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1e5a      	subs	r2, r3, #1
 800359a:	60fa      	str	r2, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f9      	bne.n	8003594 <RCC_Delay+0x1c>
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000008 	.word	0x20000008
 80035b0:	10624dd3 	.word	0x10624dd3

080035b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d07d      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80035d0:	2300      	movs	r3, #0
 80035d2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10d      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4a4b      	ldr	r2, [pc, #300]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ea:	61d3      	str	r3, [r2, #28]
 80035ec:	4b49      	ldr	r3, [pc, #292]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d118      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003608:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a42      	ldr	r2, [pc, #264]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003614:	f7fd fb72 	bl	8000cfc <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	e008      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fd fb6e 	bl	8000cfc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e06d      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d02e      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d027      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003658:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003662:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800366e:	4a29      	ldr	r2, [pc, #164]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d014      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fd fb3d 	bl	8000cfc <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fd fb39 	bl	8000cfc <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e036      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4917      	ldr	r1, [pc, #92]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4a13      	ldr	r2, [pc, #76]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	490b      	ldr	r1, [pc, #44]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4904      	ldr	r1, [pc, #16]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
 800371c:	42420440 	.word	0x42420440

08003720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e041      	b.n	80037b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd f8d8 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 faa0 	bl	8003ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d001      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e044      	b.n	8003862 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_TIM_Base_Start_IT+0xac>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x6c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_TIM_Base_Start_IT+0xb0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x6c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d00e      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x6c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a18      	ldr	r2, [pc, #96]	; (8003874 <HAL_TIM_Base_Start_IT+0xb4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x6c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_TIM_Base_Start_IT+0xb8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x6c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_TIM_Base_Start_IT+0xbc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b06      	cmp	r3, #6
 800383c:	d010      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	e007      	b.n	8003860 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40013400 	.word	0x40013400
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800
 800387c:	40000c00 	.word	0x40000c00

08003880 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1a      	ldr	r2, [r3, #32]
 800389e:	f241 1311 	movw	r3, #4369	; 0x1111
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10f      	bne.n	80038c8 <HAL_TIM_Base_Stop_IT+0x48>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	f240 4344 	movw	r3, #1092	; 0x444
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <HAL_TIM_Base_Stop_IT+0x48>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0202 	mvn.w	r2, #2
 8003908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9a4 	bl	8003c6c <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f997 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f9a6 	bl	8003c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0204 	mvn.w	r2, #4
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f97a 	bl	8003c6c <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f96d 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f97c 	bl	8003c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0208 	mvn.w	r2, #8
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f950 	bl	8003c6c <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f943 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f952 	bl	8003c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0210 	mvn.w	r2, #16
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f926 	bl	8003c6c <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f919 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f928 	bl	8003c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0201 	mvn.w	r2, #1
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fc fd62 	bl	8000524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa91 	bl	8003fae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8ec 	bl	8003c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0220 	mvn.w	r2, #32
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa5c 	bl	8003f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_ConfigClockSource+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0a6      	b.n	8003c52 <HAL_TIM_ConfigClockSource+0x166>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d067      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x120>
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d80b      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x6c>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d073      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d802      	bhi.n	8003b4e <HAL_TIM_ConfigClockSource+0x62>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d06f      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b4c:	e078      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d06c      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
 8003b52:	2b30      	cmp	r3, #48	; 0x30
 8003b54:	d06a      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b56:	e073      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d00d      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0x8c>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d804      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x7e>
 8003b60:	2b50      	cmp	r3, #80	; 0x50
 8003b62:	d033      	beq.n	8003bcc <HAL_TIM_ConfigClockSource+0xe0>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d041      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b68:	e06a      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d066      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x152>
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d017      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b76:	e063      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f000 f97d 	bl	8003e86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	609a      	str	r2, [r3, #8]
      break;
 8003ba4:	e04c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f000 f966 	bl	8003e86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc8:	609a      	str	r2, [r3, #8]
      break;
 8003bca:	e039      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f000 f8dd 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2150      	movs	r1, #80	; 0x50
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f934 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003bea:	e029      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 f8fb 	bl	8003df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2160      	movs	r1, #96	; 0x60
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f924 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e019      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 f8bd 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f914 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e009      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 f90b 	bl	8003e52 <TIM_ITRx_SetConfig>
        break;
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
	...

08003ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a33      	ldr	r2, [pc, #204]	; (8003d84 <TIM_Base_SetConfig+0xe0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a32      	ldr	r2, [pc, #200]	; (8003d88 <TIM_Base_SetConfig+0xe4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00f      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cca:	d00b      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <TIM_Base_SetConfig+0xe8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a2e      	ldr	r2, [pc, #184]	; (8003d90 <TIM_Base_SetConfig+0xec>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a2d      	ldr	r2, [pc, #180]	; (8003d94 <TIM_Base_SetConfig+0xf0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d108      	bne.n	8003cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <TIM_Base_SetConfig+0xe0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <TIM_Base_SetConfig+0x82>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <TIM_Base_SetConfig+0xe4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00f      	beq.n	8003d26 <TIM_Base_SetConfig+0x82>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0x82>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <TIM_Base_SetConfig+0xe8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0x82>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <TIM_Base_SetConfig+0xec>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0x82>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <TIM_Base_SetConfig+0xf0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <TIM_Base_SetConfig+0xe0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0xc8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <TIM_Base_SetConfig+0xe4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d103      	bne.n	8003d74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	615a      	str	r2, [r3, #20]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40013400 	.word	0x40013400
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40000c00 	.word	0x40000c00

08003d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 030a 	bic.w	r3, r3, #10
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f023 0210 	bic.w	r2, r3, #16
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	031b      	lsls	r3, r3, #12
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e050      	b.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10c      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00

08003f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e03f      	b.n	8004052 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc fcc6 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f905 	bl	8004214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08a      	sub	sp, #40	; 0x28
 800405e:	af02      	add	r7, sp, #8
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d17c      	bne.n	8004174 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_UART_Transmit+0x2c>
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e075      	b.n	8004176 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_UART_Transmit+0x3e>
 8004094:	2302      	movs	r3, #2
 8004096:	e06e      	b.n	8004176 <HAL_UART_Transmit+0x11c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2221      	movs	r2, #33	; 0x21
 80040aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80040ae:	f7fc fe25 	bl	8000cfc <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d108      	bne.n	80040dc <HAL_UART_Transmit+0x82>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e003      	b.n	80040e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80040ec:	e02a      	b.n	8004144 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f840 	bl	800417e <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e036      	b.n	8004176 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	3302      	adds	r3, #2
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e007      	b.n	8004136 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	3301      	adds	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1cf      	bne.n	80040ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	2140      	movs	r1, #64	; 0x40
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f810 	bl	800417e <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e006      	b.n	8004176 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418e:	e02c      	b.n	80041ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d028      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0x30>
 800419e:	f7fc fdad 	bl	8000cfc <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d21d      	bcs.n	80041ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00f      	b.n	800420a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	429a      	cmp	r2, r3
 8004206:	d0c3      	beq.n	8004190 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800424e:	f023 030c 	bic.w	r3, r3, #12
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	430b      	orrs	r3, r1
 800425a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <UART_SetConfig+0x114>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d103      	bne.n	8004284 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800427c:	f7ff f968 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	e002      	b.n	800428a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004284:	f7ff f950 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8004288:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009a      	lsls	r2, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	4a22      	ldr	r2, [pc, #136]	; (800432c <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	0119      	lsls	r1, r3, #4
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009a      	lsls	r2, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <UART_SetConfig+0x118>)
 80042c2:	fba3 0302 	umull	r0, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2064      	movs	r0, #100	; 0x64
 80042ca:	fb00 f303 	mul.w	r3, r0, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	3332      	adds	r3, #50	; 0x32
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <UART_SetConfig+0x118>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e0:	4419      	add	r1, r3
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009a      	lsls	r2, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <UART_SetConfig+0x118>)
 80042fa:	fba3 0302 	umull	r0, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2064      	movs	r0, #100	; 0x64
 8004302:	fb00 f303 	mul.w	r3, r0, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	3332      	adds	r3, #50	; 0x32
 800430c:	4a07      	ldr	r2, [pc, #28]	; (800432c <UART_SetConfig+0x118>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	440a      	add	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40013800 	.word	0x40013800
 800432c:	51eb851f 	.word	0x51eb851f

08004330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	f107 0014 	add.w	r0, r7, #20
 800433e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	b004      	add	sp, #16
 800434e:	4770      	bx	lr

08004350 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004360:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004364:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004384:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004388:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	b29b      	uxth	r3, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	b29b      	uxth	r3, r3
 800439a:	4013      	ands	r3, r2
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043c8:	b084      	sub	sp, #16
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	f107 0014 	add.w	r0, r7, #20
 80043d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	b004      	add	sp, #16
 8004406:	4770      	bx	lr

08004408 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004408:	b480      	push	{r7}
 800440a:	b09b      	sub	sp, #108	; 0x6c
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	78db      	ldrb	r3, [r3, #3]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d81f      	bhi.n	800447a <USB_ActivateEndpoint+0x72>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <USB_ActivateEndpoint+0x38>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004451 	.word	0x08004451
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004483 	.word	0x08004483
 800444c:	0800445f 	.word	0x0800445f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004450:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004458:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800445c:	e012      	b.n	8004484 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800445e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004462:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004466:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800446a:	e00b      	b.n	8004484 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800446c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004474:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004478:	e004      	b.n	8004484 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004480:	e000      	b.n	8004484 <USB_ActivateEndpoint+0x7c>
      break;
 8004482:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	b29a      	uxth	r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	7b1b      	ldrb	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 8149 	bne.w	8004788 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8084 	beq.w	8004608 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450a:	b29b      	uxth	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4413      	add	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	88db      	ldrh	r3, [r3, #6]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	b29b      	uxth	r3, r3
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	81fb      	strh	r3, [r7, #14]
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <USB_ActivateEndpoint+0x17c>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	81bb      	strh	r3, [r7, #12]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	89bb      	ldrh	r3, [r7, #12]
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	78db      	ldrb	r3, [r3, #3]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d020      	beq.n	80045ce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a2:	813b      	strh	r3, [r7, #8]
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	f083 0320 	eor.w	r3, r3, #32
 80045aa:	813b      	strh	r3, [r7, #8]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	893b      	ldrh	r3, [r7, #8]
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
 80045cc:	e27f      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e4:	817b      	strh	r3, [r7, #10]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	897b      	ldrh	r3, [r7, #10]
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]
 8004606:	e262      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	4413      	add	r3, r2
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	011a      	lsls	r2, r3, #4
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	4413      	add	r3, r2
 8004626:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	88db      	ldrh	r3, [r3, #6]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	4413      	add	r3, r2
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	011a      	lsls	r2, r3, #4
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	4413      	add	r3, r2
 800465a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d112      	bne.n	800468e <USB_ActivateEndpoint+0x286>
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004672:	b29a      	uxth	r2, r3
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004686:	b29a      	uxth	r2, r3
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	e02f      	b.n	80046ee <USB_ActivateEndpoint+0x2e6>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b3e      	cmp	r3, #62	; 0x3e
 8004694:	d813      	bhi.n	80046be <USB_ActivateEndpoint+0x2b6>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	663b      	str	r3, [r7, #96]	; 0x60
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <USB_ActivateEndpoint+0x2a8>
 80046aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ac:	3301      	adds	r3, #1
 80046ae:	663b      	str	r3, [r7, #96]	; 0x60
 80046b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e017      	b.n	80046ee <USB_ActivateEndpoint+0x2e6>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <USB_ActivateEndpoint+0x2d0>
 80046d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046d4:	3b01      	subs	r3, #1
 80046d6:	663b      	str	r3, [r7, #96]	; 0x60
 80046d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046da:	b29b      	uxth	r3, r3
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	83fb      	strh	r3, [r7, #30]
 80046fc:	8bfb      	ldrh	r3, [r7, #30]
 80046fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <USB_ActivateEndpoint+0x336>
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	83bb      	strh	r3, [r7, #28]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	8bbb      	ldrh	r3, [r7, #28]
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	837b      	strh	r3, [r7, #26]
 8004756:	8b7b      	ldrh	r3, [r7, #26]
 8004758:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800475c:	837b      	strh	r3, [r7, #26]
 800475e:	8b7b      	ldrh	r3, [r7, #26]
 8004760:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004764:	837b      	strh	r3, [r7, #26]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8b7b      	ldrh	r3, [r7, #26]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
 8004786:	e1a2      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80047b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d4:	4413      	add	r3, r2
 80047d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e6:	657b      	str	r3, [r7, #84]	; 0x54
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	891b      	ldrh	r3, [r3, #8]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	653b      	str	r3, [r7, #80]	; 0x50
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	4413      	add	r3, r2
 800480a:	653b      	str	r3, [r7, #80]	; 0x50
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	011a      	lsls	r2, r3, #4
 8004812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004814:	4413      	add	r3, r2
 8004816:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	895b      	ldrh	r3, [r3, #10]
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 8091 	bne.w	8004958 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01b      	beq.n	8004886 <USB_ActivateEndpoint+0x47e>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800487e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004882:	b29b      	uxth	r3, r3
 8004884:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	873b      	strh	r3, [r7, #56]	; 0x38
 8004894:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01b      	beq.n	80048d6 <USB_ActivateEndpoint+0x4ce>
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004934:	867b      	strh	r3, [r7, #50]	; 0x32
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
 8004956:	e0ba      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004968:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800496c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01d      	beq.n	80049b0 <USB_ActivateEndpoint+0x5a8>
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800499c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01d      	beq.n	8004a08 <USB_ActivateEndpoint+0x600>
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	78db      	ldrb	r3, [r3, #3]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d024      	beq.n	8004a5a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a2e:	f083 0320 	eor.w	r3, r3, #32
 8004a32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
 8004a58:	e01d      	b.n	8004a96 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	376c      	adds	r7, #108	; 0x6c
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b08d      	sub	sp, #52	; 0x34
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	7b1b      	ldrb	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 808e 	bne.w	8004c0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d044      	beq.n	8004b82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	81bb      	strh	r3, [r7, #12]
 8004b06:	89bb      	ldrh	r3, [r7, #12]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <USB_DeactivateEndpoint+0x6c>
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	817b      	strh	r3, [r7, #10]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	897b      	ldrh	r3, [r7, #10]
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5e:	813b      	strh	r3, [r7, #8]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	893b      	ldrh	r3, [r7, #8]
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]
 8004b80:	e192      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	827b      	strh	r3, [r7, #18]
 8004b90:	8a7b      	ldrh	r3, [r7, #18]
 8004b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01b      	beq.n	8004bd2 <USB_DeactivateEndpoint+0xf6>
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	823b      	strh	r3, [r7, #16]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	8a3b      	ldrh	r3, [r7, #16]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	81fb      	strh	r3, [r7, #14]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]
 8004c0a:	e14d      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 80a5 	bne.w	8004d60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	843b      	strh	r3, [r7, #32]
 8004c24:	8c3b      	ldrh	r3, [r7, #32]
 8004c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01b      	beq.n	8004c66 <USB_DeactivateEndpoint+0x18a>
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c44:	83fb      	strh	r3, [r7, #30]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	83bb      	strh	r3, [r7, #28]
 8004c74:	8bbb      	ldrh	r3, [r7, #28]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01b      	beq.n	8004cb6 <USB_DeactivateEndpoint+0x1da>
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c94:	837b      	strh	r3, [r7, #26]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	8b7b      	ldrh	r3, [r7, #26]
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	833b      	strh	r3, [r7, #24]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	8b3b      	ldrh	r3, [r7, #24]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d04:	82fb      	strh	r3, [r7, #22]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	8afb      	ldrh	r3, [r7, #22]
 8004d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3c:	82bb      	strh	r3, [r7, #20]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	8abb      	ldrh	r3, [r7, #20]
 8004d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]
 8004d5e:	e0a3      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <USB_DeactivateEndpoint+0x2d4>
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <USB_DeactivateEndpoint+0x324>
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	853b      	strh	r3, [r7, #40]	; 0x28
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3734      	adds	r7, #52	; 0x34
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b0c4      	sub	sp, #272	; 0x110
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	6018      	str	r0, [r3, #0]
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	f040 8557 	bne.w	800597c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ece:	463b      	mov	r3, r7
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d905      	bls.n	8004eea <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004ede:	463b      	mov	r3, r7
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ee8:	e004      	b.n	8004ef4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004eea:	463b      	mov	r3, r7
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	7b1b      	ldrb	r3, [r3, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d12c      	bne.n	8004f58 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004efe:	463b      	mov	r3, r7
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6959      	ldr	r1, [r3, #20]
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	88da      	ldrh	r2, [r3, #6]
 8004f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	1d38      	adds	r0, r7, #4
 8004f12:	6800      	ldr	r0, [r0, #0]
 8004f14:	f001 fa2c 	bl	8006370 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f18:	1d3b      	adds	r3, r7, #4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	463b      	mov	r3, r7
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	011a      	lsls	r2, r3, #4
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f40:	f107 0310 	add.w	r3, r7, #16
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	f000 bcdd 	b.w	8005912 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f58:	463b      	mov	r3, r7
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	f040 8347 	bne.w	80055f2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f240 82eb 	bls.w	800554c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fba:	463b      	mov	r3, r7
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fcc:	1d3b      	adds	r3, r7, #4
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8159 	beq.w	800529a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
 8004fee:	463b      	mov	r3, r7
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d164      	bne.n	80050c2 <USB_EPStartXfer+0x20e>
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	4413      	add	r3, r2
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	4413      	add	r3, r2
 800501c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
 8005022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d112      	bne.n	8005050 <USB_EPStartXfer+0x19c>
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005034:	b29a      	uxth	r2, r3
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005048:	b29a      	uxth	r2, r3
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	e054      	b.n	80050fa <USB_EPStartXfer+0x246>
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005054:	2b3e      	cmp	r3, #62	; 0x3e
 8005056:	d817      	bhi.n	8005088 <USB_EPStartXfer+0x1d4>
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <USB_EPStartXfer+0x1c4>
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005072:	3301      	adds	r3, #1
 8005074:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507c:	b29b      	uxth	r3, r3
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	b29a      	uxth	r2, r3
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	e038      	b.n	80050fa <USB_EPStartXfer+0x246>
 8005088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <USB_EPStartXfer+0x1f4>
 800509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a2:	3b01      	subs	r3, #1
 80050a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	029b      	lsls	r3, r3, #10
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e01b      	b.n	80050fa <USB_EPStartXfer+0x246>
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d116      	bne.n	80050fa <USB_EPStartXfer+0x246>
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	4413      	add	r3, r2
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	011a      	lsls	r2, r3, #4
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	895b      	ldrh	r3, [r3, #10]
 8005100:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005104:	463b      	mov	r3, r7
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6959      	ldr	r1, [r3, #20]
 800510a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510e:	b29b      	uxth	r3, r3
 8005110:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005114:	1d38      	adds	r0, r7, #4
 8005116:	6800      	ldr	r0, [r0, #0]
 8005118:	f001 f92a 	bl	8006370 <USB_WritePMA>
            ep->xfer_buff += len;
 800511c:	463b      	mov	r3, r7
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005126:	441a      	add	r2, r3
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800512e:	463b      	mov	r3, r7
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	d909      	bls.n	8005152 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005148:	1ad2      	subs	r2, r2, r3
 800514a:	463b      	mov	r3, r7
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	621a      	str	r2, [r3, #32]
 8005150:	e008      	b.n	8005164 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005152:	463b      	mov	r3, r7
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2200      	movs	r2, #0
 8005162:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d164      	bne.n	8005238 <USB_EPStartXfer+0x384>
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d112      	bne.n	80051c6 <USB_EPStartXfer+0x312>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051be:	b29a      	uxth	r2, r3
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	e057      	b.n	8005276 <USB_EPStartXfer+0x3c2>
 80051c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ca:	2b3e      	cmp	r3, #62	; 0x3e
 80051cc:	d817      	bhi.n	80051fe <USB_EPStartXfer+0x34a>
 80051ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <USB_EPStartXfer+0x33a>
 80051e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051e8:	3301      	adds	r3, #1
 80051ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	e03b      	b.n	8005276 <USB_EPStartXfer+0x3c2>
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <USB_EPStartXfer+0x36a>
 8005214:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005218:	3b01      	subs	r3, #1
 800521a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800521e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005222:	b29b      	uxth	r3, r3
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005230:	b29a      	uxth	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e01e      	b.n	8005276 <USB_EPStartXfer+0x3c2>
 8005238:	463b      	mov	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d119      	bne.n	8005276 <USB_EPStartXfer+0x3c2>
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005250:	b29b      	uxth	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	4413      	add	r3, r2
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	463b      	mov	r3, r7
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	011a      	lsls	r2, r3, #4
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	4413      	add	r3, r2
 8005266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005270:	b29a      	uxth	r2, r3
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005276:	463b      	mov	r3, r7
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	891b      	ldrh	r3, [r3, #8]
 800527c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528a:	b29b      	uxth	r3, r3
 800528c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005290:	1d38      	adds	r0, r7, #4
 8005292:	6800      	ldr	r0, [r0, #0]
 8005294:	f001 f86c 	bl	8006370 <USB_WritePMA>
 8005298:	e33b      	b.n	8005912 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800529a:	463b      	mov	r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d164      	bne.n	800536e <USB_EPStartXfer+0x4ba>
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	4413      	add	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	011a      	lsls	r2, r3, #4
 80052c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c6:	4413      	add	r3, r2
 80052c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d112      	bne.n	80052fc <USB_EPStartXfer+0x448>
 80052d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e057      	b.n	80053ac <USB_EPStartXfer+0x4f8>
 80052fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005300:	2b3e      	cmp	r3, #62	; 0x3e
 8005302:	d817      	bhi.n	8005334 <USB_EPStartXfer+0x480>
 8005304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800530e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <USB_EPStartXfer+0x470>
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531e:	3301      	adds	r3, #1
 8005320:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005328:	b29b      	uxth	r3, r3
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	b29a      	uxth	r2, r3
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e03b      	b.n	80053ac <USB_EPStartXfer+0x4f8>
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800533e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <USB_EPStartXfer+0x4a0>
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534e:	3b01      	subs	r3, #1
 8005350:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29b      	uxth	r3, r3
 800535e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005366:	b29a      	uxth	r2, r3
 8005368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e01e      	b.n	80053ac <USB_EPStartXfer+0x4f8>
 800536e:	463b      	mov	r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d119      	bne.n	80053ac <USB_EPStartXfer+0x4f8>
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	657b      	str	r3, [r7, #84]	; 0x54
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538c:	4413      	add	r3, r2
 800538e:	657b      	str	r3, [r7, #84]	; 0x54
 8005390:	463b      	mov	r3, r7
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	011a      	lsls	r2, r3, #4
 8005398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800539a:	4413      	add	r3, r2
 800539c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053a0:	653b      	str	r3, [r7, #80]	; 0x50
 80053a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ac:	463b      	mov	r3, r7
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	891b      	ldrh	r3, [r3, #8]
 80053b2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6959      	ldr	r1, [r3, #20]
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053c6:	1d38      	adds	r0, r7, #4
 80053c8:	6800      	ldr	r0, [r0, #0]
 80053ca:	f000 ffd1 	bl	8006370 <USB_WritePMA>
            ep->xfer_buff += len;
 80053ce:	463b      	mov	r3, r7
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d8:	441a      	add	r2, r3
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a1a      	ldr	r2, [r3, #32]
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d909      	bls.n	8005404 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	621a      	str	r2, [r3, #32]
 8005402:	e008      	b.n	8005416 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	647b      	str	r3, [r7, #68]	; 0x44
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d164      	bne.n	80054f0 <USB_EPStartXfer+0x63c>
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005434:	b29b      	uxth	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	4413      	add	r3, r2
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005448:	4413      	add	r3, r2
 800544a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d112      	bne.n	800547e <USB_EPStartXfer+0x5ca>
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005462:	b29a      	uxth	r2, r3
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e054      	b.n	8005528 <USB_EPStartXfer+0x674>
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	2b3e      	cmp	r3, #62	; 0x3e
 8005484:	d817      	bhi.n	80054b6 <USB_EPStartXfer+0x602>
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <USB_EPStartXfer+0x5f2>
 800549c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e038      	b.n	8005528 <USB_EPStartXfer+0x674>
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <USB_EPStartXfer+0x622>
 80054cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054d0:	3b01      	subs	r3, #1
 80054d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e01b      	b.n	8005528 <USB_EPStartXfer+0x674>
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d116      	bne.n	8005528 <USB_EPStartXfer+0x674>
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005508:	4413      	add	r3, r2
 800550a:	647b      	str	r3, [r7, #68]	; 0x44
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	011a      	lsls	r2, r3, #4
 8005514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005516:	4413      	add	r3, r2
 8005518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
 800551e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005522:	b29a      	uxth	r2, r3
 8005524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005526:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	895b      	ldrh	r3, [r3, #10]
 800552e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6959      	ldr	r1, [r3, #20]
 8005538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553c:	b29b      	uxth	r3, r3
 800553e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005542:	1d38      	adds	r0, r7, #4
 8005544:	6800      	ldr	r0, [r0, #0]
 8005546:	f000 ff13 	bl	8006370 <USB_WritePMA>
 800554a:	e1e2      	b.n	8005912 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800554c:	463b      	mov	r3, r7
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	463b      	mov	r3, r7
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	663b      	str	r3, [r7, #96]	; 0x60
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ae:	4413      	add	r3, r2
 80055b0:	663b      	str	r3, [r7, #96]	; 0x60
 80055b2:	463b      	mov	r3, r7
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055bc:	4413      	add	r3, r2
 80055be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	891b      	ldrh	r3, [r3, #8]
 80055d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6959      	ldr	r1, [r3, #20]
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055e8:	1d38      	adds	r0, r7, #4
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	f000 fec0 	bl	8006370 <USB_WritePMA>
 80055f0:	e18f      	b.n	8005912 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 808f 	beq.w	800572c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	67bb      	str	r3, [r7, #120]	; 0x78
 8005614:	463b      	mov	r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d164      	bne.n	80056e8 <USB_EPStartXfer+0x834>
 800561e:	1d3b      	adds	r3, r7, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	673b      	str	r3, [r7, #112]	; 0x70
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005632:	4413      	add	r3, r2
 8005634:	673b      	str	r3, [r7, #112]	; 0x70
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	011a      	lsls	r2, r3, #4
 800563e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005640:	4413      	add	r3, r2
 8005642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d112      	bne.n	8005676 <USB_EPStartXfer+0x7c2>
 8005650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800565a:	b29a      	uxth	r2, r3
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29b      	uxth	r3, r3
 8005666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566e:	b29a      	uxth	r2, r3
 8005670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	e054      	b.n	8005720 <USB_EPStartXfer+0x86c>
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	2b3e      	cmp	r3, #62	; 0x3e
 800567c:	d817      	bhi.n	80056ae <USB_EPStartXfer+0x7fa>
 800567e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <USB_EPStartXfer+0x7ea>
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	3301      	adds	r3, #1
 800569a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e038      	b.n	8005720 <USB_EPStartXfer+0x86c>
 80056ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <USB_EPStartXfer+0x81a>
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	3b01      	subs	r3, #1
 80056ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	029b      	lsls	r3, r3, #10
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e01b      	b.n	8005720 <USB_EPStartXfer+0x86c>
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d116      	bne.n	8005720 <USB_EPStartXfer+0x86c>
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005700:	4413      	add	r3, r2
 8005702:	67bb      	str	r3, [r7, #120]	; 0x78
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011a      	lsls	r2, r3, #4
 800570c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800570e:	4413      	add	r3, r2
 8005710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005714:	677b      	str	r3, [r7, #116]	; 0x74
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571a:	b29a      	uxth	r2, r3
 800571c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	895b      	ldrh	r3, [r3, #10]
 8005726:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800572a:	e097      	b.n	800585c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d168      	bne.n	8005808 <USB_EPStartXfer+0x954>
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800574e:	4413      	add	r3, r2
 8005750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	011a      	lsls	r2, r3, #4
 800575c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005760:	4413      	add	r3, r2
 8005762:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005766:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d112      	bne.n	8005796 <USB_EPStartXfer+0x8e2>
 8005770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800577a:	b29a      	uxth	r2, r3
 800577c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578e:	b29a      	uxth	r2, r3
 8005790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e05d      	b.n	8005852 <USB_EPStartXfer+0x99e>
 8005796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579a:	2b3e      	cmp	r3, #62	; 0x3e
 800579c:	d817      	bhi.n	80057ce <USB_EPStartXfer+0x91a>
 800579e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <USB_EPStartXfer+0x90a>
 80057b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057b8:	3301      	adds	r3, #1
 80057ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e041      	b.n	8005852 <USB_EPStartXfer+0x99e>
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <USB_EPStartXfer+0x93a>
 80057e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057e8:	3b01      	subs	r3, #1
 80057ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005800:	b29a      	uxth	r2, r3
 8005802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e024      	b.n	8005852 <USB_EPStartXfer+0x99e>
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d11f      	bne.n	8005852 <USB_EPStartXfer+0x99e>
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800582a:	4413      	add	r3, r2
 800582c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	011a      	lsls	r2, r3, #4
 8005838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800583c:	4413      	add	r3, r2
 800583e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584a:	b29a      	uxth	r2, r3
 800584c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005850:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	891b      	ldrh	r3, [r3, #8]
 8005858:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6959      	ldr	r1, [r3, #20]
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	b29b      	uxth	r3, r3
 8005868:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800586c:	1d38      	adds	r0, r7, #4
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	f000 fd7e 	bl	8006370 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d122      	bne.n	80058c4 <USB_EPStartXfer+0xa10>
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005898:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
 80058c2:	e026      	b.n	8005912 <USB_EPStartXfer+0xa5e>
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d121      	bne.n	8005912 <USB_EPStartXfer+0xa5e>
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	463b      	mov	r3, r7
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	463b      	mov	r3, r7
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800590a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f107 020e 	add.w	r2, r7, #14
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005930:	8013      	strh	r3, [r2, #0]
 8005932:	f107 030e 	add.w	r3, r7, #14
 8005936:	f107 020e 	add.w	r2, r7, #14
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	f082 0210 	eor.w	r2, r2, #16
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f107 030e 	add.w	r3, r7, #14
 8005946:	f107 020e 	add.w	r2, r7, #14
 800594a:	8812      	ldrh	r2, [r2, #0]
 800594c:	f082 0220 	eor.w	r2, r2, #32
 8005950:	801a      	strh	r2, [r3, #0]
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	f107 030e 	add.w	r3, r7, #14
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
 800597a:	e3b5      	b.n	80060e8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800597c:	463b      	mov	r3, r7
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	7b1b      	ldrb	r3, [r3, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 8090 	bne.w	8005aa8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d90e      	bls.n	80059b6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005998:	463b      	mov	r3, r7
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80059a2:	463b      	mov	r3, r7
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	619a      	str	r2, [r3, #24]
 80059b4:	e008      	b.n	80059c8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059c8:	1d3b      	adds	r3, r7, #4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d8:	b29b      	uxth	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059e0:	4413      	add	r3, r2
 80059e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	011a      	lsls	r2, r3, #4
 80059ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059f2:	4413      	add	r3, r2
 80059f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d116      	bne.n	8005a32 <USB_EPStartXfer+0xb7e>
 8005a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	e32c      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8005a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a36:	2b3e      	cmp	r3, #62	; 0x3e
 8005a38:	d818      	bhi.n	8005a6c <USB_EPStartXfer+0xbb8>
 8005a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <USB_EPStartXfer+0xba6>
 8005a50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a54:	3301      	adds	r3, #1
 8005a56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	029b      	lsls	r3, r3, #10
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e30f      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8005a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <USB_EPStartXfer+0xbd8>
 8005a82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a86:	3b01      	subs	r3, #1
 8005a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e2f1      	b.n	800608c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	f040 818f 	bne.w	8005dd2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d175      	bne.n	8005baa <USB_EPStartXfer+0xcf6>
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	011a      	lsls	r2, r3, #4
 8005ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d116      	bne.n	8005b2a <USB_EPStartXfer+0xc76>
 8005afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e065      	b.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b3e      	cmp	r3, #62	; 0x3e
 8005b32:	d81a      	bhi.n	8005b6a <USB_EPStartXfer+0xcb6>
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <USB_EPStartXfer+0xca4>
 8005b4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b52:	3301      	adds	r3, #1
 8005b54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	029b      	lsls	r3, r3, #10
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	e045      	b.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USB_EPStartXfer+0xcda>
 8005b84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e025      	b.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d120      	bne.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005bb4:	1d3b      	adds	r3, r7, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bbc:	1d3b      	adds	r3, r7, #4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bcc:	4413      	add	r3, r2
 8005bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d175      	bne.n	8005cf4 <USB_EPStartXfer+0xe40>
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c20:	4413      	add	r3, r2
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	011a      	lsls	r2, r3, #4
 8005c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c32:	4413      	add	r3, r2
 8005c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d116      	bne.n	8005c74 <USB_EPStartXfer+0xdc0>
 8005c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e061      	b.n	8005d38 <USB_EPStartXfer+0xe84>
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7c:	d81a      	bhi.n	8005cb4 <USB_EPStartXfer+0xe00>
 8005c7e:	463b      	mov	r3, r7
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <USB_EPStartXfer+0xdee>
 8005c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e041      	b.n	8005d38 <USB_EPStartXfer+0xe84>
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <USB_EPStartXfer+0xe24>
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e021      	b.n	8005d38 <USB_EPStartXfer+0xe84>
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d11c      	bne.n	8005d38 <USB_EPStartXfer+0xe84>
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d0e:	4413      	add	r3, r2
 8005d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	011a      	lsls	r2, r3, #4
 8005d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 81a4 	beq.w	800608c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <USB_EPStartXfer+0xebc>
 8005d64:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 8187 	bne.w	800608c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d7e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 8180 	bne.w	800608c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
 8005dd0:	e15c      	b.n	800608c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	f040 8155 	bne.w	8006088 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699a      	ldr	r2, [r3, #24]
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d90e      	bls.n	8005e0c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005df8:	463b      	mov	r3, r7
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	619a      	str	r2, [r3, #24]
 8005e0a:	e008      	b.n	8005e1e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005e16:	463b      	mov	r3, r7
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e1e:	463b      	mov	r3, r7
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d16f      	bne.n	8005f08 <USB_EPStartXfer+0x1054>
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e40:	4413      	add	r3, r2
 8005e42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d116      	bne.n	8005e92 <USB_EPStartXfer+0xfde>
 8005e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e05f      	b.n	8005f52 <USB_EPStartXfer+0x109e>
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	2b3e      	cmp	r3, #62	; 0x3e
 8005e98:	d818      	bhi.n	8005ecc <USB_EPStartXfer+0x1018>
 8005e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <USB_EPStartXfer+0x1006>
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e042      	b.n	8005f52 <USB_EPStartXfer+0x109e>
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <USB_EPStartXfer+0x1038>
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e024      	b.n	8005f52 <USB_EPStartXfer+0x109e>
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d11f      	bne.n	8005f52 <USB_EPStartXfer+0x109e>
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f30:	463b      	mov	r3, r7
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	011a      	lsls	r2, r3, #4
 8005f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	1d3b      	adds	r3, r7, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d16f      	bne.n	8006044 <USB_EPStartXfer+0x1190>
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	011a      	lsls	r2, r3, #4
 8005f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d116      	bne.n	8005fce <USB_EPStartXfer+0x111a>
 8005fa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e05e      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8005fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd4:	d818      	bhi.n	8006008 <USB_EPStartXfer+0x1154>
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <USB_EPStartXfer+0x1142>
 8005fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	029b      	lsls	r3, r3, #10
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e041      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8006008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <USB_EPStartXfer+0x1174>
 800601e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006022:	3b01      	subs	r3, #1
 8006024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602c:	b29b      	uxth	r3, r3
 800602e:	029b      	lsls	r3, r3, #10
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e023      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8006044:	463b      	mov	r3, r7
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d11e      	bne.n	800608c <USB_EPStartXfer+0x11d8>
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006056:	b29b      	uxth	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800605e:	4413      	add	r3, r2
 8006060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006064:	463b      	mov	r3, r7
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	011a      	lsls	r2, r3, #4
 800606c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006070:	4413      	add	r3, r2
 8006072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800607a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607e:	b29a      	uxth	r2, r3
 8006080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e001      	b.n	800608c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e02e      	b.n	80060ea <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800608c:	1d3b      	adds	r3, r7, #4
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	441a      	add	r2, r3
 80060d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d020      	beq.n	8006148 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611c:	81bb      	strh	r3, [r7, #12]
 800611e:	89bb      	ldrh	r3, [r7, #12]
 8006120:	f083 0310 	eor.w	r3, r3, #16
 8006124:	81bb      	strh	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	89bb      	ldrh	r3, [r7, #12]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
 8006146:	e01f      	b.n	8006188 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	81fb      	strh	r3, [r7, #14]
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006166:	81fb      	strh	r3, [r7, #14]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	441a      	add	r2, r3
 8006172:	89fb      	ldrh	r3, [r7, #14]
 8006174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006184:	b29b      	uxth	r3, r3
 8006186:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	7b1b      	ldrb	r3, [r3, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 809d 	bne.w	80062e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d04c      	beq.n	800624a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	823b      	strh	r3, [r7, #16]
 80061be:	8a3b      	ldrh	r3, [r7, #16]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <USB_EPClearStall+0x6c>
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	81fb      	strh	r3, [r7, #14]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	89fb      	ldrh	r3, [r7, #14]
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	78db      	ldrb	r3, [r3, #3]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d06c      	beq.n	80062e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	81bb      	strh	r3, [r7, #12]
 8006220:	89bb      	ldrh	r3, [r7, #12]
 8006222:	f083 0320 	eor.w	r3, r3, #32
 8006226:	81bb      	strh	r3, [r7, #12]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	89bb      	ldrh	r3, [r7, #12]
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
 8006248:	e04b      	b.n	80062e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	82fb      	strh	r3, [r7, #22]
 8006258:	8afb      	ldrh	r3, [r7, #22]
 800625a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01b      	beq.n	800629a <USB_EPClearStall+0x106>
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006278:	82bb      	strh	r3, [r7, #20]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	8abb      	ldrh	r3, [r7, #20]
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	827b      	strh	r3, [r7, #18]
 80062b2:	8a7b      	ldrh	r3, [r7, #18]
 80062b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062b8:	827b      	strh	r3, [r7, #18]
 80062ba:	8a7b      	ldrh	r3, [r7, #18]
 80062bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062c0:	827b      	strh	r3, [r7, #18]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8a7b      	ldrh	r3, [r7, #18]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr

080062ee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800634a:	b29b      	uxth	r3, r3
 800634c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800634e:	68fb      	ldr	r3, [r7, #12]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006370:	b480      	push	{r7}
 8006372:	b08d      	sub	sp, #52	; 0x34
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	460b      	mov	r3, r1
 8006380:	80fb      	strh	r3, [r7, #6]
 8006382:	4613      	mov	r3, r2
 8006384:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006386:	88bb      	ldrh	r3, [r7, #4]
 8006388:	3301      	adds	r3, #1
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	005a      	lsls	r2, r3, #1
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a8:	e01e      	b.n	80063e8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	3301      	adds	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	b29b      	uxth	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	3302      	adds	r3, #2
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	3302      	adds	r3, #2
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	3b01      	subs	r3, #1
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1dd      	bne.n	80063aa <USB_WritePMA+0x3a>
  }
}
 80063ee:	bf00      	nop
 80063f0:	3734      	adds	r7, #52	; 0x34
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b08b      	sub	sp, #44	; 0x2c
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	460b      	mov	r3, r1
 8006408:	80fb      	strh	r3, [r7, #6]
 800640a:	4613      	mov	r3, r2
 800640c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800640e:	88bb      	ldrh	r3, [r7, #4]
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	b29b      	uxth	r3, r3
 8006414:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	005a      	lsls	r2, r3, #1
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
 8006430:	e01b      	b.n	800646a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	3302      	adds	r3, #2
 800643e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	b2da      	uxtb	r2, r3
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	3301      	adds	r3, #1
 800645c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	3302      	adds	r3, #2
 8006462:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	3b01      	subs	r3, #1
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e0      	bne.n	8006432 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006470:	88bb      	ldrh	r3, [r7, #4]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	701a      	strb	r2, [r3, #0]
  }
}
 800648c:	bf00      	nop
 800648e:	372c      	adds	r7, #44	; 0x2c
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr

08006496 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	7c1b      	ldrb	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d115      	bne.n	80064da <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b2:	2202      	movs	r2, #2
 80064b4:	2181      	movs	r1, #129	; 0x81
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fe33 	bl	8008122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c6:	2202      	movs	r2, #2
 80064c8:	2101      	movs	r1, #1
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fe29 	bl	8008122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80064d8:	e012      	b.n	8006500 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064da:	2340      	movs	r3, #64	; 0x40
 80064dc:	2202      	movs	r2, #2
 80064de:	2181      	movs	r1, #129	; 0x81
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fe1e 	bl	8008122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064ec:	2340      	movs	r3, #64	; 0x40
 80064ee:	2202      	movs	r2, #2
 80064f0:	2101      	movs	r1, #1
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 fe15 	bl	8008122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006500:	2308      	movs	r3, #8
 8006502:	2203      	movs	r2, #3
 8006504:	2182      	movs	r1, #130	; 0x82
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fe0b 	bl	8008122 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006512:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006516:	f001 ff2b 	bl	8008370 <USBD_static_malloc>
 800651a:	4602      	mov	r2, r0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
 8006530:	e026      	b.n	8006580 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	7c1b      	ldrb	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006566:	2101      	movs	r1, #1
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fecb 	bl	8008304 <USBD_LL_PrepareReceive>
 800656e:	e007      	b.n	8006580 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	2101      	movs	r1, #1
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f001 fec2 	bl	8008304 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800659a:	2181      	movs	r1, #129	; 0x81
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fde6 	bl	800816e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065a8:	2101      	movs	r1, #1
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fddf 	bl	800816e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80065b8:	2182      	movs	r1, #130	; 0x82
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fdd7 	bl	800816e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00e      	beq.n	80065ee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 fed1 	bl	8008388 <USBD_static_free>
    pdev->pClassData = NULL;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006608:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800661e:	2b00      	cmp	r3, #0
 8006620:	d039      	beq.n	8006696 <USBD_CDC_Setup+0x9e>
 8006622:	2b20      	cmp	r3, #32
 8006624:	d17c      	bne.n	8006720 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	88db      	ldrh	r3, [r3, #6]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d029      	beq.n	8006682 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	b25b      	sxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	da11      	bge.n	800665c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006644:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	88d2      	ldrh	r2, [r2, #6]
 800664a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800664c:	6939      	ldr	r1, [r7, #16]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	88db      	ldrh	r3, [r3, #6]
 8006652:	461a      	mov	r2, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 f9c9 	bl	80079ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800665a:	e068      	b.n	800672e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785a      	ldrb	r2, [r3, #1]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	88db      	ldrh	r3, [r3, #6]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006672:	6939      	ldr	r1, [r7, #16]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	88db      	ldrh	r3, [r3, #6]
 8006678:	461a      	mov	r2, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 f9e4 	bl	8007a48 <USBD_CtlPrepareRx>
      break;
 8006680:	e055      	b.n	800672e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	7850      	ldrb	r0, [r2, #1]
 800668e:	2200      	movs	r2, #0
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	4798      	blx	r3
      break;
 8006694:	e04b      	b.n	800672e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b0a      	cmp	r3, #10
 800669c:	d017      	beq.n	80066ce <USBD_CDC_Setup+0xd6>
 800669e:	2b0b      	cmp	r3, #11
 80066a0:	d029      	beq.n	80066f6 <USBD_CDC_Setup+0xfe>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d133      	bne.n	800670e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d107      	bne.n	80066c0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80066b0:	f107 030c 	add.w	r3, r7, #12
 80066b4:	2202      	movs	r2, #2
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 f997 	bl	80079ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066be:	e02e      	b.n	800671e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 f928 	bl	8007918 <USBD_CtlError>
            ret = USBD_FAIL;
 80066c8:	2302      	movs	r3, #2
 80066ca:	75fb      	strb	r3, [r7, #23]
          break;
 80066cc:	e027      	b.n	800671e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d107      	bne.n	80066e8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80066d8:	f107 030f 	add.w	r3, r7, #15
 80066dc:	2201      	movs	r2, #1
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 f983 	bl	80079ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066e6:	e01a      	b.n	800671e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 f914 	bl	8007918 <USBD_CtlError>
            ret = USBD_FAIL;
 80066f0:	2302      	movs	r3, #2
 80066f2:	75fb      	strb	r3, [r7, #23]
          break;
 80066f4:	e013      	b.n	800671e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d00d      	beq.n	800671c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 f908 	bl	8007918 <USBD_CtlError>
            ret = USBD_FAIL;
 8006708:	2302      	movs	r3, #2
 800670a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800670c:	e006      	b.n	800671c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 f901 	bl	8007918 <USBD_CtlError>
          ret = USBD_FAIL;
 8006716:	2302      	movs	r3, #2
 8006718:	75fb      	strb	r3, [r7, #23]
          break;
 800671a:	e000      	b.n	800671e <USBD_CDC_Setup+0x126>
          break;
 800671c:	bf00      	nop
      }
      break;
 800671e:	e006      	b.n	800672e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 f8f8 	bl	8007918 <USBD_CtlError>
      ret = USBD_FAIL;
 8006728:	2302      	movs	r3, #2
 800672a:	75fb      	strb	r3, [r7, #23]
      break;
 800672c:	bf00      	nop
  }

  return ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006752:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d03a      	beq.n	80067d4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800675e:	78fa      	ldrb	r2, [r7, #3]
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	331c      	adds	r3, #28
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d029      	beq.n	80067c8 <USBD_CDC_DataIn+0x90>
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	331c      	adds	r3, #28
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	78f9      	ldrb	r1, [r7, #3]
 8006788:	68b8      	ldr	r0, [r7, #8]
 800678a:	460b      	mov	r3, r1
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4403      	add	r3, r0
 8006794:	3338      	adds	r3, #56	; 0x38
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	fbb2 f1f3 	udiv	r1, r2, r3
 800679c:	fb03 f301 	mul.w	r3, r3, r1
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d110      	bne.n	80067c8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	331c      	adds	r3, #28
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067ba:	78f9      	ldrb	r1, [r7, #3]
 80067bc:	2300      	movs	r3, #0
 80067be:	2200      	movs	r2, #0
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fd7c 	bl	80082be <USBD_LL_Transmit>
 80067c6:	e003      	b.n	80067d0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80067d4:	2302      	movs	r3, #2
  }
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fda7 	bl	800834a <USBD_LL_GetRxDataSize>
 80067fc:	4602      	mov	r2, r0
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006822:	4611      	mov	r1, r2
 8006824:	4798      	blx	r3

    return USBD_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800682a:	2302      	movs	r3, #2
  }
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800684a:	2b00      	cmp	r3, #0
 800684c:	d015      	beq.n	800687a <USBD_CDC_EP0_RxReady+0x46>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006854:	2bff      	cmp	r3, #255	; 0xff
 8006856:	d010      	beq.n	800687a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006866:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800686e:	b292      	uxth	r2, r2
 8006870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2243      	movs	r2, #67	; 0x43
 8006890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006892:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	2000009c 	.word	0x2000009c

080068a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2243      	movs	r2, #67	; 0x43
 80068b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80068b2:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000058 	.word	0x20000058

080068c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2243      	movs	r2, #67	; 0x43
 80068d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80068d2:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	200000e0 	.word	0x200000e0

080068e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	220a      	movs	r2, #10
 80068f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000014 	.word	0x20000014

08006904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4613      	mov	r3, r2
 800693c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006944:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800694e:	88fa      	ldrh	r2, [r7, #6]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006972:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr

08006988 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006996:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d017      	beq.n	80069d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7c1b      	ldrb	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069b4:	2101      	movs	r1, #1
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fca4 	bl	8008304 <USBD_LL_PrepareReceive>
 80069bc:	e007      	b.n	80069ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	2101      	movs	r1, #1
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fc9b 	bl	8008304 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	e000      	b.n	80069d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80069d2:	2302      	movs	r3, #2
  }
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069f0:	2302      	movs	r3, #2
 80069f2:	e01a      	b.n	8006a2a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	79fa      	ldrb	r2, [r7, #7]
 8006a20:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f001 fb08 	bl	8008038 <USBD_LL_Init>

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
 8006a52:	e001      	b.n	8006a58 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a54:	2302      	movs	r3, #2
 8006a56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fb3d 	bl	80080ec <USBD_LL_Start>

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4798      	blx	r3

  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 feca 	bl	80078a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d00c      	beq.n	8006b4a <USBD_LL_SetupStage+0x56>
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d302      	bcc.n	8006b3a <USBD_LL_SetupStage+0x46>
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d010      	beq.n	8006b5a <USBD_LL_SetupStage+0x66>
 8006b38:	e017      	b.n	8006b6a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f9ca 	bl	8006edc <USBD_StdDevReq>
      break;
 8006b48:	e01a      	b.n	8006b80 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa2c 	bl	8006fb0 <USBD_StdItfReq>
      break;
 8006b58:	e012      	b.n	8006b80 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa6a 	bl	800703c <USBD_StdEPReq>
      break;
 8006b68:	e00a      	b.n	8006b80 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 fb17 	bl	80081ac <USBD_LL_StallEP>
      break;
 8006b7e:	bf00      	nop
  }

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	460b      	mov	r3, r1
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d14b      	bne.n	8006c36 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ba4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d134      	bne.n	8006c1a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d919      	bls.n	8006bf0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	1ad2      	subs	r2, r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d203      	bcs.n	8006bde <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	e002      	b.n	8006be4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 ff4b 	bl	8007a84 <USBD_CtlContinueRx>
 8006bee:	e038      	b.n	8006c62 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d105      	bne.n	8006c12 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 ff48 	bl	8007aa8 <USBD_CtlSendStatus>
 8006c18:	e023      	b.n	8006c62 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	d11e      	bne.n	8006c62 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 fabc 	bl	80081ac <USBD_LL_StallEP>
 8006c34:	e015      	b.n	8006c62 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d108      	bne.n	8006c5e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	7afa      	ldrb	r2, [r7, #11]
 8006c56:	4611      	mov	r1, r2
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	4798      	blx	r3
 8006c5c:	e001      	b.n	8006c62 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e000      	b.n	8006c64 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	460b      	mov	r3, r1
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d17f      	bne.n	8006d80 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3314      	adds	r3, #20
 8006c84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d15c      	bne.n	8006d4a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d915      	bls.n	8006cc8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 feb5 	bl	8007a24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f001 fb1f 	bl	8008304 <USBD_LL_PrepareReceive>
 8006cc6:	e04e      	b.n	8006d66 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	6912      	ldr	r2, [r2, #16]
 8006cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cd4:	fb02 f201 	mul.w	r2, r2, r1
 8006cd8:	1a9b      	subs	r3, r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d11c      	bne.n	8006d18 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d316      	bcc.n	8006d18 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d20f      	bcs.n	8006d18 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fe91 	bl	8007a24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f001 faf7 	bl	8008304 <USBD_LL_PrepareReceive>
 8006d16:	e026      	b.n	8006d66 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d105      	bne.n	8006d3a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d3a:	2180      	movs	r1, #128	; 0x80
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f001 fa35 	bl	80081ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fec3 	bl	8007ace <USBD_CtlReceiveStatus>
 8006d48:	e00d      	b.n	8006d66 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d004      	beq.n	8006d5e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d5e:	2180      	movs	r1, #128	; 0x80
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f001 fa23 	bl	80081ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d11d      	bne.n	8006dac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff fe83 	bl	8006a7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d7e:	e015      	b.n	8006dac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00d      	beq.n	8006da8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d108      	bne.n	8006da8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	7afa      	ldrb	r2, [r7, #11]
 8006da0:	4611      	mov	r1, r2
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	4798      	blx	r3
 8006da6:	e001      	b.n	8006dac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006da8:	2302      	movs	r3, #2
 8006daa:	e000      	b.n	8006dae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dbe:	2340      	movs	r3, #64	; 0x40
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 f9ac 	bl	8008122 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2240      	movs	r2, #64	; 0x40
 8006dd6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2180      	movs	r1, #128	; 0x80
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 f99e 	bl	8008122 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2240      	movs	r2, #64	; 0x40
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6852      	ldr	r2, [r2, #4]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	4611      	mov	r1, r2
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
  }

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr

08006e7e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d105      	bne.n	8006e9c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d10b      	bne.n	8006ed2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d004      	beq.n	8006f00 <USBD_StdDevReq+0x24>
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d002      	beq.n	8006f00 <USBD_StdDevReq+0x24>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d008      	beq.n	8006f10 <USBD_StdDevReq+0x34>
 8006efe:	e04c      	b.n	8006f9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
      break;
 8006f0e:	e049      	b.n	8006fa4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	d83a      	bhi.n	8006f8e <USBD_StdDevReq+0xb2>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <USBD_StdDevReq+0x44>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	08006f85 	.word	0x08006f85
 8006f28:	08006f8f 	.word	0x08006f8f
 8006f2c:	08006f7b 	.word	0x08006f7b
 8006f30:	08006f8f 	.word	0x08006f8f
 8006f34:	08006f53 	.word	0x08006f53
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f8f 	.word	0x08006f8f
 8006f40:	08006f67 	.word	0x08006f67
 8006f44:	08006f5d 	.word	0x08006f5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f9d4 	bl	80072f8 <USBD_GetDescriptor>
          break;
 8006f50:	e022      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb37 	bl	80075c8 <USBD_SetAddress>
          break;
 8006f5a:	e01d      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb74 	bl	800764c <USBD_SetConfig>
          break;
 8006f64:	e018      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fbfd 	bl	8007768 <USBD_GetConfig>
          break;
 8006f6e:	e013      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fc2c 	bl	80077d0 <USBD_GetStatus>
          break;
 8006f78:	e00e      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fc5a 	bl	8007836 <USBD_SetFeature>
          break;
 8006f82:	e009      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fc69 	bl	800785e <USBD_ClrFeature>
          break;
 8006f8c:	e004      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fcc1 	bl	8007918 <USBD_CtlError>
          break;
 8006f96:	bf00      	nop
      }
      break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fcbb 	bl	8007918 <USBD_CtlError>
      break;
 8006fa2:	bf00      	nop
  }

  return ret;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d003      	beq.n	8006fd2 <USBD_StdItfReq+0x22>
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	d001      	beq.n	8006fd2 <USBD_StdItfReq+0x22>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d12a      	bne.n	8007028 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d81d      	bhi.n	800701a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	889b      	ldrh	r3, [r3, #4]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d813      	bhi.n	8007010 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d110      	bne.n	8007024 <USBD_StdItfReq+0x74>
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10d      	bne.n	8007024 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fd4d 	bl	8007aa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800700e:	e009      	b.n	8007024 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fc80 	bl	8007918 <USBD_CtlError>
          break;
 8007018:	e004      	b.n	8007024 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc7b 	bl	8007918 <USBD_CtlError>
          break;
 8007022:	e000      	b.n	8007026 <USBD_StdItfReq+0x76>
          break;
 8007024:	bf00      	nop
      }
      break;
 8007026:	e004      	b.n	8007032 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc74 	bl	8007918 <USBD_CtlError>
      break;
 8007030:	bf00      	nop
  }

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	889b      	ldrh	r3, [r3, #4]
 800704e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007058:	2b20      	cmp	r3, #32
 800705a:	d004      	beq.n	8007066 <USBD_StdEPReq+0x2a>
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d002      	beq.n	8007066 <USBD_StdEPReq+0x2a>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <USBD_StdEPReq+0x3a>
 8007064:	e13d      	b.n	80072e2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
      break;
 8007074:	e13a      	b.n	80072ec <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800707e:	2b20      	cmp	r3, #32
 8007080:	d10a      	bne.n	8007098 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	e12a      	b.n	80072ee <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d03e      	beq.n	800711e <USBD_StdEPReq+0xe2>
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d002      	beq.n	80070aa <USBD_StdEPReq+0x6e>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d070      	beq.n	800718a <USBD_StdEPReq+0x14e>
 80070a8:	e115      	b.n	80072d6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d002      	beq.n	80070ba <USBD_StdEPReq+0x7e>
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d015      	beq.n	80070e4 <USBD_StdEPReq+0xa8>
 80070b8:	e02b      	b.n	8007112 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00c      	beq.n	80070da <USBD_StdEPReq+0x9e>
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b80      	cmp	r3, #128	; 0x80
 80070c4:	d009      	beq.n	80070da <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 f86e 	bl	80081ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070d0:	2180      	movs	r1, #128	; 0x80
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 f86a 	bl	80081ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070d8:	e020      	b.n	800711c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fc1b 	bl	8007918 <USBD_CtlError>
              break;
 80070e2:	e01b      	b.n	800711c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	885b      	ldrh	r3, [r3, #2]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10e      	bne.n	800710a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <USBD_StdEPReq+0xce>
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d008      	beq.n	800710a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	88db      	ldrh	r3, [r3, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f851 	bl	80081ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fccc 	bl	8007aa8 <USBD_CtlSendStatus>

              break;
 8007110:	e004      	b.n	800711c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fbff 	bl	8007918 <USBD_CtlError>
              break;
 800711a:	bf00      	nop
          }
          break;
 800711c:	e0e0      	b.n	80072e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	2b02      	cmp	r3, #2
 8007126:	d002      	beq.n	800712e <USBD_StdEPReq+0xf2>
 8007128:	2b03      	cmp	r3, #3
 800712a:	d015      	beq.n	8007158 <USBD_StdEPReq+0x11c>
 800712c:	e026      	b.n	800717c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <USBD_StdEPReq+0x112>
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b80      	cmp	r3, #128	; 0x80
 8007138:	d009      	beq.n	800714e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 f834 	bl	80081ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007144:	2180      	movs	r1, #128	; 0x80
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 f830 	bl	80081ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800714c:	e01c      	b.n	8007188 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fbe1 	bl	8007918 <USBD_CtlError>
              break;
 8007156:	e017      	b.n	8007188 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	885b      	ldrh	r3, [r3, #2]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d112      	bne.n	8007186 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 f83b 	bl	80081ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fc97 	bl	8007aa8 <USBD_CtlSendStatus>
              }
              break;
 800717a:	e004      	b.n	8007186 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fbca 	bl	8007918 <USBD_CtlError>
              break;
 8007184:	e000      	b.n	8007188 <USBD_StdEPReq+0x14c>
              break;
 8007186:	bf00      	nop
          }
          break;
 8007188:	e0aa      	b.n	80072e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007190:	2b02      	cmp	r3, #2
 8007192:	d002      	beq.n	800719a <USBD_StdEPReq+0x15e>
 8007194:	2b03      	cmp	r3, #3
 8007196:	d032      	beq.n	80071fe <USBD_StdEPReq+0x1c2>
 8007198:	e097      	b.n	80072ca <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <USBD_StdEPReq+0x174>
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b80      	cmp	r3, #128	; 0x80
 80071a4:	d004      	beq.n	80071b0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fbb5 	bl	8007918 <USBD_CtlError>
                break;
 80071ae:	e091      	b.n	80072d4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da0b      	bge.n	80071d0 <USBD_StdEPReq+0x194>
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	3310      	adds	r3, #16
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4413      	add	r3, r2
 80071cc:	3304      	adds	r3, #4
 80071ce:	e00b      	b.n	80071e8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4413      	add	r3, r2
 80071e6:	3304      	adds	r3, #4
 80071e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2202      	movs	r2, #2
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fbf8 	bl	80079ec <USBD_CtlSendData>
              break;
 80071fc:	e06a      	b.n	80072d4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007202:	2b00      	cmp	r3, #0
 8007204:	da11      	bge.n	800722a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	f003 020f 	and.w	r2, r3, #15
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	3318      	adds	r3, #24
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d117      	bne.n	8007250 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb78 	bl	8007918 <USBD_CtlError>
                  break;
 8007228:	e054      	b.n	80072d4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	f003 020f 	and.w	r2, r3, #15
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d104      	bne.n	8007250 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fb65 	bl	8007918 <USBD_CtlError>
                  break;
 800724e:	e041      	b.n	80072d4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007254:	2b00      	cmp	r3, #0
 8007256:	da0b      	bge.n	8007270 <USBD_StdEPReq+0x234>
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	3310      	adds	r3, #16
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	3304      	adds	r3, #4
 800726e:	e00b      	b.n	8007288 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4413      	add	r3, r2
 8007286:	3304      	adds	r3, #4
 8007288:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <USBD_StdEPReq+0x25a>
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b80      	cmp	r3, #128	; 0x80
 8007294:	d103      	bne.n	800729e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e00e      	b.n	80072bc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 ffc0 	bl	8008228 <USBD_LL_IsStallEP>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2201      	movs	r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	e002      	b.n	80072bc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2202      	movs	r2, #2
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fb92 	bl	80079ec <USBD_CtlSendData>
              break;
 80072c8:	e004      	b.n	80072d4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fb23 	bl	8007918 <USBD_CtlError>
              break;
 80072d2:	bf00      	nop
          }
          break;
 80072d4:	e004      	b.n	80072e0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fb1d 	bl	8007918 <USBD_CtlError>
          break;
 80072de:	bf00      	nop
      }
      break;
 80072e0:	e004      	b.n	80072ec <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fb17 	bl	8007918 <USBD_CtlError>
      break;
 80072ea:	bf00      	nop
  }

  return ret;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	2b06      	cmp	r3, #6
 800731a:	f200 8128 	bhi.w	800756e <USBD_GetDescriptor+0x276>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <USBD_GetDescriptor+0x2c>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007341 	.word	0x08007341
 8007328:	08007359 	.word	0x08007359
 800732c:	08007399 	.word	0x08007399
 8007330:	0800756f 	.word	0x0800756f
 8007334:	0800756f 	.word	0x0800756f
 8007338:	0800750f 	.word	0x0800750f
 800733c:	0800753b 	.word	0x0800753b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	7c12      	ldrb	r2, [r2, #16]
 800734c:	f107 0108 	add.w	r1, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
      break;
 8007356:	e112      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7c1b      	ldrb	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10d      	bne.n	800737c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	f107 0208 	add.w	r2, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	2202      	movs	r2, #2
 8007378:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800737a:	e100      	b.n	800757e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f107 0208 	add.w	r2, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	2202      	movs	r2, #2
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	e0f2      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b05      	cmp	r3, #5
 80073a0:	f200 80ac 	bhi.w	80074fc <USBD_GetDescriptor+0x204>
 80073a4:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <USBD_GetDescriptor+0xb4>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073c5 	.word	0x080073c5
 80073b0:	080073f9 	.word	0x080073f9
 80073b4:	0800742d 	.word	0x0800742d
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007495 	.word	0x08007495
 80073c0:	080074c9 	.word	0x080074c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e091      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa94 	bl	8007918 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e089      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e077      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa7a 	bl	8007918 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e06f      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e05d      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa60 	bl	8007918 <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e055      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e043      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa46 	bl	8007918 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e03b      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e029      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa2c 	bl	8007918 <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e021      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	7c12      	ldrb	r2, [r2, #16]
 80074e0:	f107 0108 	add.w	r1, r7, #8
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ea:	e00f      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa12 	bl	8007918 <USBD_CtlError>
            err++;
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	3301      	adds	r3, #1
 80074f8:	72fb      	strb	r3, [r7, #11]
          break;
 80074fa:	e007      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa0a 	bl	8007918 <USBD_CtlError>
          err++;
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	3301      	adds	r3, #1
 8007508:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800750a:	e038      	b.n	800757e <USBD_GetDescriptor+0x286>
 800750c:	e037      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7c1b      	ldrb	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	f107 0208 	add.w	r2, r7, #8
 8007522:	4610      	mov	r0, r2
 8007524:	4798      	blx	r3
 8007526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007528:	e029      	b.n	800757e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f9f3 	bl	8007918 <USBD_CtlError>
        err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	e021      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7c1b      	ldrb	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10d      	bne.n	800755e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	f107 0208 	add.w	r2, r7, #8
 800754e:	4610      	mov	r0, r2
 8007550:	4798      	blx	r3
 8007552:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	2207      	movs	r2, #7
 800755a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800755c:	e00f      	b.n	800757e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f9d9 	bl	8007918 <USBD_CtlError>
        err++;
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	3301      	adds	r3, #1
 800756a:	72fb      	strb	r3, [r7, #11]
      break;
 800756c:	e007      	b.n	800757e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f9d1 	bl	8007918 <USBD_CtlError>
      err++;
 8007576:	7afb      	ldrb	r3, [r7, #11]
 8007578:	3301      	adds	r3, #1
 800757a:	72fb      	strb	r3, [r7, #11]
      break;
 800757c:	bf00      	nop
  }

  if (err != 0U)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11c      	bne.n	80075be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007584:	893b      	ldrh	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d011      	beq.n	80075ae <USBD_GetDescriptor+0x2b6>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	88db      	ldrh	r3, [r3, #6]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00d      	beq.n	80075ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	88da      	ldrh	r2, [r3, #6]
 8007596:	893b      	ldrh	r3, [r7, #8]
 8007598:	4293      	cmp	r3, r2
 800759a:	bf28      	it	cs
 800759c:	4613      	movcs	r3, r2
 800759e:	b29b      	uxth	r3, r3
 80075a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075a2:	893b      	ldrh	r3, [r7, #8]
 80075a4:	461a      	mov	r2, r3
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa1f 	bl	80079ec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	88db      	ldrh	r3, [r3, #6]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa76 	bl	8007aa8 <USBD_CtlSendStatus>
 80075bc:	e000      	b.n	80075c0 <USBD_GetDescriptor+0x2c8>
    return;
 80075be:	bf00      	nop
    }
  }
}
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop

080075c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	889b      	ldrh	r3, [r3, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d130      	bne.n	800763c <USBD_SetAddress+0x74>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	88db      	ldrh	r3, [r3, #6]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d12c      	bne.n	800763c <USBD_SetAddress+0x74>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	885b      	ldrh	r3, [r3, #2]
 80075e6:	2b7f      	cmp	r3, #127	; 0x7f
 80075e8:	d828      	bhi.n	800763c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	885b      	ldrh	r3, [r3, #2]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d104      	bne.n	800760a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f988 	bl	8007918 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007608:	e01c      	b.n	8007644 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7bfa      	ldrb	r2, [r7, #15]
 800760e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fe32 	bl	8008280 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fa43 	bl	8007aa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007630:	e008      	b.n	8007644 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763a:	e003      	b.n	8007644 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f96a 	bl	8007918 <USBD_CtlError>
  }
}
 8007644:	bf00      	nop
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	885b      	ldrh	r3, [r3, #2]
 800765a:	b2da      	uxtb	r2, r3
 800765c:	4b41      	ldr	r3, [pc, #260]	; (8007764 <USBD_SetConfig+0x118>)
 800765e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007660:	4b40      	ldr	r3, [pc, #256]	; (8007764 <USBD_SetConfig+0x118>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d904      	bls.n	8007672 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f954 	bl	8007918 <USBD_CtlError>
 8007670:	e075      	b.n	800775e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007678:	2b02      	cmp	r3, #2
 800767a:	d002      	beq.n	8007682 <USBD_SetConfig+0x36>
 800767c:	2b03      	cmp	r3, #3
 800767e:	d023      	beq.n	80076c8 <USBD_SetConfig+0x7c>
 8007680:	e062      	b.n	8007748 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007682:	4b38      	ldr	r3, [pc, #224]	; (8007764 <USBD_SetConfig+0x118>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01a      	beq.n	80076c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800768a:	4b36      	ldr	r3, [pc, #216]	; (8007764 <USBD_SetConfig+0x118>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2203      	movs	r2, #3
 8007698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800769c:	4b31      	ldr	r3, [pc, #196]	; (8007764 <USBD_SetConfig+0x118>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff f9f4 	bl	8006a90 <USBD_SetClassConfig>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d104      	bne.n	80076b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f931 	bl	8007918 <USBD_CtlError>
            return;
 80076b6:	e052      	b.n	800775e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9f5 	bl	8007aa8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076be:	e04e      	b.n	800775e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9f1 	bl	8007aa8 <USBD_CtlSendStatus>
        break;
 80076c6:	e04a      	b.n	800775e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80076c8:	4b26      	ldr	r3, [pc, #152]	; (8007764 <USBD_SetConfig+0x118>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d112      	bne.n	80076f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80076d8:	4b22      	ldr	r3, [pc, #136]	; (8007764 <USBD_SetConfig+0x118>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076e2:	4b20      	ldr	r3, [pc, #128]	; (8007764 <USBD_SetConfig+0x118>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7ff f9f0 	bl	8006ace <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9da 	bl	8007aa8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076f4:	e033      	b.n	800775e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80076f6:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <USBD_SetConfig+0x118>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d01d      	beq.n	8007740 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff f9de 	bl	8006ace <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <USBD_SetConfig+0x118>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800771c:	4b11      	ldr	r3, [pc, #68]	; (8007764 <USBD_SetConfig+0x118>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff f9b4 	bl	8006a90 <USBD_SetClassConfig>
 8007728:	4603      	mov	r3, r0
 800772a:	2b02      	cmp	r3, #2
 800772c:	d104      	bne.n	8007738 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f8f1 	bl	8007918 <USBD_CtlError>
            return;
 8007736:	e012      	b.n	800775e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f9b5 	bl	8007aa8 <USBD_CtlSendStatus>
        break;
 800773e:	e00e      	b.n	800775e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9b1 	bl	8007aa8 <USBD_CtlSendStatus>
        break;
 8007746:	e00a      	b.n	800775e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8e4 	bl	8007918 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007750:	4b04      	ldr	r3, [pc, #16]	; (8007764 <USBD_SetConfig+0x118>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7ff f9b9 	bl	8006ace <USBD_ClrClassConfig>
        break;
 800775c:	bf00      	nop
    }
  }
}
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	2000021c 	.word	0x2000021c

08007768 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88db      	ldrh	r3, [r3, #6]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d004      	beq.n	8007784 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f8cb 	bl	8007918 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007782:	e021      	b.n	80077c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778a:	2b01      	cmp	r3, #1
 800778c:	db17      	blt.n	80077be <USBD_GetConfig+0x56>
 800778e:	2b02      	cmp	r3, #2
 8007790:	dd02      	ble.n	8007798 <USBD_GetConfig+0x30>
 8007792:	2b03      	cmp	r3, #3
 8007794:	d00b      	beq.n	80077ae <USBD_GetConfig+0x46>
 8007796:	e012      	b.n	80077be <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3308      	adds	r3, #8
 80077a2:	2201      	movs	r2, #1
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f920 	bl	80079ec <USBD_CtlSendData>
        break;
 80077ac:	e00c      	b.n	80077c8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3304      	adds	r3, #4
 80077b2:	2201      	movs	r2, #1
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f918 	bl	80079ec <USBD_CtlSendData>
        break;
 80077bc:	e004      	b.n	80077c8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f8a9 	bl	8007918 <USBD_CtlError>
        break;
 80077c6:	bf00      	nop
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	3b01      	subs	r3, #1
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d81e      	bhi.n	8007824 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	88db      	ldrh	r3, [r3, #6]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d004      	beq.n	80077f8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f891 	bl	8007918 <USBD_CtlError>
        break;
 80077f6:	e01a      	b.n	800782e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f043 0202 	orr.w	r2, r3, #2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	330c      	adds	r3, #12
 8007818:	2202      	movs	r2, #2
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f8e5 	bl	80079ec <USBD_CtlSendData>
      break;
 8007822:	e004      	b.n	800782e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f876 	bl	8007918 <USBD_CtlError>
      break;
 800782c:	bf00      	nop
  }
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	885b      	ldrh	r3, [r3, #2]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d106      	bne.n	8007856 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f929 	bl	8007aa8 <USBD_CtlSendStatus>
  }
}
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786e:	3b01      	subs	r3, #1
 8007870:	2b02      	cmp	r3, #2
 8007872:	d80b      	bhi.n	800788c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	885b      	ldrh	r3, [r3, #2]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d10c      	bne.n	8007896 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f90f 	bl	8007aa8 <USBD_CtlSendStatus>
      }
      break;
 800788a:	e004      	b.n	8007896 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f842 	bl	8007918 <USBD_CtlError>
      break;
 8007894:	e000      	b.n	8007898 <USBD_ClrFeature+0x3a>
      break;
 8007896:	bf00      	nop
  }
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	785a      	ldrb	r2, [r3, #1]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	3302      	adds	r3, #2
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	3303      	adds	r3, #3
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	3304      	adds	r3, #4
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	b29a      	uxth	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	3305      	adds	r3, #5
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3306      	adds	r3, #6
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	3307      	adds	r3, #7
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	b29b      	uxth	r3, r3
 8007906:	4413      	add	r3, r2
 8007908:	b29a      	uxth	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	80da      	strh	r2, [r3, #6]

}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr

08007918 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc41 	bl	80081ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800792a:	2100      	movs	r1, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc3d 	bl	80081ac <USBD_LL_StallEP>
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d032      	beq.n	80079b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f834 	bl	80079be <USBD_GetLen>
 8007956:	4603      	mov	r3, r0
 8007958:	3301      	adds	r3, #1
 800795a:	b29b      	uxth	r3, r3
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	75fa      	strb	r2, [r7, #23]
 800796a:	461a      	mov	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4413      	add	r3, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	75fa      	strb	r2, [r7, #23]
 800797c:	461a      	mov	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4413      	add	r3, r2
 8007982:	2203      	movs	r2, #3
 8007984:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007986:	e012      	b.n	80079ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	60fa      	str	r2, [r7, #12]
 800798e:	7dfa      	ldrb	r2, [r7, #23]
 8007990:	1c51      	adds	r1, r2, #1
 8007992:	75f9      	strb	r1, [r7, #23]
 8007994:	4611      	mov	r1, r2
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	440a      	add	r2, r1
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	75fa      	strb	r2, [r7, #23]
 80079a4:	461a      	mov	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4413      	add	r3, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e8      	bne.n	8007988 <USBD_GetString+0x4e>
    }
  }
}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80079ca:	e005      	b.n	80079d8 <USBD_GetLen+0x1a>
  {
    len++;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	3301      	adds	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3301      	adds	r3, #1
 80079d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f5      	bne.n	80079cc <USBD_GetLen+0xe>
  }

  return len;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr

080079ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a02:	88fa      	ldrh	r2, [r7, #6]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a08:	88fa      	ldrh	r2, [r7, #6]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	2100      	movs	r1, #0
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fc52 	bl	80082be <USBD_LL_Transmit>

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	2100      	movs	r1, #0
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fc40 	bl	80082be <USBD_LL_Transmit>

  return USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2203      	movs	r2, #3
 8007a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a5e:	88fa      	ldrh	r2, [r7, #6]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007a66:	88fa      	ldrh	r2, [r7, #6]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a6e:	88fb      	ldrh	r3, [r7, #6]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	2100      	movs	r1, #0
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fc45 	bl	8008304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	2100      	movs	r1, #0
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fc33 	bl	8008304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2200      	movs	r2, #0
 8007abc:	2100      	movs	r1, #0
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fbfd 	bl	80082be <USBD_LL_Transmit>

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fc0d 	bl	8008304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007af8:	2200      	movs	r2, #0
 8007afa:	4912      	ldr	r1, [pc, #72]	; (8007b44 <MX_USB_DEVICE_Init+0x50>)
 8007afc:	4812      	ldr	r0, [pc, #72]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007afe:	f7fe ff6d 	bl	80069dc <USBD_Init>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b08:	f7f8 fec0 	bl	800088c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b0c:	490f      	ldr	r1, [pc, #60]	; (8007b4c <MX_USB_DEVICE_Init+0x58>)
 8007b0e:	480e      	ldr	r0, [pc, #56]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007b10:	f7fe ff8f 	bl	8006a32 <USBD_RegisterClass>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b1a:	f7f8 feb7 	bl	800088c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b1e:	490c      	ldr	r1, [pc, #48]	; (8007b50 <MX_USB_DEVICE_Init+0x5c>)
 8007b20:	4809      	ldr	r0, [pc, #36]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007b22:	f7fe feef 	bl	8006904 <USBD_CDC_RegisterInterface>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b2c:	f7f8 feae 	bl	800088c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b30:	4805      	ldr	r0, [pc, #20]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007b32:	f7fe ff97 	bl	8006a64 <USBD_Start>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b3c:	f7f8 fea6 	bl	800088c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b40:	bf00      	nop
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000134 	.word	0x20000134
 8007b48:	20000d00 	.word	0x20000d00
 8007b4c:	20000020 	.word	0x20000020
 8007b50:	20000124 	.word	0x20000124

08007b54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4905      	ldr	r1, [pc, #20]	; (8007b70 <CDC_Init_FS+0x1c>)
 8007b5c:	4805      	ldr	r0, [pc, #20]	; (8007b74 <CDC_Init_FS+0x20>)
 8007b5e:	f7fe fee7 	bl	8006930 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b62:	4905      	ldr	r1, [pc, #20]	; (8007b78 <CDC_Init_FS+0x24>)
 8007b64:	4803      	ldr	r0, [pc, #12]	; (8007b74 <CDC_Init_FS+0x20>)
 8007b66:	f7fe fefc 	bl	8006962 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200014b4 	.word	0x200014b4
 8007b74:	20000d00 	.word	0x20000d00
 8007b78:	200010cc 	.word	0x200010cc

08007b7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr
	...

08007b8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	2b23      	cmp	r3, #35	; 0x23
 8007ba0:	d84a      	bhi.n	8007c38 <CDC_Control_FS+0xac>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <CDC_Control_FS+0x1c>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007c39 	.word	0x08007c39
 8007bac:	08007c39 	.word	0x08007c39
 8007bb0:	08007c39 	.word	0x08007c39
 8007bb4:	08007c39 	.word	0x08007c39
 8007bb8:	08007c39 	.word	0x08007c39
 8007bbc:	08007c39 	.word	0x08007c39
 8007bc0:	08007c39 	.word	0x08007c39
 8007bc4:	08007c39 	.word	0x08007c39
 8007bc8:	08007c39 	.word	0x08007c39
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007c39 	.word	0x08007c39
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c39 	.word	0x08007c39
 8007bdc:	08007c39 	.word	0x08007c39
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007c39 	.word	0x08007c39
 8007bec:	08007c39 	.word	0x08007c39
 8007bf0:	08007c39 	.word	0x08007c39
 8007bf4:	08007c39 	.word	0x08007c39
 8007bf8:	08007c39 	.word	0x08007c39
 8007bfc:	08007c39 	.word	0x08007c39
 8007c00:	08007c39 	.word	0x08007c39
 8007c04:	08007c39 	.word	0x08007c39
 8007c08:	08007c39 	.word	0x08007c39
 8007c0c:	08007c39 	.word	0x08007c39
 8007c10:	08007c39 	.word	0x08007c39
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c39 	.word	0x08007c39
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c39 	.word	0x08007c39
 8007c30:	08007c39 	.word	0x08007c39
 8007c34:	08007c39 	.word	0x08007c39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c38:	bf00      	nop
  }

  return (USBD_OK);
 8007c3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
//  return (USBD_OK);
	flag2=1;
 8007c52:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <CDC_Receive_FS+0x40>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
	memcpy(my_RxBuf,Buf,*Len);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	480a      	ldr	r0, [pc, #40]	; (8007c8c <CDC_Receive_FS+0x44>)
 8007c62:	f000 fbfb 	bl	800845c <memcpy>
      my_RxLength=*Len;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <CDC_Receive_FS+0x48>)
 8007c6c:	6013      	str	r3, [r2, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4808      	ldr	r0, [pc, #32]	; (8007c94 <CDC_Receive_FS+0x4c>)
 8007c72:	f7fe fe76 	bl	8006962 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c76:	4807      	ldr	r0, [pc, #28]	; (8007c94 <CDC_Receive_FS+0x4c>)
 8007c78:	f7fe fe86 	bl	8006988 <USBD_CDC_ReceivePacket>
	return 1;
 8007c7c:	2301      	movs	r3, #1
  /* USER CODE END 6 */
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000fc4 	.word	0x20000fc4
 8007c8c:	20000fcc 	.word	0x20000fcc
 8007c90:	20000fc8 	.word	0x20000fc8
 8007c94:	20000d00 	.word	0x20000d00

08007c98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2212      	movs	r2, #18
 8007ca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007caa:	4b03      	ldr	r3, [pc, #12]	; (8007cb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000150 	.word	0x20000150

08007cbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2204      	movs	r2, #4
 8007ccc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cce:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000164 	.word	0x20000164

08007ce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	6039      	str	r1, [r7, #0]
 8007cea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	4907      	ldr	r1, [pc, #28]	; (8007d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007cf6:	4808      	ldr	r0, [pc, #32]	; (8007d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cf8:	f7ff fe1f 	bl	800793a <USBD_GetString>
 8007cfc:	e004      	b.n	8007d08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	4904      	ldr	r1, [pc, #16]	; (8007d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d02:	4805      	ldr	r0, [pc, #20]	; (8007d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d04:	f7ff fe19 	bl	800793a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d08:	4b02      	ldr	r3, [pc, #8]	; (8007d14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	2000189c 	.word	0x2000189c
 8007d18:	080092a4 	.word	0x080092a4

08007d1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	4904      	ldr	r1, [pc, #16]	; (8007d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d2c:	4804      	ldr	r0, [pc, #16]	; (8007d40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d2e:	f7ff fe04 	bl	800793a <USBD_GetString>
  return USBD_StrDesc;
 8007d32:	4b02      	ldr	r3, [pc, #8]	; (8007d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	2000189c 	.word	0x2000189c
 8007d40:	080092bc 	.word	0x080092bc

08007d44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	221a      	movs	r2, #26
 8007d54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d56:	f000 f843 	bl	8007de0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d5a:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000168 	.word	0x20000168

08007d68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	6039      	str	r1, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	4907      	ldr	r1, [pc, #28]	; (8007d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d7e:	4808      	ldr	r0, [pc, #32]	; (8007da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d80:	f7ff fddb 	bl	800793a <USBD_GetString>
 8007d84:	e004      	b.n	8007d90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	4904      	ldr	r1, [pc, #16]	; (8007d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d8a:	4805      	ldr	r0, [pc, #20]	; (8007da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d8c:	f7ff fdd5 	bl	800793a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d90:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	2000189c 	.word	0x2000189c
 8007da0:	080092d0 	.word	0x080092d0

08007da4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d105      	bne.n	8007dc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	4907      	ldr	r1, [pc, #28]	; (8007dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dba:	4808      	ldr	r0, [pc, #32]	; (8007ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dbc:	f7ff fdbd 	bl	800793a <USBD_GetString>
 8007dc0:	e004      	b.n	8007dcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	4904      	ldr	r1, [pc, #16]	; (8007dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dc6:	4805      	ldr	r0, [pc, #20]	; (8007ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dc8:	f7ff fdb7 	bl	800793a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dcc:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	2000189c 	.word	0x2000189c
 8007ddc:	080092dc 	.word	0x080092dc

08007de0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <Get_SerialNum+0x44>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007dec:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <Get_SerialNum+0x48>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007df2:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <Get_SerialNum+0x4c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e06:	2208      	movs	r2, #8
 8007e08:	4909      	ldr	r1, [pc, #36]	; (8007e30 <Get_SerialNum+0x50>)
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 f814 	bl	8007e38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e10:	2204      	movs	r2, #4
 8007e12:	4908      	ldr	r1, [pc, #32]	; (8007e34 <Get_SerialNum+0x54>)
 8007e14:	68b8      	ldr	r0, [r7, #8]
 8007e16:	f000 f80f 	bl	8007e38 <IntToUnicode>
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	1ffff7e8 	.word	0x1ffff7e8
 8007e28:	1ffff7ec 	.word	0x1ffff7ec
 8007e2c:	1ffff7f0 	.word	0x1ffff7f0
 8007e30:	2000016a 	.word	0x2000016a
 8007e34:	2000017a 	.word	0x2000017a

08007e38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	75fb      	strb	r3, [r7, #23]
 8007e4e:	e027      	b.n	8007ea0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	0f1b      	lsrs	r3, r3, #28
 8007e54:	2b09      	cmp	r3, #9
 8007e56:	d80b      	bhi.n	8007e70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	0f1b      	lsrs	r3, r3, #28
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	4619      	mov	r1, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	440b      	add	r3, r1
 8007e68:	3230      	adds	r2, #48	; 0x30
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	e00a      	b.n	8007e86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	0f1b      	lsrs	r3, r3, #28
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	440b      	add	r3, r1
 8007e80:	3237      	adds	r2, #55	; 0x37
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	3301      	adds	r3, #1
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	4413      	add	r3, r2
 8007e96:	2200      	movs	r2, #0
 8007e98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]
 8007ea0:	7dfa      	ldrb	r2, [r7, #23]
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d3d3      	bcc.n	8007e50 <IntToUnicode+0x18>
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	371c      	adds	r7, #28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
	...

08007eb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <HAL_PCD_MspInit+0x44>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d113      	bne.n	8007eee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <HAL_PCD_MspInit+0x48>)
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <HAL_PCD_MspInit+0x48>)
 8007ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ed0:	61d3      	str	r3, [r2, #28]
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <HAL_PCD_MspInit+0x48>)
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	2014      	movs	r0, #20
 8007ee4:	f7f9 f80d 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ee8:	2014      	movs	r0, #20
 8007eea:	f7f9 f826 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007eee:	bf00      	nop
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40005c00 	.word	0x40005c00
 8007efc:	40021000 	.word	0x40021000

08007f00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f7fe fdec 	bl	8006af4 <USBD_LL_SetupStage>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	440b      	add	r3, r1
 8007f44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	f7fe fe1c 	bl	8006b8a <USBD_LL_DataOutStage>
}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	440b      	add	r3, r1
 8007f7a:	333c      	adds	r3, #60	; 0x3c
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	4619      	mov	r1, r3
 8007f82:	f7fe fe73 	bl	8006c6c <USBD_LL_DataInStage>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe ff83 	bl	8006ea8 <USBD_LL_SOF>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d001      	beq.n	8007fc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007fbe:	f7f8 fc65 	bl	800088c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fc8:	7bfa      	ldrb	r2, [r7, #15]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe ff33 	bl	8006e38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe feec 	bl	8006db6 <USBD_LL_Reset>
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe ff2d 	bl	8006e56 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <HAL_PCD_SuspendCallback+0x30>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	4a03      	ldr	r2, [pc, #12]	; (8008018 <HAL_PCD_SuspendCallback+0x30>)
 800800a:	f043 0306 	orr.w	r3, r3, #6
 800800e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	e000ed00 	.word	0xe000ed00

0800801c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe ff27 	bl	8006e7e <USBD_LL_Resume>
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008040:	4a28      	ldr	r2, [pc, #160]	; (80080e4 <USBD_LL_Init+0xac>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a26      	ldr	r2, [pc, #152]	; (80080e4 <USBD_LL_Init+0xac>)
 800804c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008050:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <USBD_LL_Init+0xac>)
 8008052:	4a25      	ldr	r2, [pc, #148]	; (80080e8 <USBD_LL_Init+0xb0>)
 8008054:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008056:	4b23      	ldr	r3, [pc, #140]	; (80080e4 <USBD_LL_Init+0xac>)
 8008058:	2208      	movs	r2, #8
 800805a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800805c:	4b21      	ldr	r3, [pc, #132]	; (80080e4 <USBD_LL_Init+0xac>)
 800805e:	2202      	movs	r2, #2
 8008060:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008062:	4b20      	ldr	r3, [pc, #128]	; (80080e4 <USBD_LL_Init+0xac>)
 8008064:	2200      	movs	r2, #0
 8008066:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008068:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <USBD_LL_Init+0xac>)
 800806a:	2200      	movs	r2, #0
 800806c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800806e:	4b1d      	ldr	r3, [pc, #116]	; (80080e4 <USBD_LL_Init+0xac>)
 8008070:	2200      	movs	r2, #0
 8008072:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008074:	481b      	ldr	r0, [pc, #108]	; (80080e4 <USBD_LL_Init+0xac>)
 8008076:	f7f9 fafd 	bl	8001674 <HAL_PCD_Init>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008080:	f7f8 fc04 	bl	800088c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800808a:	2318      	movs	r3, #24
 800808c:	2200      	movs	r2, #0
 800808e:	2100      	movs	r1, #0
 8008090:	f7fa fe31 	bl	8002cf6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800809a:	2358      	movs	r3, #88	; 0x58
 800809c:	2200      	movs	r2, #0
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	f7fa fe29 	bl	8002cf6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080aa:	23c0      	movs	r3, #192	; 0xc0
 80080ac:	2200      	movs	r2, #0
 80080ae:	2181      	movs	r1, #129	; 0x81
 80080b0:	f7fa fe21 	bl	8002cf6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80080be:	2200      	movs	r2, #0
 80080c0:	2101      	movs	r1, #1
 80080c2:	f7fa fe18 	bl	8002cf6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080d0:	2200      	movs	r2, #0
 80080d2:	2182      	movs	r1, #130	; 0x82
 80080d4:	f7fa fe0f 	bl	8002cf6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20001a9c 	.word	0x20001a9c
 80080e8:	40005c00 	.word	0x40005c00

080080ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008102:	4618      	mov	r0, r3
 8008104:	f7f9 fbc1 	bl	800188a <HAL_PCD_Start>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f94e 	bl	80083b0 <USBD_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008118:	7bbb      	ldrb	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	4608      	mov	r0, r1
 800812c:	4611      	mov	r1, r2
 800812e:	461a      	mov	r2, r3
 8008130:	4603      	mov	r3, r0
 8008132:	70fb      	strb	r3, [r7, #3]
 8008134:	460b      	mov	r3, r1
 8008136:	70bb      	strb	r3, [r7, #2]
 8008138:	4613      	mov	r3, r2
 800813a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800814a:	78bb      	ldrb	r3, [r7, #2]
 800814c:	883a      	ldrh	r2, [r7, #0]
 800814e:	78f9      	ldrb	r1, [r7, #3]
 8008150:	f7f9 fd3b 	bl	8001bca <HAL_PCD_EP_Open>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f928 	bl	80083b0 <USBD_Get_USB_Status>
 8008160:	4603      	mov	r3, r0
 8008162:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008164:	7bbb      	ldrb	r3, [r7, #14]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008188:	78fa      	ldrb	r2, [r7, #3]
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f7f9 fd82 	bl	8001c96 <HAL_PCD_EP_Close>
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 f909 	bl	80083b0 <USBD_Get_USB_Status>
 800819e:	4603      	mov	r3, r0
 80081a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7f9 fe42 	bl	8001e54 <HAL_PCD_EP_SetStall>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f8ea 	bl	80083b0 <USBD_Get_USB_Status>
 80081dc:	4603      	mov	r3, r0
 80081de:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008204:	78fa      	ldrb	r2, [r7, #3]
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f7f9 fe83 	bl	8001f14 <HAL_PCD_EP_ClrStall>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f8cb 	bl	80083b0 <USBD_Get_USB_Status>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800821e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800823a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800823c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da0c      	bge.n	800825e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	440b      	add	r3, r1
 8008258:	3302      	adds	r3, #2
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	e00b      	b.n	8008276 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008264:	68f9      	ldr	r1, [r7, #12]
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	440b      	add	r3, r1
 8008270:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008274:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr

08008280 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f7f9 fc6e 	bl	8001b80 <HAL_PCD_SetAddress>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f880 	bl	80083b0 <USBD_Get_USB_Status>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b086      	sub	sp, #24
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	461a      	mov	r2, r3
 80082ca:	460b      	mov	r3, r1
 80082cc:	72fb      	strb	r3, [r7, #11]
 80082ce:	4613      	mov	r3, r2
 80082d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082e0:	893b      	ldrh	r3, [r7, #8]
 80082e2:	7af9      	ldrb	r1, [r7, #11]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	f7f9 fd72 	bl	8001dce <HAL_PCD_EP_Transmit>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f85d 	bl	80083b0 <USBD_Get_USB_Status>
 80082f6:	4603      	mov	r3, r0
 80082f8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80082fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	607a      	str	r2, [r7, #4]
 800830e:	461a      	mov	r2, r3
 8008310:	460b      	mov	r3, r1
 8008312:	72fb      	strb	r3, [r7, #11]
 8008314:	4613      	mov	r3, r2
 8008316:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008326:	893b      	ldrh	r3, [r7, #8]
 8008328:	7af9      	ldrb	r1, [r7, #11]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	f7f9 fcfb 	bl	8001d26 <HAL_PCD_EP_Receive>
 8008330:	4603      	mov	r3, r0
 8008332:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 f83a 	bl	80083b0 <USBD_Get_USB_Status>
 800833c:	4603      	mov	r3, r0
 800833e:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008340:	7dbb      	ldrb	r3, [r7, #22]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f7f9 fd1d 	bl	8001da0 <HAL_PCD_EP_GetRxCount>
 8008366:	4603      	mov	r3, r0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <USBD_static_malloc+0x14>)
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	bc80      	pop	{r7}
 8008382:	4770      	bx	lr
 8008384:	20000220 	.word	0x20000220

08008388 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]

}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr

0800839a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d817      	bhi.n	80083f4 <USBD_Get_USB_Status+0x44>
 80083c4:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <USBD_Get_USB_Status+0x1c>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083e3 	.word	0x080083e3
 80083d4:	080083e9 	.word	0x080083e9
 80083d8:	080083ef 	.word	0x080083ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
    break;
 80083e0:	e00b      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083e2:	2302      	movs	r3, #2
 80083e4:	73fb      	strb	r3, [r7, #15]
    break;
 80083e6:	e008      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
    break;
 80083ec:	e005      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ee:	2302      	movs	r3, #2
 80083f0:	73fb      	strb	r3, [r7, #15]
    break;
 80083f2:	e002      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083f4:	2302      	movs	r3, #2
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	bf00      	nop
  }
  return usb_status;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop

08008408 <__errno>:
 8008408:	4b01      	ldr	r3, [pc, #4]	; (8008410 <__errno+0x8>)
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20000184 	.word	0x20000184

08008414 <__libc_init_array>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	2500      	movs	r5, #0
 8008418:	4e0c      	ldr	r6, [pc, #48]	; (800844c <__libc_init_array+0x38>)
 800841a:	4c0d      	ldr	r4, [pc, #52]	; (8008450 <__libc_init_array+0x3c>)
 800841c:	1ba4      	subs	r4, r4, r6
 800841e:	10a4      	asrs	r4, r4, #2
 8008420:	42a5      	cmp	r5, r4
 8008422:	d109      	bne.n	8008438 <__libc_init_array+0x24>
 8008424:	f000 ff1c 	bl	8009260 <_init>
 8008428:	2500      	movs	r5, #0
 800842a:	4e0a      	ldr	r6, [pc, #40]	; (8008454 <__libc_init_array+0x40>)
 800842c:	4c0a      	ldr	r4, [pc, #40]	; (8008458 <__libc_init_array+0x44>)
 800842e:	1ba4      	subs	r4, r4, r6
 8008430:	10a4      	asrs	r4, r4, #2
 8008432:	42a5      	cmp	r5, r4
 8008434:	d105      	bne.n	8008442 <__libc_init_array+0x2e>
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800843c:	4798      	blx	r3
 800843e:	3501      	adds	r5, #1
 8008440:	e7ee      	b.n	8008420 <__libc_init_array+0xc>
 8008442:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008446:	4798      	blx	r3
 8008448:	3501      	adds	r5, #1
 800844a:	e7f2      	b.n	8008432 <__libc_init_array+0x1e>
 800844c:	0800939c 	.word	0x0800939c
 8008450:	0800939c 	.word	0x0800939c
 8008454:	0800939c 	.word	0x0800939c
 8008458:	080093a0 	.word	0x080093a0

0800845c <memcpy>:
 800845c:	b510      	push	{r4, lr}
 800845e:	1e43      	subs	r3, r0, #1
 8008460:	440a      	add	r2, r1
 8008462:	4291      	cmp	r1, r2
 8008464:	d100      	bne.n	8008468 <memcpy+0xc>
 8008466:	bd10      	pop	{r4, pc}
 8008468:	f811 4b01 	ldrb.w	r4, [r1], #1
 800846c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008470:	e7f7      	b.n	8008462 <memcpy+0x6>

08008472 <memset>:
 8008472:	4603      	mov	r3, r0
 8008474:	4402      	add	r2, r0
 8008476:	4293      	cmp	r3, r2
 8008478:	d100      	bne.n	800847c <memset+0xa>
 800847a:	4770      	bx	lr
 800847c:	f803 1b01 	strb.w	r1, [r3], #1
 8008480:	e7f9      	b.n	8008476 <memset+0x4>
	...

08008484 <iprintf>:
 8008484:	b40f      	push	{r0, r1, r2, r3}
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <iprintf+0x2c>)
 8008488:	b513      	push	{r0, r1, r4, lr}
 800848a:	681c      	ldr	r4, [r3, #0]
 800848c:	b124      	cbz	r4, 8008498 <iprintf+0x14>
 800848e:	69a3      	ldr	r3, [r4, #24]
 8008490:	b913      	cbnz	r3, 8008498 <iprintf+0x14>
 8008492:	4620      	mov	r0, r4
 8008494:	f000 f84e 	bl	8008534 <__sinit>
 8008498:	ab05      	add	r3, sp, #20
 800849a:	9a04      	ldr	r2, [sp, #16]
 800849c:	68a1      	ldr	r1, [r4, #8]
 800849e:	4620      	mov	r0, r4
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	f000 f953 	bl	800874c <_vfiprintf_r>
 80084a6:	b002      	add	sp, #8
 80084a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ac:	b004      	add	sp, #16
 80084ae:	4770      	bx	lr
 80084b0:	20000184 	.word	0x20000184

080084b4 <std>:
 80084b4:	2300      	movs	r3, #0
 80084b6:	b510      	push	{r4, lr}
 80084b8:	4604      	mov	r4, r0
 80084ba:	e9c0 3300 	strd	r3, r3, [r0]
 80084be:	6083      	str	r3, [r0, #8]
 80084c0:	8181      	strh	r1, [r0, #12]
 80084c2:	6643      	str	r3, [r0, #100]	; 0x64
 80084c4:	81c2      	strh	r2, [r0, #14]
 80084c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ca:	6183      	str	r3, [r0, #24]
 80084cc:	4619      	mov	r1, r3
 80084ce:	2208      	movs	r2, #8
 80084d0:	305c      	adds	r0, #92	; 0x5c
 80084d2:	f7ff ffce 	bl	8008472 <memset>
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <std+0x38>)
 80084d8:	6224      	str	r4, [r4, #32]
 80084da:	6263      	str	r3, [r4, #36]	; 0x24
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <std+0x3c>)
 80084de:	62a3      	str	r3, [r4, #40]	; 0x28
 80084e0:	4b04      	ldr	r3, [pc, #16]	; (80084f4 <std+0x40>)
 80084e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <std+0x44>)
 80084e6:	6323      	str	r3, [r4, #48]	; 0x30
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	08008ca9 	.word	0x08008ca9
 80084f0:	08008ccb 	.word	0x08008ccb
 80084f4:	08008d03 	.word	0x08008d03
 80084f8:	08008d27 	.word	0x08008d27

080084fc <_cleanup_r>:
 80084fc:	4901      	ldr	r1, [pc, #4]	; (8008504 <_cleanup_r+0x8>)
 80084fe:	f000 b885 	b.w	800860c <_fwalk_reent>
 8008502:	bf00      	nop
 8008504:	08009001 	.word	0x08009001

08008508 <__sfmoreglue>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	2568      	movs	r5, #104	; 0x68
 800850c:	1e4a      	subs	r2, r1, #1
 800850e:	4355      	muls	r5, r2
 8008510:	460e      	mov	r6, r1
 8008512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008516:	f000 f897 	bl	8008648 <_malloc_r>
 800851a:	4604      	mov	r4, r0
 800851c:	b140      	cbz	r0, 8008530 <__sfmoreglue+0x28>
 800851e:	2100      	movs	r1, #0
 8008520:	e9c0 1600 	strd	r1, r6, [r0]
 8008524:	300c      	adds	r0, #12
 8008526:	60a0      	str	r0, [r4, #8]
 8008528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800852c:	f7ff ffa1 	bl	8008472 <memset>
 8008530:	4620      	mov	r0, r4
 8008532:	bd70      	pop	{r4, r5, r6, pc}

08008534 <__sinit>:
 8008534:	6983      	ldr	r3, [r0, #24]
 8008536:	b510      	push	{r4, lr}
 8008538:	4604      	mov	r4, r0
 800853a:	bb33      	cbnz	r3, 800858a <__sinit+0x56>
 800853c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008540:	6503      	str	r3, [r0, #80]	; 0x50
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <__sinit+0x58>)
 8008544:	4a12      	ldr	r2, [pc, #72]	; (8008590 <__sinit+0x5c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6282      	str	r2, [r0, #40]	; 0x28
 800854a:	4298      	cmp	r0, r3
 800854c:	bf04      	itt	eq
 800854e:	2301      	moveq	r3, #1
 8008550:	6183      	streq	r3, [r0, #24]
 8008552:	f000 f81f 	bl	8008594 <__sfp>
 8008556:	6060      	str	r0, [r4, #4]
 8008558:	4620      	mov	r0, r4
 800855a:	f000 f81b 	bl	8008594 <__sfp>
 800855e:	60a0      	str	r0, [r4, #8]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 f817 	bl	8008594 <__sfp>
 8008566:	2200      	movs	r2, #0
 8008568:	60e0      	str	r0, [r4, #12]
 800856a:	2104      	movs	r1, #4
 800856c:	6860      	ldr	r0, [r4, #4]
 800856e:	f7ff ffa1 	bl	80084b4 <std>
 8008572:	2201      	movs	r2, #1
 8008574:	2109      	movs	r1, #9
 8008576:	68a0      	ldr	r0, [r4, #8]
 8008578:	f7ff ff9c 	bl	80084b4 <std>
 800857c:	2202      	movs	r2, #2
 800857e:	2112      	movs	r1, #18
 8008580:	68e0      	ldr	r0, [r4, #12]
 8008582:	f7ff ff97 	bl	80084b4 <std>
 8008586:	2301      	movs	r3, #1
 8008588:	61a3      	str	r3, [r4, #24]
 800858a:	bd10      	pop	{r4, pc}
 800858c:	08009304 	.word	0x08009304
 8008590:	080084fd 	.word	0x080084fd

08008594 <__sfp>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <__sfp+0x70>)
 8008598:	4607      	mov	r7, r0
 800859a:	681e      	ldr	r6, [r3, #0]
 800859c:	69b3      	ldr	r3, [r6, #24]
 800859e:	b913      	cbnz	r3, 80085a6 <__sfp+0x12>
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff ffc7 	bl	8008534 <__sinit>
 80085a6:	3648      	adds	r6, #72	; 0x48
 80085a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	d503      	bpl.n	80085b8 <__sfp+0x24>
 80085b0:	6833      	ldr	r3, [r6, #0]
 80085b2:	b133      	cbz	r3, 80085c2 <__sfp+0x2e>
 80085b4:	6836      	ldr	r6, [r6, #0]
 80085b6:	e7f7      	b.n	80085a8 <__sfp+0x14>
 80085b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085bc:	b16d      	cbz	r5, 80085da <__sfp+0x46>
 80085be:	3468      	adds	r4, #104	; 0x68
 80085c0:	e7f4      	b.n	80085ac <__sfp+0x18>
 80085c2:	2104      	movs	r1, #4
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ff9f 	bl	8008508 <__sfmoreglue>
 80085ca:	6030      	str	r0, [r6, #0]
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d1f1      	bne.n	80085b4 <__sfp+0x20>
 80085d0:	230c      	movs	r3, #12
 80085d2:	4604      	mov	r4, r0
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	4620      	mov	r0, r4
 80085d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <__sfp+0x74>)
 80085dc:	6665      	str	r5, [r4, #100]	; 0x64
 80085de:	e9c4 5500 	strd	r5, r5, [r4]
 80085e2:	60a5      	str	r5, [r4, #8]
 80085e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80085e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80085ec:	2208      	movs	r2, #8
 80085ee:	4629      	mov	r1, r5
 80085f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085f4:	f7ff ff3d 	bl	8008472 <memset>
 80085f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008600:	e7e9      	b.n	80085d6 <__sfp+0x42>
 8008602:	bf00      	nop
 8008604:	08009304 	.word	0x08009304
 8008608:	ffff0001 	.word	0xffff0001

0800860c <_fwalk_reent>:
 800860c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008610:	4680      	mov	r8, r0
 8008612:	4689      	mov	r9, r1
 8008614:	2600      	movs	r6, #0
 8008616:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800861a:	b914      	cbnz	r4, 8008622 <_fwalk_reent+0x16>
 800861c:	4630      	mov	r0, r6
 800861e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008622:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008626:	3f01      	subs	r7, #1
 8008628:	d501      	bpl.n	800862e <_fwalk_reent+0x22>
 800862a:	6824      	ldr	r4, [r4, #0]
 800862c:	e7f5      	b.n	800861a <_fwalk_reent+0xe>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d907      	bls.n	8008644 <_fwalk_reent+0x38>
 8008634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008638:	3301      	adds	r3, #1
 800863a:	d003      	beq.n	8008644 <_fwalk_reent+0x38>
 800863c:	4629      	mov	r1, r5
 800863e:	4640      	mov	r0, r8
 8008640:	47c8      	blx	r9
 8008642:	4306      	orrs	r6, r0
 8008644:	3568      	adds	r5, #104	; 0x68
 8008646:	e7ee      	b.n	8008626 <_fwalk_reent+0x1a>

08008648 <_malloc_r>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	1ccd      	adds	r5, r1, #3
 800864c:	f025 0503 	bic.w	r5, r5, #3
 8008650:	3508      	adds	r5, #8
 8008652:	2d0c      	cmp	r5, #12
 8008654:	bf38      	it	cc
 8008656:	250c      	movcc	r5, #12
 8008658:	2d00      	cmp	r5, #0
 800865a:	4606      	mov	r6, r0
 800865c:	db01      	blt.n	8008662 <_malloc_r+0x1a>
 800865e:	42a9      	cmp	r1, r5
 8008660:	d903      	bls.n	800866a <_malloc_r+0x22>
 8008662:	230c      	movs	r3, #12
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	2000      	movs	r0, #0
 8008668:	bd70      	pop	{r4, r5, r6, pc}
 800866a:	f000 fd77 	bl	800915c <__malloc_lock>
 800866e:	4a21      	ldr	r2, [pc, #132]	; (80086f4 <_malloc_r+0xac>)
 8008670:	6814      	ldr	r4, [r2, #0]
 8008672:	4621      	mov	r1, r4
 8008674:	b991      	cbnz	r1, 800869c <_malloc_r+0x54>
 8008676:	4c20      	ldr	r4, [pc, #128]	; (80086f8 <_malloc_r+0xb0>)
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	b91b      	cbnz	r3, 8008684 <_malloc_r+0x3c>
 800867c:	4630      	mov	r0, r6
 800867e:	f000 fb03 	bl	8008c88 <_sbrk_r>
 8008682:	6020      	str	r0, [r4, #0]
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f000 fafe 	bl	8008c88 <_sbrk_r>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d124      	bne.n	80086da <_malloc_r+0x92>
 8008690:	230c      	movs	r3, #12
 8008692:	4630      	mov	r0, r6
 8008694:	6033      	str	r3, [r6, #0]
 8008696:	f000 fd62 	bl	800915e <__malloc_unlock>
 800869a:	e7e4      	b.n	8008666 <_malloc_r+0x1e>
 800869c:	680b      	ldr	r3, [r1, #0]
 800869e:	1b5b      	subs	r3, r3, r5
 80086a0:	d418      	bmi.n	80086d4 <_malloc_r+0x8c>
 80086a2:	2b0b      	cmp	r3, #11
 80086a4:	d90f      	bls.n	80086c6 <_malloc_r+0x7e>
 80086a6:	600b      	str	r3, [r1, #0]
 80086a8:	18cc      	adds	r4, r1, r3
 80086aa:	50cd      	str	r5, [r1, r3]
 80086ac:	4630      	mov	r0, r6
 80086ae:	f000 fd56 	bl	800915e <__malloc_unlock>
 80086b2:	f104 000b 	add.w	r0, r4, #11
 80086b6:	1d23      	adds	r3, r4, #4
 80086b8:	f020 0007 	bic.w	r0, r0, #7
 80086bc:	1ac3      	subs	r3, r0, r3
 80086be:	d0d3      	beq.n	8008668 <_malloc_r+0x20>
 80086c0:	425a      	negs	r2, r3
 80086c2:	50e2      	str	r2, [r4, r3]
 80086c4:	e7d0      	b.n	8008668 <_malloc_r+0x20>
 80086c6:	684b      	ldr	r3, [r1, #4]
 80086c8:	428c      	cmp	r4, r1
 80086ca:	bf16      	itet	ne
 80086cc:	6063      	strne	r3, [r4, #4]
 80086ce:	6013      	streq	r3, [r2, #0]
 80086d0:	460c      	movne	r4, r1
 80086d2:	e7eb      	b.n	80086ac <_malloc_r+0x64>
 80086d4:	460c      	mov	r4, r1
 80086d6:	6849      	ldr	r1, [r1, #4]
 80086d8:	e7cc      	b.n	8008674 <_malloc_r+0x2c>
 80086da:	1cc4      	adds	r4, r0, #3
 80086dc:	f024 0403 	bic.w	r4, r4, #3
 80086e0:	42a0      	cmp	r0, r4
 80086e2:	d005      	beq.n	80086f0 <_malloc_r+0xa8>
 80086e4:	1a21      	subs	r1, r4, r0
 80086e6:	4630      	mov	r0, r6
 80086e8:	f000 face 	bl	8008c88 <_sbrk_r>
 80086ec:	3001      	adds	r0, #1
 80086ee:	d0cf      	beq.n	8008690 <_malloc_r+0x48>
 80086f0:	6025      	str	r5, [r4, #0]
 80086f2:	e7db      	b.n	80086ac <_malloc_r+0x64>
 80086f4:	20000440 	.word	0x20000440
 80086f8:	20000444 	.word	0x20000444

080086fc <__sfputc_r>:
 80086fc:	6893      	ldr	r3, [r2, #8]
 80086fe:	b410      	push	{r4}
 8008700:	3b01      	subs	r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	6093      	str	r3, [r2, #8]
 8008706:	da07      	bge.n	8008718 <__sfputc_r+0x1c>
 8008708:	6994      	ldr	r4, [r2, #24]
 800870a:	42a3      	cmp	r3, r4
 800870c:	db01      	blt.n	8008712 <__sfputc_r+0x16>
 800870e:	290a      	cmp	r1, #10
 8008710:	d102      	bne.n	8008718 <__sfputc_r+0x1c>
 8008712:	bc10      	pop	{r4}
 8008714:	f000 bb0c 	b.w	8008d30 <__swbuf_r>
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	1c58      	adds	r0, r3, #1
 800871c:	6010      	str	r0, [r2, #0]
 800871e:	7019      	strb	r1, [r3, #0]
 8008720:	4608      	mov	r0, r1
 8008722:	bc10      	pop	{r4}
 8008724:	4770      	bx	lr

08008726 <__sfputs_r>:
 8008726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008728:	4606      	mov	r6, r0
 800872a:	460f      	mov	r7, r1
 800872c:	4614      	mov	r4, r2
 800872e:	18d5      	adds	r5, r2, r3
 8008730:	42ac      	cmp	r4, r5
 8008732:	d101      	bne.n	8008738 <__sfputs_r+0x12>
 8008734:	2000      	movs	r0, #0
 8008736:	e007      	b.n	8008748 <__sfputs_r+0x22>
 8008738:	463a      	mov	r2, r7
 800873a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873e:	4630      	mov	r0, r6
 8008740:	f7ff ffdc 	bl	80086fc <__sfputc_r>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d1f3      	bne.n	8008730 <__sfputs_r+0xa>
 8008748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800874c <_vfiprintf_r>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	460c      	mov	r4, r1
 8008752:	b09d      	sub	sp, #116	; 0x74
 8008754:	4617      	mov	r7, r2
 8008756:	461d      	mov	r5, r3
 8008758:	4606      	mov	r6, r0
 800875a:	b118      	cbz	r0, 8008764 <_vfiprintf_r+0x18>
 800875c:	6983      	ldr	r3, [r0, #24]
 800875e:	b90b      	cbnz	r3, 8008764 <_vfiprintf_r+0x18>
 8008760:	f7ff fee8 	bl	8008534 <__sinit>
 8008764:	4b7c      	ldr	r3, [pc, #496]	; (8008958 <_vfiprintf_r+0x20c>)
 8008766:	429c      	cmp	r4, r3
 8008768:	d158      	bne.n	800881c <_vfiprintf_r+0xd0>
 800876a:	6874      	ldr	r4, [r6, #4]
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	0718      	lsls	r0, r3, #28
 8008770:	d55e      	bpl.n	8008830 <_vfiprintf_r+0xe4>
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d05b      	beq.n	8008830 <_vfiprintf_r+0xe4>
 8008778:	2300      	movs	r3, #0
 800877a:	9309      	str	r3, [sp, #36]	; 0x24
 800877c:	2320      	movs	r3, #32
 800877e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008782:	2330      	movs	r3, #48	; 0x30
 8008784:	f04f 0b01 	mov.w	fp, #1
 8008788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800878c:	9503      	str	r5, [sp, #12]
 800878e:	46b8      	mov	r8, r7
 8008790:	4645      	mov	r5, r8
 8008792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008796:	b10b      	cbz	r3, 800879c <_vfiprintf_r+0x50>
 8008798:	2b25      	cmp	r3, #37	; 0x25
 800879a:	d154      	bne.n	8008846 <_vfiprintf_r+0xfa>
 800879c:	ebb8 0a07 	subs.w	sl, r8, r7
 80087a0:	d00b      	beq.n	80087ba <_vfiprintf_r+0x6e>
 80087a2:	4653      	mov	r3, sl
 80087a4:	463a      	mov	r2, r7
 80087a6:	4621      	mov	r1, r4
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7ff ffbc 	bl	8008726 <__sfputs_r>
 80087ae:	3001      	adds	r0, #1
 80087b0:	f000 80c2 	beq.w	8008938 <_vfiprintf_r+0x1ec>
 80087b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b6:	4453      	add	r3, sl
 80087b8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ba:	f898 3000 	ldrb.w	r3, [r8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 80ba 	beq.w	8008938 <_vfiprintf_r+0x1ec>
 80087c4:	2300      	movs	r3, #0
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ce:	9304      	str	r3, [sp, #16]
 80087d0:	9307      	str	r3, [sp, #28]
 80087d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087d6:	931a      	str	r3, [sp, #104]	; 0x68
 80087d8:	46a8      	mov	r8, r5
 80087da:	2205      	movs	r2, #5
 80087dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80087e0:	485e      	ldr	r0, [pc, #376]	; (800895c <_vfiprintf_r+0x210>)
 80087e2:	f000 fcad 	bl	8009140 <memchr>
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	bb78      	cbnz	r0, 800884a <_vfiprintf_r+0xfe>
 80087ea:	06d9      	lsls	r1, r3, #27
 80087ec:	bf44      	itt	mi
 80087ee:	2220      	movmi	r2, #32
 80087f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087f4:	071a      	lsls	r2, r3, #28
 80087f6:	bf44      	itt	mi
 80087f8:	222b      	movmi	r2, #43	; 0x2b
 80087fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087fe:	782a      	ldrb	r2, [r5, #0]
 8008800:	2a2a      	cmp	r2, #42	; 0x2a
 8008802:	d02a      	beq.n	800885a <_vfiprintf_r+0x10e>
 8008804:	46a8      	mov	r8, r5
 8008806:	2000      	movs	r0, #0
 8008808:	250a      	movs	r5, #10
 800880a:	9a07      	ldr	r2, [sp, #28]
 800880c:	4641      	mov	r1, r8
 800880e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008812:	3b30      	subs	r3, #48	; 0x30
 8008814:	2b09      	cmp	r3, #9
 8008816:	d969      	bls.n	80088ec <_vfiprintf_r+0x1a0>
 8008818:	b360      	cbz	r0, 8008874 <_vfiprintf_r+0x128>
 800881a:	e024      	b.n	8008866 <_vfiprintf_r+0x11a>
 800881c:	4b50      	ldr	r3, [pc, #320]	; (8008960 <_vfiprintf_r+0x214>)
 800881e:	429c      	cmp	r4, r3
 8008820:	d101      	bne.n	8008826 <_vfiprintf_r+0xda>
 8008822:	68b4      	ldr	r4, [r6, #8]
 8008824:	e7a2      	b.n	800876c <_vfiprintf_r+0x20>
 8008826:	4b4f      	ldr	r3, [pc, #316]	; (8008964 <_vfiprintf_r+0x218>)
 8008828:	429c      	cmp	r4, r3
 800882a:	bf08      	it	eq
 800882c:	68f4      	ldreq	r4, [r6, #12]
 800882e:	e79d      	b.n	800876c <_vfiprintf_r+0x20>
 8008830:	4621      	mov	r1, r4
 8008832:	4630      	mov	r0, r6
 8008834:	f000 fae0 	bl	8008df8 <__swsetup_r>
 8008838:	2800      	cmp	r0, #0
 800883a:	d09d      	beq.n	8008778 <_vfiprintf_r+0x2c>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	b01d      	add	sp, #116	; 0x74
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	46a8      	mov	r8, r5
 8008848:	e7a2      	b.n	8008790 <_vfiprintf_r+0x44>
 800884a:	4a44      	ldr	r2, [pc, #272]	; (800895c <_vfiprintf_r+0x210>)
 800884c:	4645      	mov	r5, r8
 800884e:	1a80      	subs	r0, r0, r2
 8008850:	fa0b f000 	lsl.w	r0, fp, r0
 8008854:	4318      	orrs	r0, r3
 8008856:	9004      	str	r0, [sp, #16]
 8008858:	e7be      	b.n	80087d8 <_vfiprintf_r+0x8c>
 800885a:	9a03      	ldr	r2, [sp, #12]
 800885c:	1d11      	adds	r1, r2, #4
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	9103      	str	r1, [sp, #12]
 8008862:	2a00      	cmp	r2, #0
 8008864:	db01      	blt.n	800886a <_vfiprintf_r+0x11e>
 8008866:	9207      	str	r2, [sp, #28]
 8008868:	e004      	b.n	8008874 <_vfiprintf_r+0x128>
 800886a:	4252      	negs	r2, r2
 800886c:	f043 0302 	orr.w	r3, r3, #2
 8008870:	9207      	str	r2, [sp, #28]
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	f898 3000 	ldrb.w	r3, [r8]
 8008878:	2b2e      	cmp	r3, #46	; 0x2e
 800887a:	d10e      	bne.n	800889a <_vfiprintf_r+0x14e>
 800887c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008880:	2b2a      	cmp	r3, #42	; 0x2a
 8008882:	d138      	bne.n	80088f6 <_vfiprintf_r+0x1aa>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	f108 0802 	add.w	r8, r8, #2
 800888a:	1d1a      	adds	r2, r3, #4
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	9203      	str	r2, [sp, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfb8      	it	lt
 8008894:	f04f 33ff 	movlt.w	r3, #4294967295
 8008898:	9305      	str	r3, [sp, #20]
 800889a:	4d33      	ldr	r5, [pc, #204]	; (8008968 <_vfiprintf_r+0x21c>)
 800889c:	2203      	movs	r2, #3
 800889e:	f898 1000 	ldrb.w	r1, [r8]
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 fc4c 	bl	8009140 <memchr>
 80088a8:	b140      	cbz	r0, 80088bc <_vfiprintf_r+0x170>
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	1b40      	subs	r0, r0, r5
 80088ae:	fa03 f000 	lsl.w	r0, r3, r0
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	f108 0801 	add.w	r8, r8, #1
 80088b8:	4303      	orrs	r3, r0
 80088ba:	9304      	str	r3, [sp, #16]
 80088bc:	f898 1000 	ldrb.w	r1, [r8]
 80088c0:	2206      	movs	r2, #6
 80088c2:	482a      	ldr	r0, [pc, #168]	; (800896c <_vfiprintf_r+0x220>)
 80088c4:	f108 0701 	add.w	r7, r8, #1
 80088c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088cc:	f000 fc38 	bl	8009140 <memchr>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d037      	beq.n	8008944 <_vfiprintf_r+0x1f8>
 80088d4:	4b26      	ldr	r3, [pc, #152]	; (8008970 <_vfiprintf_r+0x224>)
 80088d6:	bb1b      	cbnz	r3, 8008920 <_vfiprintf_r+0x1d4>
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	3307      	adds	r3, #7
 80088dc:	f023 0307 	bic.w	r3, r3, #7
 80088e0:	3308      	adds	r3, #8
 80088e2:	9303      	str	r3, [sp, #12]
 80088e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e6:	444b      	add	r3, r9
 80088e8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ea:	e750      	b.n	800878e <_vfiprintf_r+0x42>
 80088ec:	fb05 3202 	mla	r2, r5, r2, r3
 80088f0:	2001      	movs	r0, #1
 80088f2:	4688      	mov	r8, r1
 80088f4:	e78a      	b.n	800880c <_vfiprintf_r+0xc0>
 80088f6:	2300      	movs	r3, #0
 80088f8:	250a      	movs	r5, #10
 80088fa:	4619      	mov	r1, r3
 80088fc:	f108 0801 	add.w	r8, r8, #1
 8008900:	9305      	str	r3, [sp, #20]
 8008902:	4640      	mov	r0, r8
 8008904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008908:	3a30      	subs	r2, #48	; 0x30
 800890a:	2a09      	cmp	r2, #9
 800890c:	d903      	bls.n	8008916 <_vfiprintf_r+0x1ca>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0c3      	beq.n	800889a <_vfiprintf_r+0x14e>
 8008912:	9105      	str	r1, [sp, #20]
 8008914:	e7c1      	b.n	800889a <_vfiprintf_r+0x14e>
 8008916:	fb05 2101 	mla	r1, r5, r1, r2
 800891a:	2301      	movs	r3, #1
 800891c:	4680      	mov	r8, r0
 800891e:	e7f0      	b.n	8008902 <_vfiprintf_r+0x1b6>
 8008920:	ab03      	add	r3, sp, #12
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4622      	mov	r2, r4
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <_vfiprintf_r+0x228>)
 8008928:	a904      	add	r1, sp, #16
 800892a:	4630      	mov	r0, r6
 800892c:	f3af 8000 	nop.w
 8008930:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008934:	4681      	mov	r9, r0
 8008936:	d1d5      	bne.n	80088e4 <_vfiprintf_r+0x198>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	065b      	lsls	r3, r3, #25
 800893c:	f53f af7e 	bmi.w	800883c <_vfiprintf_r+0xf0>
 8008940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008942:	e77d      	b.n	8008840 <_vfiprintf_r+0xf4>
 8008944:	ab03      	add	r3, sp, #12
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	4622      	mov	r2, r4
 800894a:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <_vfiprintf_r+0x228>)
 800894c:	a904      	add	r1, sp, #16
 800894e:	4630      	mov	r0, r6
 8008950:	f000 f888 	bl	8008a64 <_printf_i>
 8008954:	e7ec      	b.n	8008930 <_vfiprintf_r+0x1e4>
 8008956:	bf00      	nop
 8008958:	08009328 	.word	0x08009328
 800895c:	08009368 	.word	0x08009368
 8008960:	08009348 	.word	0x08009348
 8008964:	08009308 	.word	0x08009308
 8008968:	0800936e 	.word	0x0800936e
 800896c:	08009372 	.word	0x08009372
 8008970:	00000000 	.word	0x00000000
 8008974:	08008727 	.word	0x08008727

08008978 <_printf_common>:
 8008978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	4691      	mov	r9, r2
 800897e:	461f      	mov	r7, r3
 8008980:	688a      	ldr	r2, [r1, #8]
 8008982:	690b      	ldr	r3, [r1, #16]
 8008984:	4606      	mov	r6, r0
 8008986:	4293      	cmp	r3, r2
 8008988:	bfb8      	it	lt
 800898a:	4613      	movlt	r3, r2
 800898c:	f8c9 3000 	str.w	r3, [r9]
 8008990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008994:	460c      	mov	r4, r1
 8008996:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800899a:	b112      	cbz	r2, 80089a2 <_printf_common+0x2a>
 800899c:	3301      	adds	r3, #1
 800899e:	f8c9 3000 	str.w	r3, [r9]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	0699      	lsls	r1, r3, #26
 80089a6:	bf42      	ittt	mi
 80089a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089ac:	3302      	addmi	r3, #2
 80089ae:	f8c9 3000 	strmi.w	r3, [r9]
 80089b2:	6825      	ldr	r5, [r4, #0]
 80089b4:	f015 0506 	ands.w	r5, r5, #6
 80089b8:	d107      	bne.n	80089ca <_printf_common+0x52>
 80089ba:	f104 0a19 	add.w	sl, r4, #25
 80089be:	68e3      	ldr	r3, [r4, #12]
 80089c0:	f8d9 2000 	ldr.w	r2, [r9]
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	42ab      	cmp	r3, r5
 80089c8:	dc29      	bgt.n	8008a1e <_printf_common+0xa6>
 80089ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	3300      	adds	r3, #0
 80089d2:	bf18      	it	ne
 80089d4:	2301      	movne	r3, #1
 80089d6:	0692      	lsls	r2, r2, #26
 80089d8:	d42e      	bmi.n	8008a38 <_printf_common+0xc0>
 80089da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089de:	4639      	mov	r1, r7
 80089e0:	4630      	mov	r0, r6
 80089e2:	47c0      	blx	r8
 80089e4:	3001      	adds	r0, #1
 80089e6:	d021      	beq.n	8008a2c <_printf_common+0xb4>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	68e5      	ldr	r5, [r4, #12]
 80089ec:	f003 0306 	and.w	r3, r3, #6
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	bf18      	it	ne
 80089f4:	2500      	movne	r5, #0
 80089f6:	f8d9 2000 	ldr.w	r2, [r9]
 80089fa:	f04f 0900 	mov.w	r9, #0
 80089fe:	bf08      	it	eq
 8008a00:	1aad      	subeq	r5, r5, r2
 8008a02:	68a3      	ldr	r3, [r4, #8]
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	bf08      	it	eq
 8008a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	bfc4      	itt	gt
 8008a10:	1a9b      	subgt	r3, r3, r2
 8008a12:	18ed      	addgt	r5, r5, r3
 8008a14:	341a      	adds	r4, #26
 8008a16:	454d      	cmp	r5, r9
 8008a18:	d11a      	bne.n	8008a50 <_printf_common+0xd8>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e008      	b.n	8008a30 <_printf_common+0xb8>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4652      	mov	r2, sl
 8008a22:	4639      	mov	r1, r7
 8008a24:	4630      	mov	r0, r6
 8008a26:	47c0      	blx	r8
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d103      	bne.n	8008a34 <_printf_common+0xbc>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a34:	3501      	adds	r5, #1
 8008a36:	e7c2      	b.n	80089be <_printf_common+0x46>
 8008a38:	2030      	movs	r0, #48	; 0x30
 8008a3a:	18e1      	adds	r1, r4, r3
 8008a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a46:	4422      	add	r2, r4
 8008a48:	3302      	adds	r3, #2
 8008a4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a4e:	e7c4      	b.n	80089da <_printf_common+0x62>
 8008a50:	2301      	movs	r3, #1
 8008a52:	4622      	mov	r2, r4
 8008a54:	4639      	mov	r1, r7
 8008a56:	4630      	mov	r0, r6
 8008a58:	47c0      	blx	r8
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d0e6      	beq.n	8008a2c <_printf_common+0xb4>
 8008a5e:	f109 0901 	add.w	r9, r9, #1
 8008a62:	e7d8      	b.n	8008a16 <_printf_common+0x9e>

08008a64 <_printf_i>:
 8008a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	7e09      	ldrb	r1, [r1, #24]
 8008a70:	b085      	sub	sp, #20
 8008a72:	296e      	cmp	r1, #110	; 0x6e
 8008a74:	4617      	mov	r7, r2
 8008a76:	4606      	mov	r6, r0
 8008a78:	4698      	mov	r8, r3
 8008a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a7c:	f000 80b3 	beq.w	8008be6 <_printf_i+0x182>
 8008a80:	d822      	bhi.n	8008ac8 <_printf_i+0x64>
 8008a82:	2963      	cmp	r1, #99	; 0x63
 8008a84:	d036      	beq.n	8008af4 <_printf_i+0x90>
 8008a86:	d80a      	bhi.n	8008a9e <_printf_i+0x3a>
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	f000 80b9 	beq.w	8008c00 <_printf_i+0x19c>
 8008a8e:	2958      	cmp	r1, #88	; 0x58
 8008a90:	f000 8083 	beq.w	8008b9a <_printf_i+0x136>
 8008a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a9c:	e032      	b.n	8008b04 <_printf_i+0xa0>
 8008a9e:	2964      	cmp	r1, #100	; 0x64
 8008aa0:	d001      	beq.n	8008aa6 <_printf_i+0x42>
 8008aa2:	2969      	cmp	r1, #105	; 0x69
 8008aa4:	d1f6      	bne.n	8008a94 <_printf_i+0x30>
 8008aa6:	6820      	ldr	r0, [r4, #0]
 8008aa8:	6813      	ldr	r3, [r2, #0]
 8008aaa:	0605      	lsls	r5, r0, #24
 8008aac:	f103 0104 	add.w	r1, r3, #4
 8008ab0:	d52a      	bpl.n	8008b08 <_printf_i+0xa4>
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6011      	str	r1, [r2, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da03      	bge.n	8008ac2 <_printf_i+0x5e>
 8008aba:	222d      	movs	r2, #45	; 0x2d
 8008abc:	425b      	negs	r3, r3
 8008abe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ac2:	486f      	ldr	r0, [pc, #444]	; (8008c80 <_printf_i+0x21c>)
 8008ac4:	220a      	movs	r2, #10
 8008ac6:	e039      	b.n	8008b3c <_printf_i+0xd8>
 8008ac8:	2973      	cmp	r1, #115	; 0x73
 8008aca:	f000 809d 	beq.w	8008c08 <_printf_i+0x1a4>
 8008ace:	d808      	bhi.n	8008ae2 <_printf_i+0x7e>
 8008ad0:	296f      	cmp	r1, #111	; 0x6f
 8008ad2:	d020      	beq.n	8008b16 <_printf_i+0xb2>
 8008ad4:	2970      	cmp	r1, #112	; 0x70
 8008ad6:	d1dd      	bne.n	8008a94 <_printf_i+0x30>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	f043 0320 	orr.w	r3, r3, #32
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	e003      	b.n	8008aea <_printf_i+0x86>
 8008ae2:	2975      	cmp	r1, #117	; 0x75
 8008ae4:	d017      	beq.n	8008b16 <_printf_i+0xb2>
 8008ae6:	2978      	cmp	r1, #120	; 0x78
 8008ae8:	d1d4      	bne.n	8008a94 <_printf_i+0x30>
 8008aea:	2378      	movs	r3, #120	; 0x78
 8008aec:	4865      	ldr	r0, [pc, #404]	; (8008c84 <_printf_i+0x220>)
 8008aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008af2:	e055      	b.n	8008ba0 <_printf_i+0x13c>
 8008af4:	6813      	ldr	r3, [r2, #0]
 8008af6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afa:	1d19      	adds	r1, r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6011      	str	r1, [r2, #0]
 8008b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b04:	2301      	movs	r3, #1
 8008b06:	e08c      	b.n	8008c22 <_printf_i+0x1be>
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b0e:	6011      	str	r1, [r2, #0]
 8008b10:	bf18      	it	ne
 8008b12:	b21b      	sxthne	r3, r3
 8008b14:	e7cf      	b.n	8008ab6 <_printf_i+0x52>
 8008b16:	6813      	ldr	r3, [r2, #0]
 8008b18:	6825      	ldr	r5, [r4, #0]
 8008b1a:	1d18      	adds	r0, r3, #4
 8008b1c:	6010      	str	r0, [r2, #0]
 8008b1e:	0628      	lsls	r0, r5, #24
 8008b20:	d501      	bpl.n	8008b26 <_printf_i+0xc2>
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	e002      	b.n	8008b2c <_printf_i+0xc8>
 8008b26:	0668      	lsls	r0, r5, #25
 8008b28:	d5fb      	bpl.n	8008b22 <_printf_i+0xbe>
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	296f      	cmp	r1, #111	; 0x6f
 8008b2e:	bf14      	ite	ne
 8008b30:	220a      	movne	r2, #10
 8008b32:	2208      	moveq	r2, #8
 8008b34:	4852      	ldr	r0, [pc, #328]	; (8008c80 <_printf_i+0x21c>)
 8008b36:	2100      	movs	r1, #0
 8008b38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b3c:	6865      	ldr	r5, [r4, #4]
 8008b3e:	2d00      	cmp	r5, #0
 8008b40:	60a5      	str	r5, [r4, #8]
 8008b42:	f2c0 8095 	blt.w	8008c70 <_printf_i+0x20c>
 8008b46:	6821      	ldr	r1, [r4, #0]
 8008b48:	f021 0104 	bic.w	r1, r1, #4
 8008b4c:	6021      	str	r1, [r4, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d13d      	bne.n	8008bce <_printf_i+0x16a>
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	f040 808e 	bne.w	8008c74 <_printf_i+0x210>
 8008b58:	4665      	mov	r5, ip
 8008b5a:	2a08      	cmp	r2, #8
 8008b5c:	d10b      	bne.n	8008b76 <_printf_i+0x112>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	07db      	lsls	r3, r3, #31
 8008b62:	d508      	bpl.n	8008b76 <_printf_i+0x112>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	6862      	ldr	r2, [r4, #4]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	bfde      	ittt	le
 8008b6c:	2330      	movle	r3, #48	; 0x30
 8008b6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b76:	ebac 0305 	sub.w	r3, ip, r5
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	f8cd 8000 	str.w	r8, [sp]
 8008b80:	463b      	mov	r3, r7
 8008b82:	aa03      	add	r2, sp, #12
 8008b84:	4621      	mov	r1, r4
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff fef6 	bl	8008978 <_printf_common>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d14d      	bne.n	8008c2c <_printf_i+0x1c8>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b005      	add	sp, #20
 8008b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b9a:	4839      	ldr	r0, [pc, #228]	; (8008c80 <_printf_i+0x21c>)
 8008b9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ba0:	6813      	ldr	r3, [r2, #0]
 8008ba2:	6821      	ldr	r1, [r4, #0]
 8008ba4:	1d1d      	adds	r5, r3, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6015      	str	r5, [r2, #0]
 8008baa:	060a      	lsls	r2, r1, #24
 8008bac:	d50b      	bpl.n	8008bc6 <_printf_i+0x162>
 8008bae:	07ca      	lsls	r2, r1, #31
 8008bb0:	bf44      	itt	mi
 8008bb2:	f041 0120 	orrmi.w	r1, r1, #32
 8008bb6:	6021      	strmi	r1, [r4, #0]
 8008bb8:	b91b      	cbnz	r3, 8008bc2 <_printf_i+0x15e>
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	f022 0220 	bic.w	r2, r2, #32
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	2210      	movs	r2, #16
 8008bc4:	e7b7      	b.n	8008b36 <_printf_i+0xd2>
 8008bc6:	064d      	lsls	r5, r1, #25
 8008bc8:	bf48      	it	mi
 8008bca:	b29b      	uxthmi	r3, r3
 8008bcc:	e7ef      	b.n	8008bae <_printf_i+0x14a>
 8008bce:	4665      	mov	r5, ip
 8008bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bd4:	fb02 3311 	mls	r3, r2, r1, r3
 8008bd8:	5cc3      	ldrb	r3, [r0, r3]
 8008bda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008bde:	460b      	mov	r3, r1
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d1f5      	bne.n	8008bd0 <_printf_i+0x16c>
 8008be4:	e7b9      	b.n	8008b5a <_printf_i+0xf6>
 8008be6:	6813      	ldr	r3, [r2, #0]
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	1d18      	adds	r0, r3, #4
 8008bec:	6961      	ldr	r1, [r4, #20]
 8008bee:	6010      	str	r0, [r2, #0]
 8008bf0:	0628      	lsls	r0, r5, #24
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	d501      	bpl.n	8008bfa <_printf_i+0x196>
 8008bf6:	6019      	str	r1, [r3, #0]
 8008bf8:	e002      	b.n	8008c00 <_printf_i+0x19c>
 8008bfa:	066a      	lsls	r2, r5, #25
 8008bfc:	d5fb      	bpl.n	8008bf6 <_printf_i+0x192>
 8008bfe:	8019      	strh	r1, [r3, #0]
 8008c00:	2300      	movs	r3, #0
 8008c02:	4665      	mov	r5, ip
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	e7b9      	b.n	8008b7c <_printf_i+0x118>
 8008c08:	6813      	ldr	r3, [r2, #0]
 8008c0a:	1d19      	adds	r1, r3, #4
 8008c0c:	6011      	str	r1, [r2, #0]
 8008c0e:	681d      	ldr	r5, [r3, #0]
 8008c10:	6862      	ldr	r2, [r4, #4]
 8008c12:	2100      	movs	r1, #0
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 fa93 	bl	8009140 <memchr>
 8008c1a:	b108      	cbz	r0, 8008c20 <_printf_i+0x1bc>
 8008c1c:	1b40      	subs	r0, r0, r5
 8008c1e:	6060      	str	r0, [r4, #4]
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	6123      	str	r3, [r4, #16]
 8008c24:	2300      	movs	r3, #0
 8008c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c2a:	e7a7      	b.n	8008b7c <_printf_i+0x118>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4639      	mov	r1, r7
 8008c32:	4630      	mov	r0, r6
 8008c34:	47c0      	blx	r8
 8008c36:	3001      	adds	r0, #1
 8008c38:	d0aa      	beq.n	8008b90 <_printf_i+0x12c>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	079b      	lsls	r3, r3, #30
 8008c3e:	d413      	bmi.n	8008c68 <_printf_i+0x204>
 8008c40:	68e0      	ldr	r0, [r4, #12]
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	4298      	cmp	r0, r3
 8008c46:	bfb8      	it	lt
 8008c48:	4618      	movlt	r0, r3
 8008c4a:	e7a3      	b.n	8008b94 <_printf_i+0x130>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	464a      	mov	r2, r9
 8008c50:	4639      	mov	r1, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	47c0      	blx	r8
 8008c56:	3001      	adds	r0, #1
 8008c58:	d09a      	beq.n	8008b90 <_printf_i+0x12c>
 8008c5a:	3501      	adds	r5, #1
 8008c5c:	68e3      	ldr	r3, [r4, #12]
 8008c5e:	9a03      	ldr	r2, [sp, #12]
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	42ab      	cmp	r3, r5
 8008c64:	dcf2      	bgt.n	8008c4c <_printf_i+0x1e8>
 8008c66:	e7eb      	b.n	8008c40 <_printf_i+0x1dc>
 8008c68:	2500      	movs	r5, #0
 8008c6a:	f104 0919 	add.w	r9, r4, #25
 8008c6e:	e7f5      	b.n	8008c5c <_printf_i+0x1f8>
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1ac      	bne.n	8008bce <_printf_i+0x16a>
 8008c74:	7803      	ldrb	r3, [r0, #0]
 8008c76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c7e:	e76c      	b.n	8008b5a <_printf_i+0xf6>
 8008c80:	08009379 	.word	0x08009379
 8008c84:	0800938a 	.word	0x0800938a

08008c88 <_sbrk_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4c05      	ldr	r4, [pc, #20]	; (8008ca4 <_sbrk_r+0x1c>)
 8008c8e:	4605      	mov	r5, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	f7f7 ff82 	bl	8000b9c <_sbrk>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_sbrk_r+0x1a>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_sbrk_r+0x1a>
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	20001d88 	.word	0x20001d88

08008ca8 <__sread>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	460c      	mov	r4, r1
 8008cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb0:	f000 faa2 	bl	80091f8 <_read_r>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	bfab      	itete	ge
 8008cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cba:	89a3      	ldrhlt	r3, [r4, #12]
 8008cbc:	181b      	addge	r3, r3, r0
 8008cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cc2:	bfac      	ite	ge
 8008cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cc6:	81a3      	strhlt	r3, [r4, #12]
 8008cc8:	bd10      	pop	{r4, pc}

08008cca <__swrite>:
 8008cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cce:	461f      	mov	r7, r3
 8008cd0:	898b      	ldrh	r3, [r1, #12]
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	05db      	lsls	r3, r3, #23
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	4616      	mov	r6, r2
 8008cda:	d505      	bpl.n	8008ce8 <__swrite+0x1e>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce4:	f000 f9b6 	bl	8009054 <_lseek_r>
 8008ce8:	89a3      	ldrh	r3, [r4, #12]
 8008cea:	4632      	mov	r2, r6
 8008cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf6:	463b      	mov	r3, r7
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfe:	f000 b869 	b.w	8008dd4 <_write_r>

08008d02 <__sseek>:
 8008d02:	b510      	push	{r4, lr}
 8008d04:	460c      	mov	r4, r1
 8008d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0a:	f000 f9a3 	bl	8009054 <_lseek_r>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	bf15      	itete	ne
 8008d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d1e:	81a3      	strheq	r3, [r4, #12]
 8008d20:	bf18      	it	ne
 8008d22:	81a3      	strhne	r3, [r4, #12]
 8008d24:	bd10      	pop	{r4, pc}

08008d26 <__sclose>:
 8008d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2a:	f000 b8d3 	b.w	8008ed4 <_close_r>
	...

08008d30 <__swbuf_r>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	460e      	mov	r6, r1
 8008d34:	4614      	mov	r4, r2
 8008d36:	4605      	mov	r5, r0
 8008d38:	b118      	cbz	r0, 8008d42 <__swbuf_r+0x12>
 8008d3a:	6983      	ldr	r3, [r0, #24]
 8008d3c:	b90b      	cbnz	r3, 8008d42 <__swbuf_r+0x12>
 8008d3e:	f7ff fbf9 	bl	8008534 <__sinit>
 8008d42:	4b21      	ldr	r3, [pc, #132]	; (8008dc8 <__swbuf_r+0x98>)
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d12a      	bne.n	8008d9e <__swbuf_r+0x6e>
 8008d48:	686c      	ldr	r4, [r5, #4]
 8008d4a:	69a3      	ldr	r3, [r4, #24]
 8008d4c:	60a3      	str	r3, [r4, #8]
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	071a      	lsls	r2, r3, #28
 8008d52:	d52e      	bpl.n	8008db2 <__swbuf_r+0x82>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	b363      	cbz	r3, 8008db2 <__swbuf_r+0x82>
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	6820      	ldr	r0, [r4, #0]
 8008d5c:	b2f6      	uxtb	r6, r6
 8008d5e:	1ac0      	subs	r0, r0, r3
 8008d60:	6963      	ldr	r3, [r4, #20]
 8008d62:	4637      	mov	r7, r6
 8008d64:	4283      	cmp	r3, r0
 8008d66:	dc04      	bgt.n	8008d72 <__swbuf_r+0x42>
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 f948 	bl	8009000 <_fflush_r>
 8008d70:	bb28      	cbnz	r0, 8008dbe <__swbuf_r+0x8e>
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	3001      	adds	r0, #1
 8008d76:	3b01      	subs	r3, #1
 8008d78:	60a3      	str	r3, [r4, #8]
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	701e      	strb	r6, [r3, #0]
 8008d82:	6963      	ldr	r3, [r4, #20]
 8008d84:	4283      	cmp	r3, r0
 8008d86:	d004      	beq.n	8008d92 <__swbuf_r+0x62>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	07db      	lsls	r3, r3, #31
 8008d8c:	d519      	bpl.n	8008dc2 <__swbuf_r+0x92>
 8008d8e:	2e0a      	cmp	r6, #10
 8008d90:	d117      	bne.n	8008dc2 <__swbuf_r+0x92>
 8008d92:	4621      	mov	r1, r4
 8008d94:	4628      	mov	r0, r5
 8008d96:	f000 f933 	bl	8009000 <_fflush_r>
 8008d9a:	b190      	cbz	r0, 8008dc2 <__swbuf_r+0x92>
 8008d9c:	e00f      	b.n	8008dbe <__swbuf_r+0x8e>
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <__swbuf_r+0x9c>)
 8008da0:	429c      	cmp	r4, r3
 8008da2:	d101      	bne.n	8008da8 <__swbuf_r+0x78>
 8008da4:	68ac      	ldr	r4, [r5, #8]
 8008da6:	e7d0      	b.n	8008d4a <__swbuf_r+0x1a>
 8008da8:	4b09      	ldr	r3, [pc, #36]	; (8008dd0 <__swbuf_r+0xa0>)
 8008daa:	429c      	cmp	r4, r3
 8008dac:	bf08      	it	eq
 8008dae:	68ec      	ldreq	r4, [r5, #12]
 8008db0:	e7cb      	b.n	8008d4a <__swbuf_r+0x1a>
 8008db2:	4621      	mov	r1, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 f81f 	bl	8008df8 <__swsetup_r>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d0cc      	beq.n	8008d58 <__swbuf_r+0x28>
 8008dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	08009328 	.word	0x08009328
 8008dcc:	08009348 	.word	0x08009348
 8008dd0:	08009308 	.word	0x08009308

08008dd4 <_write_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	4611      	mov	r1, r2
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4c05      	ldr	r4, [pc, #20]	; (8008df4 <_write_r+0x20>)
 8008de0:	6022      	str	r2, [r4, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7f7 fe8d 	bl	8000b02 <_write>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_write_r+0x1e>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_write_r+0x1e>
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20001d88 	.word	0x20001d88

08008df8 <__swsetup_r>:
 8008df8:	4b32      	ldr	r3, [pc, #200]	; (8008ec4 <__swsetup_r+0xcc>)
 8008dfa:	b570      	push	{r4, r5, r6, lr}
 8008dfc:	681d      	ldr	r5, [r3, #0]
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	b125      	cbz	r5, 8008e0e <__swsetup_r+0x16>
 8008e04:	69ab      	ldr	r3, [r5, #24]
 8008e06:	b913      	cbnz	r3, 8008e0e <__swsetup_r+0x16>
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7ff fb93 	bl	8008534 <__sinit>
 8008e0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <__swsetup_r+0xd0>)
 8008e10:	429c      	cmp	r4, r3
 8008e12:	d10f      	bne.n	8008e34 <__swsetup_r+0x3c>
 8008e14:	686c      	ldr	r4, [r5, #4]
 8008e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	0715      	lsls	r5, r2, #28
 8008e1e:	d42c      	bmi.n	8008e7a <__swsetup_r+0x82>
 8008e20:	06d0      	lsls	r0, r2, #27
 8008e22:	d411      	bmi.n	8008e48 <__swsetup_r+0x50>
 8008e24:	2209      	movs	r2, #9
 8008e26:	6032      	str	r2, [r6, #0]
 8008e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e32:	e03e      	b.n	8008eb2 <__swsetup_r+0xba>
 8008e34:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <__swsetup_r+0xd4>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d101      	bne.n	8008e3e <__swsetup_r+0x46>
 8008e3a:	68ac      	ldr	r4, [r5, #8]
 8008e3c:	e7eb      	b.n	8008e16 <__swsetup_r+0x1e>
 8008e3e:	4b24      	ldr	r3, [pc, #144]	; (8008ed0 <__swsetup_r+0xd8>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	bf08      	it	eq
 8008e44:	68ec      	ldreq	r4, [r5, #12]
 8008e46:	e7e6      	b.n	8008e16 <__swsetup_r+0x1e>
 8008e48:	0751      	lsls	r1, r2, #29
 8008e4a:	d512      	bpl.n	8008e72 <__swsetup_r+0x7a>
 8008e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e4e:	b141      	cbz	r1, 8008e62 <__swsetup_r+0x6a>
 8008e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e54:	4299      	cmp	r1, r3
 8008e56:	d002      	beq.n	8008e5e <__swsetup_r+0x66>
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 f981 	bl	8009160 <_free_r>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6363      	str	r3, [r4, #52]	; 0x34
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6063      	str	r3, [r4, #4]
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f043 0308 	orr.w	r3, r3, #8
 8008e78:	81a3      	strh	r3, [r4, #12]
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	b94b      	cbnz	r3, 8008e92 <__swsetup_r+0x9a>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e88:	d003      	beq.n	8008e92 <__swsetup_r+0x9a>
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f000 f917 	bl	80090c0 <__smakebuf_r>
 8008e92:	89a2      	ldrh	r2, [r4, #12]
 8008e94:	f012 0301 	ands.w	r3, r2, #1
 8008e98:	d00c      	beq.n	8008eb4 <__swsetup_r+0xbc>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60a3      	str	r3, [r4, #8]
 8008e9e:	6963      	ldr	r3, [r4, #20]
 8008ea0:	425b      	negs	r3, r3
 8008ea2:	61a3      	str	r3, [r4, #24]
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	b953      	cbnz	r3, 8008ebe <__swsetup_r+0xc6>
 8008ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008eb0:	d1ba      	bne.n	8008e28 <__swsetup_r+0x30>
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	0792      	lsls	r2, r2, #30
 8008eb6:	bf58      	it	pl
 8008eb8:	6963      	ldrpl	r3, [r4, #20]
 8008eba:	60a3      	str	r3, [r4, #8]
 8008ebc:	e7f2      	b.n	8008ea4 <__swsetup_r+0xac>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e7f7      	b.n	8008eb2 <__swsetup_r+0xba>
 8008ec2:	bf00      	nop
 8008ec4:	20000184 	.word	0x20000184
 8008ec8:	08009328 	.word	0x08009328
 8008ecc:	08009348 	.word	0x08009348
 8008ed0:	08009308 	.word	0x08009308

08008ed4 <_close_r>:
 8008ed4:	b538      	push	{r3, r4, r5, lr}
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4c05      	ldr	r4, [pc, #20]	; (8008ef0 <_close_r+0x1c>)
 8008eda:	4605      	mov	r5, r0
 8008edc:	4608      	mov	r0, r1
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	f7f7 fe2b 	bl	8000b3a <_close>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_close_r+0x1a>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_close_r+0x1a>
 8008eec:	602b      	str	r3, [r5, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20001d88 	.word	0x20001d88

08008ef4 <__sflush_r>:
 8008ef4:	898a      	ldrh	r2, [r1, #12]
 8008ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	4605      	mov	r5, r0
 8008efc:	0710      	lsls	r0, r2, #28
 8008efe:	460c      	mov	r4, r1
 8008f00:	d458      	bmi.n	8008fb4 <__sflush_r+0xc0>
 8008f02:	684b      	ldr	r3, [r1, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dc05      	bgt.n	8008f14 <__sflush_r+0x20>
 8008f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dc02      	bgt.n	8008f14 <__sflush_r+0x20>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	d0f9      	beq.n	8008f0e <__sflush_r+0x1a>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f20:	682f      	ldr	r7, [r5, #0]
 8008f22:	6a21      	ldr	r1, [r4, #32]
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	d032      	beq.n	8008f8e <__sflush_r+0x9a>
 8008f28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	075a      	lsls	r2, r3, #29
 8008f2e:	d505      	bpl.n	8008f3c <__sflush_r+0x48>
 8008f30:	6863      	ldr	r3, [r4, #4]
 8008f32:	1ac0      	subs	r0, r0, r3
 8008f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f36:	b10b      	cbz	r3, 8008f3c <__sflush_r+0x48>
 8008f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f3a:	1ac0      	subs	r0, r0, r3
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f42:	6a21      	ldr	r1, [r4, #32]
 8008f44:	4628      	mov	r0, r5
 8008f46:	47b0      	blx	r6
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	d106      	bne.n	8008f5c <__sflush_r+0x68>
 8008f4e:	6829      	ldr	r1, [r5, #0]
 8008f50:	291d      	cmp	r1, #29
 8008f52:	d848      	bhi.n	8008fe6 <__sflush_r+0xf2>
 8008f54:	4a29      	ldr	r2, [pc, #164]	; (8008ffc <__sflush_r+0x108>)
 8008f56:	40ca      	lsrs	r2, r1
 8008f58:	07d6      	lsls	r6, r2, #31
 8008f5a:	d544      	bpl.n	8008fe6 <__sflush_r+0xf2>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	6062      	str	r2, [r4, #4]
 8008f60:	6922      	ldr	r2, [r4, #16]
 8008f62:	04d9      	lsls	r1, r3, #19
 8008f64:	6022      	str	r2, [r4, #0]
 8008f66:	d504      	bpl.n	8008f72 <__sflush_r+0x7e>
 8008f68:	1c42      	adds	r2, r0, #1
 8008f6a:	d101      	bne.n	8008f70 <__sflush_r+0x7c>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b903      	cbnz	r3, 8008f72 <__sflush_r+0x7e>
 8008f70:	6560      	str	r0, [r4, #84]	; 0x54
 8008f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f74:	602f      	str	r7, [r5, #0]
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d0c9      	beq.n	8008f0e <__sflush_r+0x1a>
 8008f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f7e:	4299      	cmp	r1, r3
 8008f80:	d002      	beq.n	8008f88 <__sflush_r+0x94>
 8008f82:	4628      	mov	r0, r5
 8008f84:	f000 f8ec 	bl	8009160 <_free_r>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8008f8c:	e7c0      	b.n	8008f10 <__sflush_r+0x1c>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b0      	blx	r6
 8008f94:	1c41      	adds	r1, r0, #1
 8008f96:	d1c8      	bne.n	8008f2a <__sflush_r+0x36>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0c5      	beq.n	8008f2a <__sflush_r+0x36>
 8008f9e:	2b1d      	cmp	r3, #29
 8008fa0:	d001      	beq.n	8008fa6 <__sflush_r+0xb2>
 8008fa2:	2b16      	cmp	r3, #22
 8008fa4:	d101      	bne.n	8008faa <__sflush_r+0xb6>
 8008fa6:	602f      	str	r7, [r5, #0]
 8008fa8:	e7b1      	b.n	8008f0e <__sflush_r+0x1a>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7ad      	b.n	8008f10 <__sflush_r+0x1c>
 8008fb4:	690f      	ldr	r7, [r1, #16]
 8008fb6:	2f00      	cmp	r7, #0
 8008fb8:	d0a9      	beq.n	8008f0e <__sflush_r+0x1a>
 8008fba:	0793      	lsls	r3, r2, #30
 8008fbc:	bf18      	it	ne
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	680e      	ldr	r6, [r1, #0]
 8008fc2:	bf08      	it	eq
 8008fc4:	694b      	ldreq	r3, [r1, #20]
 8008fc6:	eba6 0807 	sub.w	r8, r6, r7
 8008fca:	600f      	str	r7, [r1, #0]
 8008fcc:	608b      	str	r3, [r1, #8]
 8008fce:	f1b8 0f00 	cmp.w	r8, #0
 8008fd2:	dd9c      	ble.n	8008f0e <__sflush_r+0x1a>
 8008fd4:	4643      	mov	r3, r8
 8008fd6:	463a      	mov	r2, r7
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	4628      	mov	r0, r5
 8008fdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fde:	47b0      	blx	r6
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	dc06      	bgt.n	8008ff2 <__sflush_r+0xfe>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e78e      	b.n	8008f10 <__sflush_r+0x1c>
 8008ff2:	4407      	add	r7, r0
 8008ff4:	eba8 0800 	sub.w	r8, r8, r0
 8008ff8:	e7e9      	b.n	8008fce <__sflush_r+0xda>
 8008ffa:	bf00      	nop
 8008ffc:	20400001 	.word	0x20400001

08009000 <_fflush_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	690b      	ldr	r3, [r1, #16]
 8009004:	4605      	mov	r5, r0
 8009006:	460c      	mov	r4, r1
 8009008:	b1db      	cbz	r3, 8009042 <_fflush_r+0x42>
 800900a:	b118      	cbz	r0, 8009014 <_fflush_r+0x14>
 800900c:	6983      	ldr	r3, [r0, #24]
 800900e:	b90b      	cbnz	r3, 8009014 <_fflush_r+0x14>
 8009010:	f7ff fa90 	bl	8008534 <__sinit>
 8009014:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <_fflush_r+0x48>)
 8009016:	429c      	cmp	r4, r3
 8009018:	d109      	bne.n	800902e <_fflush_r+0x2e>
 800901a:	686c      	ldr	r4, [r5, #4]
 800901c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009020:	b17b      	cbz	r3, 8009042 <_fflush_r+0x42>
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800902a:	f7ff bf63 	b.w	8008ef4 <__sflush_r>
 800902e:	4b07      	ldr	r3, [pc, #28]	; (800904c <_fflush_r+0x4c>)
 8009030:	429c      	cmp	r4, r3
 8009032:	d101      	bne.n	8009038 <_fflush_r+0x38>
 8009034:	68ac      	ldr	r4, [r5, #8]
 8009036:	e7f1      	b.n	800901c <_fflush_r+0x1c>
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <_fflush_r+0x50>)
 800903a:	429c      	cmp	r4, r3
 800903c:	bf08      	it	eq
 800903e:	68ec      	ldreq	r4, [r5, #12]
 8009040:	e7ec      	b.n	800901c <_fflush_r+0x1c>
 8009042:	2000      	movs	r0, #0
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	08009328 	.word	0x08009328
 800904c:	08009348 	.word	0x08009348
 8009050:	08009308 	.word	0x08009308

08009054 <_lseek_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4605      	mov	r5, r0
 8009058:	4608      	mov	r0, r1
 800905a:	4611      	mov	r1, r2
 800905c:	2200      	movs	r2, #0
 800905e:	4c05      	ldr	r4, [pc, #20]	; (8009074 <_lseek_r+0x20>)
 8009060:	6022      	str	r2, [r4, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f7f7 fd8d 	bl	8000b82 <_lseek>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_lseek_r+0x1e>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	b103      	cbz	r3, 8009072 <_lseek_r+0x1e>
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20001d88 	.word	0x20001d88

08009078 <__swhatbuf_r>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	460e      	mov	r6, r1
 800907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009080:	b096      	sub	sp, #88	; 0x58
 8009082:	2900      	cmp	r1, #0
 8009084:	4614      	mov	r4, r2
 8009086:	461d      	mov	r5, r3
 8009088:	da07      	bge.n	800909a <__swhatbuf_r+0x22>
 800908a:	2300      	movs	r3, #0
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	89b3      	ldrh	r3, [r6, #12]
 8009090:	061a      	lsls	r2, r3, #24
 8009092:	d410      	bmi.n	80090b6 <__swhatbuf_r+0x3e>
 8009094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009098:	e00e      	b.n	80090b8 <__swhatbuf_r+0x40>
 800909a:	466a      	mov	r2, sp
 800909c:	f000 f8be 	bl	800921c <_fstat_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	dbf2      	blt.n	800908a <__swhatbuf_r+0x12>
 80090a4:	9a01      	ldr	r2, [sp, #4]
 80090a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090ae:	425a      	negs	r2, r3
 80090b0:	415a      	adcs	r2, r3
 80090b2:	602a      	str	r2, [r5, #0]
 80090b4:	e7ee      	b.n	8009094 <__swhatbuf_r+0x1c>
 80090b6:	2340      	movs	r3, #64	; 0x40
 80090b8:	2000      	movs	r0, #0
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	b016      	add	sp, #88	; 0x58
 80090be:	bd70      	pop	{r4, r5, r6, pc}

080090c0 <__smakebuf_r>:
 80090c0:	898b      	ldrh	r3, [r1, #12]
 80090c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090c4:	079d      	lsls	r5, r3, #30
 80090c6:	4606      	mov	r6, r0
 80090c8:	460c      	mov	r4, r1
 80090ca:	d507      	bpl.n	80090dc <__smakebuf_r+0x1c>
 80090cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	2301      	movs	r3, #1
 80090d6:	6163      	str	r3, [r4, #20]
 80090d8:	b002      	add	sp, #8
 80090da:	bd70      	pop	{r4, r5, r6, pc}
 80090dc:	ab01      	add	r3, sp, #4
 80090de:	466a      	mov	r2, sp
 80090e0:	f7ff ffca 	bl	8009078 <__swhatbuf_r>
 80090e4:	9900      	ldr	r1, [sp, #0]
 80090e6:	4605      	mov	r5, r0
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7ff faad 	bl	8008648 <_malloc_r>
 80090ee:	b948      	cbnz	r0, 8009104 <__smakebuf_r+0x44>
 80090f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f4:	059a      	lsls	r2, r3, #22
 80090f6:	d4ef      	bmi.n	80090d8 <__smakebuf_r+0x18>
 80090f8:	f023 0303 	bic.w	r3, r3, #3
 80090fc:	f043 0302 	orr.w	r3, r3, #2
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	e7e3      	b.n	80090cc <__smakebuf_r+0xc>
 8009104:	4b0d      	ldr	r3, [pc, #52]	; (800913c <__smakebuf_r+0x7c>)
 8009106:	62b3      	str	r3, [r6, #40]	; 0x28
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	6020      	str	r0, [r4, #0]
 800910c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	9b00      	ldr	r3, [sp, #0]
 8009114:	6120      	str	r0, [r4, #16]
 8009116:	6163      	str	r3, [r4, #20]
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	b15b      	cbz	r3, 8009134 <__smakebuf_r+0x74>
 800911c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009120:	4630      	mov	r0, r6
 8009122:	f000 f88d 	bl	8009240 <_isatty_r>
 8009126:	b128      	cbz	r0, 8009134 <__smakebuf_r+0x74>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f023 0303 	bic.w	r3, r3, #3
 800912e:	f043 0301 	orr.w	r3, r3, #1
 8009132:	81a3      	strh	r3, [r4, #12]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	431d      	orrs	r5, r3
 8009138:	81a5      	strh	r5, [r4, #12]
 800913a:	e7cd      	b.n	80090d8 <__smakebuf_r+0x18>
 800913c:	080084fd 	.word	0x080084fd

08009140 <memchr>:
 8009140:	b510      	push	{r4, lr}
 8009142:	b2c9      	uxtb	r1, r1
 8009144:	4402      	add	r2, r0
 8009146:	4290      	cmp	r0, r2
 8009148:	4603      	mov	r3, r0
 800914a:	d101      	bne.n	8009150 <memchr+0x10>
 800914c:	2300      	movs	r3, #0
 800914e:	e003      	b.n	8009158 <memchr+0x18>
 8009150:	781c      	ldrb	r4, [r3, #0]
 8009152:	3001      	adds	r0, #1
 8009154:	428c      	cmp	r4, r1
 8009156:	d1f6      	bne.n	8009146 <memchr+0x6>
 8009158:	4618      	mov	r0, r3
 800915a:	bd10      	pop	{r4, pc}

0800915c <__malloc_lock>:
 800915c:	4770      	bx	lr

0800915e <__malloc_unlock>:
 800915e:	4770      	bx	lr

08009160 <_free_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4605      	mov	r5, r0
 8009164:	2900      	cmp	r1, #0
 8009166:	d043      	beq.n	80091f0 <_free_r+0x90>
 8009168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800916c:	1f0c      	subs	r4, r1, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfb8      	it	lt
 8009172:	18e4      	addlt	r4, r4, r3
 8009174:	f7ff fff2 	bl	800915c <__malloc_lock>
 8009178:	4a1e      	ldr	r2, [pc, #120]	; (80091f4 <_free_r+0x94>)
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	4610      	mov	r0, r2
 800917e:	b933      	cbnz	r3, 800918e <_free_r+0x2e>
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	6014      	str	r4, [r2, #0]
 8009184:	4628      	mov	r0, r5
 8009186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800918a:	f7ff bfe8 	b.w	800915e <__malloc_unlock>
 800918e:	42a3      	cmp	r3, r4
 8009190:	d90b      	bls.n	80091aa <_free_r+0x4a>
 8009192:	6821      	ldr	r1, [r4, #0]
 8009194:	1862      	adds	r2, r4, r1
 8009196:	4293      	cmp	r3, r2
 8009198:	bf01      	itttt	eq
 800919a:	681a      	ldreq	r2, [r3, #0]
 800919c:	685b      	ldreq	r3, [r3, #4]
 800919e:	1852      	addeq	r2, r2, r1
 80091a0:	6022      	streq	r2, [r4, #0]
 80091a2:	6063      	str	r3, [r4, #4]
 80091a4:	6004      	str	r4, [r0, #0]
 80091a6:	e7ed      	b.n	8009184 <_free_r+0x24>
 80091a8:	4613      	mov	r3, r2
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	b10a      	cbz	r2, 80091b2 <_free_r+0x52>
 80091ae:	42a2      	cmp	r2, r4
 80091b0:	d9fa      	bls.n	80091a8 <_free_r+0x48>
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	1858      	adds	r0, r3, r1
 80091b6:	42a0      	cmp	r0, r4
 80091b8:	d10b      	bne.n	80091d2 <_free_r+0x72>
 80091ba:	6820      	ldr	r0, [r4, #0]
 80091bc:	4401      	add	r1, r0
 80091be:	1858      	adds	r0, r3, r1
 80091c0:	4282      	cmp	r2, r0
 80091c2:	6019      	str	r1, [r3, #0]
 80091c4:	d1de      	bne.n	8009184 <_free_r+0x24>
 80091c6:	6810      	ldr	r0, [r2, #0]
 80091c8:	6852      	ldr	r2, [r2, #4]
 80091ca:	4401      	add	r1, r0
 80091cc:	6019      	str	r1, [r3, #0]
 80091ce:	605a      	str	r2, [r3, #4]
 80091d0:	e7d8      	b.n	8009184 <_free_r+0x24>
 80091d2:	d902      	bls.n	80091da <_free_r+0x7a>
 80091d4:	230c      	movs	r3, #12
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	e7d4      	b.n	8009184 <_free_r+0x24>
 80091da:	6820      	ldr	r0, [r4, #0]
 80091dc:	1821      	adds	r1, r4, r0
 80091de:	428a      	cmp	r2, r1
 80091e0:	bf01      	itttt	eq
 80091e2:	6811      	ldreq	r1, [r2, #0]
 80091e4:	6852      	ldreq	r2, [r2, #4]
 80091e6:	1809      	addeq	r1, r1, r0
 80091e8:	6021      	streq	r1, [r4, #0]
 80091ea:	6062      	str	r2, [r4, #4]
 80091ec:	605c      	str	r4, [r3, #4]
 80091ee:	e7c9      	b.n	8009184 <_free_r+0x24>
 80091f0:	bd38      	pop	{r3, r4, r5, pc}
 80091f2:	bf00      	nop
 80091f4:	20000440 	.word	0x20000440

080091f8 <_read_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4605      	mov	r5, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	2200      	movs	r2, #0
 8009202:	4c05      	ldr	r4, [pc, #20]	; (8009218 <_read_r+0x20>)
 8009204:	6022      	str	r2, [r4, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f7f7 fc5e 	bl	8000ac8 <_read>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_read_r+0x1e>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	b103      	cbz	r3, 8009216 <_read_r+0x1e>
 8009214:	602b      	str	r3, [r5, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20001d88 	.word	0x20001d88

0800921c <_fstat_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	2300      	movs	r3, #0
 8009220:	4c06      	ldr	r4, [pc, #24]	; (800923c <_fstat_r+0x20>)
 8009222:	4605      	mov	r5, r0
 8009224:	4608      	mov	r0, r1
 8009226:	4611      	mov	r1, r2
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	f7f7 fc91 	bl	8000b50 <_fstat>
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	d102      	bne.n	8009238 <_fstat_r+0x1c>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	b103      	cbz	r3, 8009238 <_fstat_r+0x1c>
 8009236:	602b      	str	r3, [r5, #0]
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	bf00      	nop
 800923c:	20001d88 	.word	0x20001d88

08009240 <_isatty_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	2300      	movs	r3, #0
 8009244:	4c05      	ldr	r4, [pc, #20]	; (800925c <_isatty_r+0x1c>)
 8009246:	4605      	mov	r5, r0
 8009248:	4608      	mov	r0, r1
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	f7f7 fc8f 	bl	8000b6e <_isatty>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_isatty_r+0x1a>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	b103      	cbz	r3, 800925a <_isatty_r+0x1a>
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20001d88 	.word	0x20001d88

08009260 <_init>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	bf00      	nop
 8009264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009266:	bc08      	pop	{r3}
 8009268:	469e      	mov	lr, r3
 800926a:	4770      	bx	lr

0800926c <_fini>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr
