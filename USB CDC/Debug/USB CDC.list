
USB CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8ac  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800ea98  0800ea98  0001ea98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee10  0800ee10  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee10  0800ee10  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee10  0800ee10  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee10  0800ee10  0001ee10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee14  0800ee14  0001ee14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800ee18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  20000354  0800f16c  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016e0  0800f16c  000216e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023835  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042d7  00000000  00000000  00043bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  00047e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  00049658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fe8a  00000000  00000000  0004ac70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015ae7  00000000  00000000  0006aafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6762  00000000  00000000  000805e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007318  00000000  00000000  00126dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000354 	.word	0x20000354
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ea7c 	.word	0x0800ea7c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000358 	.word	0x20000358
 8000224:	0800ea7c 	.word	0x0800ea7c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	d1ed      	bne.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__gesf2>:
 8000e5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e60:	e006      	b.n	8000e70 <__cmpsf2+0x4>
 8000e62:	bf00      	nop

08000e64 <__lesf2>:
 8000e64:	f04f 0c01 	mov.w	ip, #1
 8000e68:	e002      	b.n	8000e70 <__cmpsf2+0x4>
 8000e6a:	bf00      	nop

08000e6c <__cmpsf2>:
 8000e6c:	f04f 0c01 	mov.w	ip, #1
 8000e70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e80:	bf18      	it	ne
 8000e82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e86:	d011      	beq.n	8000eac <__cmpsf2+0x40>
 8000e88:	b001      	add	sp, #4
 8000e8a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8e:	bf18      	it	ne
 8000e90:	ea90 0f01 	teqne	r0, r1
 8000e94:	bf58      	it	pl
 8000e96:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e9a:	bf88      	it	hi
 8000e9c:	17c8      	asrhi	r0, r1, #31
 8000e9e:	bf38      	it	cc
 8000ea0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea4:	bf18      	it	ne
 8000ea6:	f040 0001 	orrne.w	r0, r0, #1
 8000eaa:	4770      	bx	lr
 8000eac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb0:	d102      	bne.n	8000eb8 <__cmpsf2+0x4c>
 8000eb2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb6:	d105      	bne.n	8000ec4 <__cmpsf2+0x58>
 8000eb8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ebc:	d1e4      	bne.n	8000e88 <__cmpsf2+0x1c>
 8000ebe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ec2:	d0e1      	beq.n	8000e88 <__cmpsf2+0x1c>
 8000ec4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <__aeabi_cfrcmple>:
 8000ecc:	4684      	mov	ip, r0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	4661      	mov	r1, ip
 8000ed2:	e7ff      	b.n	8000ed4 <__aeabi_cfcmpeq>

08000ed4 <__aeabi_cfcmpeq>:
 8000ed4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed6:	f7ff ffc9 	bl	8000e6c <__cmpsf2>
 8000eda:	2800      	cmp	r0, #0
 8000edc:	bf48      	it	mi
 8000ede:	f110 0f00 	cmnmi.w	r0, #0
 8000ee2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee4 <__aeabi_fcmpeq>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff fff4 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000eec:	bf0c      	ite	eq
 8000eee:	2001      	moveq	r0, #1
 8000ef0:	2000      	movne	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmplt>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffea 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000f00:	bf34      	ite	cc
 8000f02:	2001      	movcc	r0, #1
 8000f04:	2000      	movcs	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmple>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffe0 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpge>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffd2 	bl	8000ecc <__aeabi_cfrcmple>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpgt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffc8 	bl	8000ecc <__aeabi_cfrcmple>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_f2iz>:
 8000f48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f50:	d30f      	bcc.n	8000f72 <__aeabi_f2iz+0x2a>
 8000f52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5a:	d90d      	bls.n	8000f78 <__aeabi_f2iz+0x30>
 8000f5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f64:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f68:	fa23 f002 	lsr.w	r0, r3, r2
 8000f6c:	bf18      	it	ne
 8000f6e:	4240      	negne	r0, r0
 8000f70:	4770      	bx	lr
 8000f72:	f04f 0000 	mov.w	r0, #0
 8000f76:	4770      	bx	lr
 8000f78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f7c:	d101      	bne.n	8000f82 <__aeabi_f2iz+0x3a>
 8000f7e:	0242      	lsls	r2, r0, #9
 8000f80:	d105      	bne.n	8000f8e <__aeabi_f2iz+0x46>
 8000f82:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f86:	bf08      	it	eq
 8000f88:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f8c:	4770      	bx	lr
 8000f8e:	f04f 0000 	mov.w	r0, #0
 8000f92:	4770      	bx	lr

08000f94 <begin>:
	BMI160_INT2_FIFO_FULL_MASK,
	BMI160_INT2_FIFO_WM_MASK
};

//上层应用
void begin(TYPE v, uint8_t addr){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
    Obmi160=(struct bmi160Dev *)malloc(sizeof(struct bmi160Dev));
 8000fa4:	2028      	movs	r0, #40	; 0x28
 8000fa6:	f00b fa3d 	bl	800c424 <malloc>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <begin+0x84>)
 8000fb0:	601a      	str	r2, [r3, #0]
    Oaccel= (struct bmi160SensorData*)malloc(sizeof(struct bmi160SensorData));
 8000fb2:	200c      	movs	r0, #12
 8000fb4:	f00b fa36 	bl	800c424 <malloc>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <begin+0x88>)
 8000fbe:	601a      	str	r2, [r3, #0]
    Ogyro = (struct bmi160SensorData*)malloc(sizeof(struct bmi160SensorData));
 8000fc0:	200c      	movs	r0, #12
 8000fc2:	f00b fa2f 	bl	800c424 <malloc>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <begin+0x8c>)
 8000fcc:	601a      	str	r2, [r3, #0]
	Obmi160->id = addr;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <begin+0x84>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	79ba      	ldrb	r2, [r7, #6]
 8000fd4:	705a      	strb	r2, [r3, #1]
	Obmi160->interface = BMI160_I2C_INTF;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <begin+0x84>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	709a      	strb	r2, [r3, #2]
	I2cInit(Obmi160);
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <begin+0x84>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f820 	bl	8001028 <I2cInit>
	if(v == eStep){
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d110      	bne.n	8001010 <begin+0x7c>
        setInt(2);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f000 f8fc 	bl	80011ec <setInt>
        setStepCounter(1,Obmi160);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <begin+0x84>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 fc5c 	bl	80018b8 <setStepCounter>
        setStepPowerMode(stepNormalPowerMode,Obmi160);
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <begin+0x90>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <begin+0x84>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f000 fc96 	bl	800193c <setStepPowerMode>
	}
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000600 	.word	0x20000600
 800101c:	200005fc 	.word	0x200005fc
 8001020:	200005f8 	.word	0x200005f8
 8001024:	20000370 	.word	0x20000370

08001028 <I2cInit>:

int8_t I2cInit(struct bmi160Dev *dev){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  int8_t rslt=BMI160_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
  uint8_t chip_id=0;
 8001034:	2300      	movs	r3, #0
 8001036:	73bb      	strb	r3, [r7, #14]
  uint8_t data=0;
 8001038:	2300      	movs	r3, #0
 800103a:	737b      	strb	r3, [r7, #13]
  if (dev==NULL){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <I2cInit+0x20>
    return BMI160_E_NULL_PTR;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e039      	b.n	80010bc <I2cInit+0x94>
  }
  if (dev->interface == BMI160_SPI_INTF){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	789b      	ldrb	r3, [r3, #2]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <I2cInit+0x3a>
    rslt = getRegs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8001050:	f107 010d 	add.w	r1, r7, #13
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	207f      	movs	r0, #127	; 0x7f
 800105a:	f001 fd09 	bl	8002a70 <getRegs>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
  }
  if (rslt == BMI160_OK){
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d126      	bne.n	80010b8 <I2cInit+0x90>
    rslt = getRegs(BMI160_CHIP_ID_ADDR, &chip_id, 1, dev);
 800106a:	f107 010e 	add.w	r1, r7, #14
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	2000      	movs	r0, #0
 8001074:	f001 fcfc 	bl	8002a70 <getRegs>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI160_OK)&&(chip_id==BMI160_CHIP_ID)){
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d117      	bne.n	80010b4 <I2cInit+0x8c>
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	2bd1      	cmp	r3, #209	; 0xd1
 8001088:	d114      	bne.n	80010b4 <I2cInit+0x8c>
      dev->any_sig_sel = eBmi160BothAnySigMotionDisabled;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	70da      	strb	r2, [r3, #3]
      dev->chipId = chip_id;
 8001090:	7bba      	ldrb	r2, [r7, #14]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	701a      	strb	r2, [r3, #0]
      rslt = softReset(dev);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f858 	bl	800114c <softReset>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
      if (rslt==BMI160_OK){
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d107      	bne.n	80010b8 <I2cInit+0x90>
        rslt = setSensConf(dev);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f80b 	bl	80010c4 <setSensConf>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
      if (rslt==BMI160_OK){
 80010b2:	e001      	b.n	80010b8 <I2cInit+0x90>
      }
    }else{
      rslt = BMI160_E_DEV_NOT_FOUND;
 80010b4:	23fd      	movs	r3, #253	; 0xfd
 80010b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 80010b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <setSensConf>:

int8_t setSensConf(struct bmi160Dev *dev){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMI160_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  dev->accelCfg.odr = BMI160_ACCEL_ODR_1600HZ;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	220c      	movs	r2, #12
 80010d4:	715a      	strb	r2, [r3, #5]
  dev->accelCfg.range = BMI160_ACCEL_RANGE_2G;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2203      	movs	r2, #3
 80010da:	719a      	strb	r2, [r3, #6]
  dev->accelCfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2202      	movs	r2, #2
 80010e0:	71da      	strb	r2, [r3, #7]

  dev->accelCfg.power = BMI160_ACCEL_NORMAL_MODE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2211      	movs	r2, #17
 80010e6:	711a      	strb	r2, [r3, #4]

  dev->gyroCfg.odr = BMI160_GYRO_ODR_3200HZ;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	220d      	movs	r2, #13
 80010ec:	735a      	strb	r2, [r3, #13]
  dev->gyroCfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	739a      	strb	r2, [r3, #14]
  dev->gyroCfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	73da      	strb	r2, [r3, #15]

  dev->gyroCfg.power = BMI160_GYRO_NORMAL_MODE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2215      	movs	r2, #21
 80010fe:	731a      	strb	r2, [r3, #12]


  rslt = setAccelConf(dev);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fdc7 	bl	8001c94 <setAccelConf>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d116      	bne.n	8001140 <setSensConf+0x7c>
    rslt = setGyroConf(dev);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fc80 	bl	8001a18 <setGyroConf>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10d      	bne.n	8001140 <setSensConf+0x7c>
      /* write power mode for accel and gyro */
      rslt = setPowerMode(dev);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 febc 	bl	8001ea2 <setPowerMode>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <setSensConf+0x7c>
        rslt = checkInvalidSettg(dev);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fd77 	bl	8001c2a <checkInvalidSettg>
 800113c:	4603      	mov	r3, r0
 800113e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return rslt;
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <softReset>:

int8_t softReset(struct bmi160Dev *dev){
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  int8_t rslt=BMI160_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
  uint8_t data = BMI160_SOFT_RESET_CMD;
 8001158:	23b6      	movs	r3, #182	; 0xb6
 800115a:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <softReset+0x1a>
    rslt = BMI160_E_NULL_PTR;
 8001162:	23ff      	movs	r3, #255	; 0xff
 8001164:	73fb      	strb	r3, [r7, #15]
  }
  rslt = setRegs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001166:	f107 010e 	add.w	r1, r7, #14
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	207e      	movs	r0, #126	; 0x7e
 8001170:	f001 fcd4 	bl	8002b1c <setRegs>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
  //delay(BMI160_SOFT_RESET_DELAY_MS);
  HAL_Delay(BMI160_SOFT_RESET_DELAY_MS);
 8001178:	200f      	movs	r0, #15
 800117a:	f002 fc07 	bl	800398c <HAL_Delay>
  if (rslt == BMI160_OK){
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <softReset+0x40>
    defaultParamSettg(dev);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f806 	bl	8001198 <defaultParamSettg>
  }
  return rslt;
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <defaultParamSettg>:

void defaultParamSettg(struct bmi160Dev *dev){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Initializing accel and gyro params with
  * default values */
  dev->accelCfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	71da      	strb	r2, [r3, #7]
  dev->accelCfg.odr = BMI160_ACCEL_ODR_100HZ;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2208      	movs	r2, #8
 80011aa:	715a      	strb	r2, [r3, #5]
  dev->accelCfg.power = BMI160_ACCEL_SUSPEND_MODE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2210      	movs	r2, #16
 80011b0:	711a      	strb	r2, [r3, #4]
  dev->accelCfg.range = BMI160_ACCEL_RANGE_2G;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	719a      	strb	r2, [r3, #6]
  dev->gyroCfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2202      	movs	r2, #2
 80011bc:	73da      	strb	r2, [r3, #15]
  dev->gyroCfg.odr = BMI160_GYRO_ODR_100HZ;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2208      	movs	r2, #8
 80011c2:	735a      	strb	r2, [r3, #13]
  dev->gyroCfg.power = BMI160_GYRO_SUSPEND_MODE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2214      	movs	r2, #20
 80011c8:	731a      	strb	r2, [r3, #12]
  dev->gyroCfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	739a      	strb	r2, [r3, #14]

  /* To maintain the previous state of accel configuration */
  dev->prevAccelCfg = dev->accelCfg;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6852      	ldr	r2, [r2, #4]
 80011d6:	609a      	str	r2, [r3, #8]
  /* To maintain the previous state of gyro configuration */
  dev->prevGyroCfg = dev->gyroCfg;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68d2      	ldr	r2, [r2, #12]
 80011de:	611a      	str	r2, [r3, #16]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <setInt>:

int8_t setInt(int intNum){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  int8_t rslt=BMI160_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	75fb      	strb	r3, [r7, #23]
  struct bmi160IntSettg intConfig;
  if (intNum == 1){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <setInt+0x18>
    intConfig.intChannel = BMI160_INT_CHANNEL_1;
 80011fe:	2301      	movs	r3, #1
 8001200:	733b      	strb	r3, [r7, #12]
 8001202:	e008      	b.n	8001216 <setInt+0x2a>
  }else if(intNum == 2){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d102      	bne.n	8001210 <setInt+0x24>
    intConfig.intChannel = BMI160_INT_CHANNEL_2;
 800120a:	2302      	movs	r3, #2
 800120c:	733b      	strb	r3, [r7, #12]
 800120e:	e002      	b.n	8001216 <setInt+0x2a>
  }else{
    return BMI160_E_NULL_PTR;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	e02d      	b.n	8001272 <setInt+0x86>
  }
  /* Select the Interrupt type */
  intConfig.intType = BMI160_STEP_DETECT_INT;// Choosing Step Detector interrupt
 8001216:	2302      	movs	r3, #2
 8001218:	737b      	strb	r3, [r7, #13]
  /* Select the interrupt channel/pin settings */
  intConfig.intPinSettg.outputEn = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.outputMode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	f36f 0341 	bfc	r3, #1, #1
 8001228:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.outputType = BMI160_ENABLE;// Choosing active High output
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.edgeCtrl = BMI160_ENABLE;// Choosing edge triggered output
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.inputEn = BMI160_DISABLE;// Disabling interrupt pin to act as input
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f36f 1304 	bfc	r3, #4, #1
 8001240:	73bb      	strb	r3, [r7, #14]
  intConfig.intPinSettg.latchDur =BMI160_LATCH_DUR_NONE;// non-latched output
 8001242:	89fb      	ldrh	r3, [r7, #14]
 8001244:	f36f 1348 	bfc	r3, #5, #4
 8001248:	81fb      	strh	r3, [r7, #14]

  /* Select the Step Detector interrupt parameters, Kindly use the recommended settings for step detector */
  intConfig.intTypeCfg.accStepDetectInt.stepDetectorMode = BMI160_STEP_DETECT_NORMAL;
 800124a:	7c3b      	ldrb	r3, [r7, #16]
 800124c:	f36f 1387 	bfc	r3, #6, #2
 8001250:	743b      	strb	r3, [r7, #16]
  intConfig.intTypeCfg.accStepDetectInt.stepDetectorEn = BMI160_ENABLE;// 1-enable, 0-disable the step detector
 8001252:	7c3b      	ldrb	r3, [r7, #16]
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	743b      	strb	r3, [r7, #16]
  rslt =setIntConfig(&intConfig, Obmi160);
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <setInt+0x90>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f80b 	bl	8001280 <setIntConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
  return rslt;
 800126e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000600 	.word	0x20000600

08001280 <setIntConfig>:

int8_t setIntConfig(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  int8_t rslt = BMI160_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  switch (intConfig->intType) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	2b0c      	cmp	r3, #12
 8001294:	d823      	bhi.n	80012de <setIntConfig+0x5e>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <setIntConfig+0x1c>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	080012df 	.word	0x080012df
 80012a0:	080012df 	.word	0x080012df
 80012a4:	080012d1 	.word	0x080012d1
 80012a8:	080012df 	.word	0x080012df
 80012ac:	080012df 	.word	0x080012df
 80012b0:	080012df 	.word	0x080012df
 80012b4:	080012df 	.word	0x080012df
 80012b8:	080012df 	.word	0x080012df
 80012bc:	080012df 	.word	0x080012df
 80012c0:	080012df 	.word	0x080012df
 80012c4:	080012df 	.word	0x080012df
 80012c8:	080012df 	.word	0x080012df
 80012cc:	080012df 	.word	0x080012df
     /* Double tap and single tap Interrupt */
    //rslt = set_accel_tap_int(intConfig, dev);
    break;
  case BMI160_STEP_DETECT_INT:
    /* Step detector interrupt */
    rslt = setAccelStepDetectInt(intConfig, dev);
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f80a 	bl	80012ec <setAccelStepDetectInt>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
    break;
 80012dc:	e000      	b.n	80012e0 <setIntConfig+0x60>
  case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:
     /* Fifo water-mark interrupt */
    //rslt = set_fifo_watermark_int(intConfig, dev);
    break;
  default:
    break;
 80012de:	bf00      	nop
  }
  return rslt;
 80012e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <setAccelStepDetectInt>:

int8_t setAccelStepDetectInt(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  int8_t rslt = BMI160_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  /* Null-pointer check */
  if (dev == NULL){
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <setAccelStepDetectInt+0x18>
    rslt = BMI160_E_NULL_PTR;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	73fb      	strb	r3, [r7, #15]
  }
  if ((rslt != BMI160_OK) || (intConfig == NULL)) {
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <setAccelStepDetectInt+0x26>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <setAccelStepDetectInt+0x2c>
    rslt = BMI160_E_NULL_PTR;
 8001312:	23ff      	movs	r3, #255	; 0xff
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e026      	b.n	8001366 <setAccelStepDetectInt+0x7a>
  } else {
    /* updating the interrupt structure to local structure */
    struct bmi160AccStepDetectIntCfg *stepDetectIntCfg =
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	60bb      	str	r3, [r7, #8]
                &(intConfig->intTypeCfg.accStepDetectInt);
    rslt = enableStepDetectInt(stepDetectIntCfg, dev);
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fa90 	bl	8001846 <enableStepDetectInt>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d119      	bne.n	8001366 <setAccelStepDetectInt+0x7a>
      /* Configure Interrupt pins */
      rslt = setIntrPinConfig(intConfig, dev);
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f939 	bl	80015ac <setIntrPinConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK) {
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10f      	bne.n	8001366 <setAccelStepDetectInt+0x7a>
        rslt = mapFeatureInterrupt(intConfig, dev);
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f813 	bl	8001374 <mapFeatureInterrupt>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK){
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <setAccelStepDetectInt+0x7a>
          rslt = configStepDetect(stepDetectIntCfg, dev);
 800135a:	6839      	ldr	r1, [r7, #0]
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f000 f89b 	bl	8001498 <configStepDetect>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
  return rslt;
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <mapFeatureInterrupt>:

int8_t mapFeatureInterrupt(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t data[3] = {0, 0, 0};
 800137e:	2300      	movs	r3, #0
 8001380:	733b      	strb	r3, [r7, #12]
 8001382:	2300      	movs	r3, #0
 8001384:	737b      	strb	r3, [r7, #13]
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]
  uint8_t temp[3] = {0, 0, 0};
 800138a:	2300      	movs	r3, #0
 800138c:	723b      	strb	r3, [r7, #8]
 800138e:	2300      	movs	r3, #0
 8001390:	727b      	strb	r3, [r7, #9]
 8001392:	2300      	movs	r3, #0
 8001394:	72bb      	strb	r3, [r7, #10]
  rslt = getRegs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8001396:	f107 010c 	add.w	r1, r7, #12
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2203      	movs	r2, #3
 800139e:	2055      	movs	r0, #85	; 0x55
 80013a0:	f001 fb66 	bl	8002a70 <getRegs>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d16a      	bne.n	8001486 <mapFeatureInterrupt+0x112>
    temp[0] = data[0] & ~int_mask_lookup_table[intConfig->intType];
 80013b0:	7b3b      	ldrb	r3, [r7, #12]
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <mapFeatureInterrupt+0x120>)
 80013bc:	5c5b      	ldrb	r3, [r3, r1]
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	4013      	ands	r3, r2
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	723b      	strb	r3, [r7, #8]
    temp[2] = data[2] & ~int_mask_lookup_table[intConfig->intType];
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <mapFeatureInterrupt+0x120>)
 80013d8:	5c5b      	ldrb	r3, [r3, r1]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	72bb      	strb	r3, [r7, #10]
    switch (intConfig->intChannel) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d83b      	bhi.n	8001468 <mapFeatureInterrupt+0xf4>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <mapFeatureInterrupt+0x84>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001409 	.word	0x08001409
 80013fc:	08001413 	.word	0x08001413
 8001400:	0800142b 	.word	0x0800142b
 8001404:	08001443 	.word	0x08001443
    case BMI160_INT_CHANNEL_NONE:
      data[0] = temp[0];
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	733b      	strb	r3, [r7, #12]
      data[2] = temp[2];
 800140c:	7abb      	ldrb	r3, [r7, #10]
 800140e:	73bb      	strb	r3, [r7, #14]
      break;
 8001410:	e02c      	b.n	800146c <mapFeatureInterrupt+0xf8>
    case BMI160_INT_CHANNEL_1:
      data[0] = temp[0] | int_mask_lookup_table[intConfig->intType];
 8001412:	7a3a      	ldrb	r2, [r7, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	785b      	ldrb	r3, [r3, #1]
 8001418:	4619      	mov	r1, r3
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <mapFeatureInterrupt+0x120>)
 800141c:	5c5b      	ldrb	r3, [r3, r1]
 800141e:	4313      	orrs	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	733b      	strb	r3, [r7, #12]
      data[2] = temp[2];
 8001424:	7abb      	ldrb	r3, [r7, #10]
 8001426:	73bb      	strb	r3, [r7, #14]
      break;
 8001428:	e020      	b.n	800146c <mapFeatureInterrupt+0xf8>
    case BMI160_INT_CHANNEL_2:
      data[2] = temp[2] | int_mask_lookup_table[intConfig->intType];
 800142a:	7aba      	ldrb	r2, [r7, #10]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	4619      	mov	r1, r3
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <mapFeatureInterrupt+0x120>)
 8001434:	5c5b      	ldrb	r3, [r3, r1]
 8001436:	4313      	orrs	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	73bb      	strb	r3, [r7, #14]
      data[0] = temp[0];
 800143c:	7a3b      	ldrb	r3, [r7, #8]
 800143e:	733b      	strb	r3, [r7, #12]
      break;
 8001440:	e014      	b.n	800146c <mapFeatureInterrupt+0xf8>
    case BMI160_INT_CHANNEL_BOTH:
      data[0] = temp[0] | int_mask_lookup_table[intConfig->intType];
 8001442:	7a3a      	ldrb	r2, [r7, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	4619      	mov	r1, r3
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <mapFeatureInterrupt+0x120>)
 800144c:	5c5b      	ldrb	r3, [r3, r1]
 800144e:	4313      	orrs	r3, r2
 8001450:	b2db      	uxtb	r3, r3
 8001452:	733b      	strb	r3, [r7, #12]
      data[2] = temp[2] | int_mask_lookup_table[intConfig->intType];
 8001454:	7aba      	ldrb	r2, [r7, #10]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	4619      	mov	r1, r3
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <mapFeatureInterrupt+0x120>)
 800145e:	5c5b      	ldrb	r3, [r3, r1]
 8001460:	4313      	orrs	r3, r2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	73bb      	strb	r3, [r7, #14]
      break;
 8001466:	e001      	b.n	800146c <mapFeatureInterrupt+0xf8>
    default:
      rslt = BMI160_E_OUT_OF_RANGE;
 8001468:	23fc      	movs	r3, #252	; 0xfc
 800146a:	73fb      	strb	r3, [r7, #15]
    }
    if (rslt == BMI160_OK)
 800146c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <mapFeatureInterrupt+0x112>
      rslt = setRegs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8001474:	f107 010c 	add.w	r1, r7, #12
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2203      	movs	r2, #3
 800147c:	2055      	movs	r0, #85	; 0x55
 800147e:	f001 fb4d 	bl	8002b1c <setRegs>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	0800eb24 	.word	0x0800eb24

08001498 <configStepDetect>:

int8_t configStepDetect(struct bmi160AccStepDetectIntCfg *stepDetectIntCfg, struct bmi160Dev *dev){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
  uint8_t data_array[2] = {0};
 80014a6:	2300      	movs	r3, #0
 80014a8:	81bb      	strh	r3, [r7, #12]


  if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_NORMAL) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d104      	bne.n	80014c2 <configStepDetect+0x2a>
    /* Normal mode setting */
    data_array[0] = 0x15;
 80014b8:	2315      	movs	r3, #21
 80014ba:	733b      	strb	r3, [r7, #12]
    data_array[1] = 0x03;
 80014bc:	2303      	movs	r3, #3
 80014be:	737b      	strb	r3, [r7, #13]
 80014c0:	e065      	b.n	800158e <configStepDetect+0xf6>
  } else if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_SENSITIVE) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b40      	cmp	r3, #64	; 0x40
 80014ce:	d104      	bne.n	80014da <configStepDetect+0x42>
    /* Sensitive mode setting */
    data_array[0] = 0x2D;
 80014d0:	232d      	movs	r3, #45	; 0x2d
 80014d2:	733b      	strb	r3, [r7, #12]
    data_array[1] = 0x00;
 80014d4:	2300      	movs	r3, #0
 80014d6:	737b      	strb	r3, [r7, #13]
 80014d8:	e059      	b.n	800158e <configStepDetect+0xf6>
  } else if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_ROBUST) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b80      	cmp	r3, #128	; 0x80
 80014e6:	d104      	bne.n	80014f2 <configStepDetect+0x5a>
    /* Robust mode setting */
    data_array[0] = 0x1D;
 80014e8:	231d      	movs	r3, #29
 80014ea:	733b      	strb	r3, [r7, #12]
    data_array[1] = 0x07;
 80014ec:	2307      	movs	r3, #7
 80014ee:	737b      	strb	r3, [r7, #13]
 80014f0:	e04d      	b.n	800158e <configStepDetect+0xf6>
  } else if (stepDetectIntCfg->stepDetectorMode == BMI160_STEP_DETECT_USER_DEFINE) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2bc0      	cmp	r3, #192	; 0xc0
 80014fe:	d146      	bne.n	800158e <configStepDetect+0xf6>
    /* Non recommended User defined setting */
    /* Configuring STEP_CONFIG register */
    rslt = getRegs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8001500:	f107 010c 	add.w	r1, r7, #12
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2202      	movs	r2, #2
 8001508:	207a      	movs	r0, #122	; 0x7a
 800150a:	f001 fab1 	bl	8002a70 <getRegs>
 800150e:	4603      	mov	r3, r0
 8001510:	73bb      	strb	r3, [r7, #14]

    if (rslt == BMI160_OK) {
 8001512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d139      	bne.n	800158e <configStepDetect+0xf6>
      temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 800151a:	7b3b      	ldrb	r3, [r7, #12]
 800151c:	f023 0318 	bic.w	r3, r3, #24
 8001520:	73fb      	strb	r3, [r7, #15]
      /* Adding minThreshold */
      data_array[0] = temp | ((stepDetectIntCfg->minThreshold << 3)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	00db      	lsls	r3, r3, #3
          & BMI160_STEP_DETECT_MIN_THRES_MASK);
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f003 0318 	and.w	r3, r3, #24
 8001534:	b25a      	sxtb	r2, r3
      data_array[0] = temp | ((stepDetectIntCfg->minThreshold << 3)
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4313      	orrs	r3, r2
 800153c:	b25b      	sxtb	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	733b      	strb	r3, [r7, #12]

      temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8001542:	7b3b      	ldrb	r3, [r7, #12]
 8001544:	f023 0307 	bic.w	r3, r3, #7
 8001548:	73fb      	strb	r3, [r7, #15]
      /* Adding steptimeMin */
      data_array[0] = temp | ((stepDetectIntCfg->steptimeMin)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	b25b      	sxtb	r3, r3
          & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	b25a      	sxtb	r2, r3
      data_array[0] = temp | ((stepDetectIntCfg->steptimeMin)
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4313      	orrs	r3, r2
 8001562:	b25b      	sxtb	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	733b      	strb	r3, [r7, #12]

      temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	73fb      	strb	r3, [r7, #15]
      /* Adding steptimeMin */
      data_array[1] = temp | ((stepDetectIntCfg->stepMinBuf) & BMI160_STEP_MIN_BUF_MASK);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	b25b      	sxtb	r3, r3
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	b25a      	sxtb	r2, r3
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4313      	orrs	r3, r2
 8001588:	b25b      	sxtb	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	737b      	strb	r3, [r7, #13]

    }
  }

  /* Write data to STEP_CONFIG register */
  rslt = setRegs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 800158e:	f107 010c 	add.w	r1, r7, #12
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2202      	movs	r2, #2
 8001596:	207a      	movs	r0, #122	; 0x7a
 8001598:	f001 fac0 	bl	8002b1c <setRegs>
 800159c:	4603      	mov	r3, r0
 800159e:	73bb      	strb	r3, [r7, #14]

  return rslt;
 80015a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <setIntrPinConfig>:

int8_t setIntrPinConfig(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  /* configure the behavioural settings of interrupt pin */
  rslt = configIntOutCtrl(intConfig, dev);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f87a 	bl	80016b2 <configIntOutCtrl>
 80015be:	4603      	mov	r3, r0
 80015c0:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK)
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <setIntrPinConfig+0x2a>
    rslt = configIntLatch(intConfig, dev);
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f808 	bl	80015e2 <configIntLatch>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
  return rslt;
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <configIntLatch>:

int8_t configIntLatch(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	75bb      	strb	r3, [r7, #22]
  uint8_t data = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  /* Configuration of latch on pins INT1 and INT2 are done in
   * BMI160_INT_LATCH_ADDR register*/
  rslt = getRegs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 80015f4:	f107 010f 	add.w	r1, r7, #15
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2201      	movs	r2, #1
 80015fc:	2054      	movs	r0, #84	; 0x54
 80015fe:	f001 fa37 	bl	8002a70 <getRegs>
 8001602:	4603      	mov	r3, r0
 8001604:	75fb      	strb	r3, [r7, #23]
  if (rslt == BMI160_OK) {
 8001606:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d14b      	bne.n	80016a6 <configIntLatch+0xc4>
    /* updating the interrupt pin structure to local structure */
    const struct bmi160IntPinSettg *intr_pin_sett = &(intConfig->intPinSettg);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3302      	adds	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
    if (intConfig->intChannel == BMI160_INT_CHANNEL_1) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d114      	bne.n	8001646 <configIntLatch+0x64>
      /* Configuring channel 1 */
      /* Input enable */
      temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f023 0310 	bic.w	r3, r3, #16
 8001622:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->inputEn << 4) & BMI160_INT1_INPUT_EN_MASK);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	b25a      	sxtb	r2, r3
 8001638:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800163c:	4313      	orrs	r3, r2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e013      	b.n	800166e <configIntLatch+0x8c>
    } else {
      /* Configuring channel 2 */
      /* Input enable */
      temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0320 	bic.w	r3, r3, #32
 800164c:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->inputEn << 5) & BMI160_INT2_INPUT_EN_MASK);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	b25a      	sxtb	r2, r3
 8001662:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001666:	4313      	orrs	r3, r2
 8001668:	b25b      	sxtb	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	73fb      	strb	r3, [r7, #15]
    }
    /* In case of latch interrupt,update the latch duration */
    /* Latching holds the interrupt for the amount of latch
     * duration time */
    temp = data & ~BMI160_INT_LATCH_MASK;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	f023 030f 	bic.w	r3, r3, #15
 8001674:	75bb      	strb	r3, [r7, #22]
    data = temp | (intr_pin_sett->latchDur & BMI160_INT_LATCH_MASK);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800167e:	b2db      	uxtb	r3, r3
 8001680:	b25b      	sxtb	r3, r3
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	b25a      	sxtb	r2, r3
 8001688:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800168c:	4313      	orrs	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	73fb      	strb	r3, [r7, #15]
    /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
     * hence writing data to respective registers at one go */
    rslt = setRegs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8001694:	f107 010f 	add.w	r1, r7, #15
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	2054      	movs	r0, #84	; 0x54
 800169e:	f001 fa3d 	bl	8002b1c <setRegs>
 80016a2:	4603      	mov	r3, r0
 80016a4:	75fb      	strb	r3, [r7, #23]
  }
  return rslt;
 80016a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <configIntOutCtrl>:

int8_t configIntOutCtrl(struct bmi160IntSettg *intConfig, struct bmi160Dev *dev){
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	75bb      	strb	r3, [r7, #22]
  uint8_t data = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Configuration of output interrupt signals on pins INT1 and INT2 are
   * done in BMI160_INT_OUT_CTRL_ADDR register*/
  rslt = getRegs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80016c4:	f107 010f 	add.w	r1, r7, #15
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	2053      	movs	r0, #83	; 0x53
 80016ce:	f001 f9cf 	bl	8002a70 <getRegs>
 80016d2:	4603      	mov	r3, r0
 80016d4:	75fb      	strb	r3, [r7, #23]

  if (rslt == BMI160_OK) {
 80016d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 80ad 	bne.w	800183a <configIntOutCtrl+0x188>
    /* updating the interrupt pin structure to local structure */
    const struct bmi160IntPinSettg *intr_pin_sett = &(intConfig->intPinSettg);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3302      	adds	r3, #2
 80016e4:	613b      	str	r3, [r7, #16]

    /* Configuring channel 1 */
    if (intConfig->intChannel == BMI160_INT_CHANNEL_1) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d14f      	bne.n	800178e <configIntOutCtrl+0xdc>

      /* Output enable */
      temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	f023 0308 	bic.w	r3, r3, #8
 80016f4:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputEn << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	b25b      	sxtb	r3, r3
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	b25a      	sxtb	r2, r3
 800170a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800170e:	4313      	orrs	r3, r2
 8001710:	b25b      	sxtb	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	73fb      	strb	r3, [r7, #15]

      /* Output mode */
      temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputMode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	b25a      	sxtb	r2, r3
 8001732:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001736:	4313      	orrs	r3, r2
 8001738:	b25b      	sxtb	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	73fb      	strb	r3, [r7, #15]

      /* Output type */
      temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	f023 0302 	bic.w	r3, r3, #2
 8001744:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputType << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	b25b      	sxtb	r3, r3
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	b25a      	sxtb	r2, r3
 800175a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800175e:	4313      	orrs	r3, r2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	73fb      	strb	r3, [r7, #15]

      /* edge control */
      temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->edgeCtrl) & BMI160_INT1_EDGE_CTRL_MASK);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	b25b      	sxtb	r3, r3
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	b25a      	sxtb	r2, r3
 8001780:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001784:	4313      	orrs	r3, r2
 8001786:	b25b      	sxtb	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e04c      	b.n	8001828 <configIntOutCtrl+0x176>

    } else {
      /* Configuring channel 2 */
      /* Output enable */
      temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001794:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputEn << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	73fb      	strb	r3, [r7, #15]

      /* Output mode */
      temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017b6:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputMode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	019b      	lsls	r3, r3, #6
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	73fb      	strb	r3, [r7, #15]

      /* Output type */
      temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	f023 0320 	bic.w	r3, r3, #32
 80017de:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->outputType << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	73fb      	strb	r3, [r7, #15]

      /* edge control */
      temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	f023 0310 	bic.w	r3, r3, #16
 8001806:	75bb      	strb	r3, [r7, #22]
      data = temp | ((intr_pin_sett->edgeCtrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	b25b      	sxtb	r3, r3
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	b25a      	sxtb	r2, r3
 800181c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001820:	4313      	orrs	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
    }

    rslt = setRegs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8001828:	f107 010f 	add.w	r1, r7, #15
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	2053      	movs	r0, #83	; 0x53
 8001832:	f001 f973 	bl	8002b1c <setRegs>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]
  }

  return rslt;
 800183a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <enableStepDetectInt>:

int8_t enableStepDetectInt(struct bmi160AccStepDetectIntCfg *stepDetectIntCfg, struct bmi160Dev *dev){
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t data = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	737b      	strb	r3, [r7, #13]
  uint8_t temp = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	73bb      	strb	r3, [r7, #14]
  /* Enable data ready interrupt in Int Enable 2 register */
  rslt = getRegs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8001858:	f107 010d 	add.w	r1, r7, #13
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	2052      	movs	r0, #82	; 0x52
 8001862:	f001 f905 	bl	8002a70 <getRegs>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d11c      	bne.n	80018ac <enableStepDetectInt+0x66>
    temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 8001872:	7b7b      	ldrb	r3, [r7, #13]
 8001874:	f023 0308 	bic.w	r3, r3, #8
 8001878:	73bb      	strb	r3, [r7, #14]
    data = temp | ((stepDetectIntCfg->stepDetectorEn << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	b25b      	sxtb	r3, r3
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	b25a      	sxtb	r2, r3
 800188e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001892:	4313      	orrs	r3, r2
 8001894:	b25b      	sxtb	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	737b      	strb	r3, [r7, #13]
    /* Writing data to INT ENABLE 2 Address */
    rslt = setRegs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 800189a:	f107 010d 	add.w	r1, r7, #13
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	2052      	movs	r0, #82	; 0x52
 80018a4:	f001 f93a 	bl	8002b1c <setRegs>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 80018ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <setStepCounter>:

int8_t setStepCounter(uint8_t step_cnt_enable, struct bmi160Dev *dev)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  int8_t rslt = BMI160_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint8_t data = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73bb      	strb	r3, [r7, #14]
  /* Null-pointer check */
  if (dev == NULL){
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <setStepCounter+0x1e>
    rslt = BMI160_E_NULL_PTR;
 80018d2:	23ff      	movs	r3, #255	; 0xff
 80018d4:	73fb      	strb	r3, [r7, #15]
  }
  if (rslt != BMI160_OK) {
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <setStepCounter+0x2c>
    rslt = BMI160_E_NULL_PTR;
 80018de:	23ff      	movs	r3, #255	; 0xff
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e025      	b.n	8001930 <setStepCounter+0x78>
  } else {
    rslt = getRegs(BMI160_INT_STEP_CONFIG_1_ADDR, &data, 1, dev);
 80018e4:	f107 010e 	add.w	r1, r7, #14
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	207b      	movs	r0, #123	; 0x7b
 80018ee:	f001 f8bf 	bl	8002a70 <getRegs>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d118      	bne.n	8001930 <setStepCounter+0x78>
      if (step_cnt_enable == BMI160_ENABLE){
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <setStepCounter+0x5c>
        data |= (uint8_t)(step_cnt_enable << 3);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	b2da      	uxtb	r2, r3
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	4313      	orrs	r3, r2
 800190e:	b2db      	uxtb	r3, r3
 8001910:	73bb      	strb	r3, [r7, #14]
 8001912:	e004      	b.n	800191e <setStepCounter+0x66>
      }else{
        data &= ~BMI160_STEP_COUNT_EN_BIT_MASK;
 8001914:	7bbb      	ldrb	r3, [r7, #14]
 8001916:	f023 0308 	bic.w	r3, r3, #8
 800191a:	b2db      	uxtb	r3, r3
 800191c:	73bb      	strb	r3, [r7, #14]
      }
      rslt = setRegs(BMI160_INT_STEP_CONFIG_1_ADDR, &data, 1, dev);
 800191e:	f107 010e 	add.w	r1, r7, #14
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	207b      	movs	r0, #123	; 0x7b
 8001928:	f001 f8f8 	bl	8002b1c <setRegs>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 8001930:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <setStepPowerMode>:

int8_t setStepPowerMode(uint8_t model,struct bmi160Dev *dev)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  int8_t rslt = BMI160_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  if (model == stepNormalPowerMode){
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <setStepPowerMode+0xd4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	429a      	cmp	r2, r3
 8001954:	d10c      	bne.n	8001970 <setStepPowerMode+0x34>
    dev->accelCfg.odr=BMI160_ACCEL_ODR_1600HZ;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	220c      	movs	r2, #12
 800195a:	715a      	strb	r2, [r3, #5]
    dev->accelCfg.power = BMI160_ACCEL_NORMAL_MODE;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2211      	movs	r2, #17
 8001960:	711a      	strb	r2, [r3, #4]
    dev->gyroCfg.odr = BMI160_GYRO_ODR_3200HZ;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	220d      	movs	r2, #13
 8001966:	735a      	strb	r2, [r3, #13]
    dev->gyroCfg.power = BMI160_GYRO_NORMAL_MODE;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2215      	movs	r2, #21
 800196c:	731a      	strb	r2, [r3, #12]
 800196e:	e01d      	b.n	80019ac <setStepPowerMode+0x70>
  }else if(model == stepLowPowerMode){
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <setStepPowerMode+0xd8>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	429a      	cmp	r2, r3
 8001978:	d10c      	bne.n	8001994 <setStepPowerMode+0x58>
    dev->accelCfg.odr=BMI160_ACCEL_ODR_50HZ;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2207      	movs	r2, #7
 800197e:	715a      	strb	r2, [r3, #5]
    dev->accelCfg.power = BMI160_ACCEL_LOWPOWER_MODE;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2212      	movs	r2, #18
 8001984:	711a      	strb	r2, [r3, #4]
    dev->gyroCfg.odr = BMI160_GYRO_ODR_50HZ;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2207      	movs	r2, #7
 800198a:	735a      	strb	r2, [r3, #13]
    dev->gyroCfg.power = BMI160_GYRO_SUSPEND_MODE;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2214      	movs	r2, #20
 8001990:	731a      	strb	r2, [r3, #12]
 8001992:	e00b      	b.n	80019ac <setStepPowerMode+0x70>
  }else{
    dev->accelCfg.odr=BMI160_ACCEL_ODR_1600HZ;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	220c      	movs	r2, #12
 8001998:	715a      	strb	r2, [r3, #5]
    dev->accelCfg.power = BMI160_ACCEL_NORMAL_MODE;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2211      	movs	r2, #17
 800199e:	711a      	strb	r2, [r3, #4]
    dev->gyroCfg.odr = BMI160_GYRO_ODR_3200HZ;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	220d      	movs	r2, #13
 80019a4:	735a      	strb	r2, [r3, #13]
    dev->gyroCfg.power = BMI160_GYRO_NORMAL_MODE;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2215      	movs	r2, #21
 80019aa:	731a      	strb	r2, [r3, #12]
  }
  dev->accelCfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	71da      	strb	r2, [r3, #7]
  dev->accelCfg.range = BMI160_ACCEL_RANGE_2G;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2203      	movs	r2, #3
 80019b6:	719a      	strb	r2, [r3, #6]
  dev->gyroCfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	739a      	strb	r2, [r3, #14]
  dev->gyroCfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2202      	movs	r2, #2
 80019c2:	73da      	strb	r2, [r3, #15]
  rslt = setAccelConf(dev);
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f000 f965 	bl	8001c94 <setAccelConf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <setStepPowerMode+0xc8>
    rslt = setGyroConf(dev);
 80019d6:	6838      	ldr	r0, [r7, #0]
 80019d8:	f000 f81e 	bl	8001a18 <setGyroConf>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 80019e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10d      	bne.n	8001a04 <setStepPowerMode+0xc8>
      /* write power mode for accel and gyro */
      rslt = setPowerMode(dev);
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f000 fa5a 	bl	8001ea2 <setPowerMode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d104      	bne.n	8001a04 <setStepPowerMode+0xc8>
        rslt = checkInvalidSettg(dev);
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f000 f915 	bl	8001c2a <checkInvalidSettg>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return rslt;
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000370 	.word	0x20000370
 8001a14:	20000000 	.word	0x20000000

08001a18 <setGyroConf>:

int8_t setGyroConf(struct bmi160Dev *dev){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t data[2]={0};
 8001a20:	2300      	movs	r3, #0
 8001a22:	81bb      	strh	r3, [r7, #12]
  rslt = checkGyroConfig(data, dev);
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f836 	bl	8001a9c <checkGyroConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 8001a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d129      	bne.n	8001a90 <setGyroConf+0x78>
    // Write output data rate and bandwidth
    rslt = setRegs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001a3c:	f107 010c 	add.w	r1, r7, #12
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	2042      	movs	r0, #66	; 0x42
 8001a46:	f001 f869 	bl	8002b1c <setRegs>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11c      	bne.n	8001a90 <setGyroConf+0x78>
      dev->prevGyroCfg.odr = dev->gyroCfg.odr;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7b5a      	ldrb	r2, [r3, #13]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	745a      	strb	r2, [r3, #17]
      dev->prevGyroCfg.bw = dev->gyroCfg.bw;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7bda      	ldrb	r2, [r3, #15]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	74da      	strb	r2, [r3, #19]
      //delay(BMI160_ONE_MS_DELAY);
      HAL_Delay(BMI160_ONE_MS_DELAY);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f001 ff90 	bl	800398c <HAL_Delay>
      // Write gyro range
      rslt = setRegs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	1c59      	adds	r1, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	2043      	movs	r0, #67	; 0x43
 8001a78:	f001 f850 	bl	8002b1c <setRegs>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <setGyroConf+0x78>
        dev->prevGyroCfg.range = dev->gyroCfg.range;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7b9a      	ldrb	r2, [r3, #14]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	749a      	strb	r2, [r3, #18]
    }
  }
  return rslt;
 8001a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <checkGyroConfig>:

int8_t checkGyroConfig(uint8_t *data, struct bmi160Dev *dev){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  /* read gyro Output data rate and bandwidth */
  rslt = getRegs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	2042      	movs	r0, #66	; 0x42
 8001aae:	f000 ffdf 	bl	8002a70 <getRegs>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11b      	bne.n	8001af6 <checkGyroConfig+0x5a>
    rslt = processGyroOdr(&data[0], dev);
 8001abe:	6839      	ldr	r1, [r7, #0]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f81e 	bl	8001b02 <processGyroOdr>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d111      	bne.n	8001af6 <checkGyroConfig+0x5a>
      rslt = processGyroBw(&data[0], dev);
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f87a 	bl	8001bce <processGyroBw>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <checkGyroConfig+0x5a>
        rslt = processGyroRange(&data[1], dev);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f83b 	bl	8001b68 <processGyroRange>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <processGyroOdr>:

int8_t processGyroOdr(uint8_t *data, struct bmi160Dev *dev){
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73bb      	strb	r3, [r7, #14]
  uint8_t odr = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	737b      	strb	r3, [r7, #13]
  if (dev->gyroCfg.odr <= BMI160_GYRO_ODR_MAX) {
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	7b5b      	ldrb	r3, [r3, #13]
 8001b1c:	2b0d      	cmp	r3, #13
 8001b1e:	d81a      	bhi.n	8001b56 <processGyroOdr+0x54>
    if (dev->gyroCfg.odr != dev->prevGyroCfg.odr) {
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	7b5a      	ldrb	r2, [r3, #13]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	7c5b      	ldrb	r3, [r3, #17]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d016      	beq.n	8001b5a <processGyroOdr+0x58>
      odr = (uint8_t)dev->gyroCfg.odr;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	7b5b      	ldrb	r3, [r3, #13]
 8001b30:	737b      	strb	r3, [r7, #13]
      temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	f023 030f 	bic.w	r3, r3, #15
 8001b3a:	73bb      	strb	r3, [r7, #14]
      /* Adding output data rate */
      *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001b3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e001      	b.n	8001b5a <processGyroOdr+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8001b56:	23fc      	movs	r3, #252	; 0xfc
 8001b58:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <processGyroRange>:

int8_t processGyroRange(uint8_t *data, struct bmi160Dev *dev){
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73bb      	strb	r3, [r7, #14]
  uint8_t range = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	737b      	strb	r3, [r7, #13]
  if (dev->gyroCfg.range <= BMI160_GYRO_RANGE_MAX) {
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	7b9b      	ldrb	r3, [r3, #14]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d81a      	bhi.n	8001bbc <processGyroRange+0x54>
    if (dev->gyroCfg.range != dev->prevGyroCfg.range) {
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7b9a      	ldrb	r2, [r3, #14]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	7c9b      	ldrb	r3, [r3, #18]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d016      	beq.n	8001bc0 <processGyroRange+0x58>
      range = (uint8_t)dev->gyroCfg.range;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	7b9b      	ldrb	r3, [r3, #14]
 8001b96:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_GYRO_RANGE_MSK;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	f023 0307 	bic.w	r3, r3, #7
 8001ba0:	73bb      	strb	r3, [r7, #14]
      /* Adding range */
      *data = temp | (range & BMI160_GYRO_RANGE_MSK);
 8001ba2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e001      	b.n	8001bc0 <processGyroRange+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8001bbc:	23fc      	movs	r3, #252	; 0xfc
 8001bbe:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <processGyroBw>:

int8_t processGyroBw(uint8_t *data, struct bmi160Dev *dev){
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73bb      	strb	r3, [r7, #14]
  uint8_t bw = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	737b      	strb	r3, [r7, #13]
  if (dev->gyroCfg.bw <= BMI160_GYRO_BW_MAX) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	7bdb      	ldrb	r3, [r3, #15]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d815      	bhi.n	8001c18 <processGyroBw+0x4a>
    bw = (uint8_t)dev->gyroCfg.bw;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	7bdb      	ldrb	r3, [r3, #15]
 8001bf0:	737b      	strb	r3, [r7, #13]
    temp = *data & ~BMI160_GYRO_BW_MASK;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bfa:	73bb      	strb	r3, [r7, #14]
    /* Adding bandwidth */
    *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c06:	b25a      	sxtb	r2, r3
 8001c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e001      	b.n	8001c1c <processGyroBw+0x4e>
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8001c18:	23fc      	movs	r3, #252	; 0xfc
 8001c1a:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 8001c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <checkInvalidSettg>:

int8_t checkInvalidSettg( struct bmi160Dev *dev){
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t data = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73bb      	strb	r3, [r7, #14]
  // read the error reg
  rslt = getRegs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001c36:	f107 010e 	add.w	r1, r7, #14
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f000 ff16 	bl	8002a70 <getRegs>
 8001c44:	4603      	mov	r3, r0
 8001c46:	73fb      	strb	r3, [r7, #15]
  data = data >> 1;
 8001c48:	7bbb      	ldrb	r3, [r7, #14]
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	73bb      	strb	r3, [r7, #14]
  data = data & BMI160_ERR_REG_MASK;
 8001c50:	7bbb      	ldrb	r3, [r7, #14]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	73bb      	strb	r3, [r7, #14]
  if (data == 1)
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <checkInvalidSettg+0x3c>
    rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001c60:	23fa      	movs	r3, #250	; 0xfa
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e010      	b.n	8001c88 <checkInvalidSettg+0x5e>
  else if (data == 2)
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d102      	bne.n	8001c72 <checkInvalidSettg+0x48>
    rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001c6c:	23f9      	movs	r3, #249	; 0xf9
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e00a      	b.n	8001c88 <checkInvalidSettg+0x5e>
  else if (data == 3)
 8001c72:	7bbb      	ldrb	r3, [r7, #14]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d102      	bne.n	8001c7e <checkInvalidSettg+0x54>
    rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001c78:	23f8      	movs	r3, #248	; 0xf8
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e004      	b.n	8001c88 <checkInvalidSettg+0x5e>
  else if (data == 7)
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	2b07      	cmp	r3, #7
 8001c82:	d101      	bne.n	8001c88 <checkInvalidSettg+0x5e>
    rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001c84:	23f7      	movs	r3, #247	; 0xf7
 8001c86:	73fb      	strb	r3, [r7, #15]

  return rslt;
 8001c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <setAccelConf>:

int8_t setAccelConf(struct bmi160Dev *dev){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMI160_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint8_t data[2] = {0};
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	81bb      	strh	r3, [r7, #12]
  rslt = checkAccelConfig(data, dev);
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f836 	bl	8001d1c <checkAccelConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 8001cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d129      	bne.n	8001d10 <setAccelConf+0x7c>
    rslt = setRegs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8001cbc:	f107 010c 	add.w	r1, r7, #12
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2040      	movs	r0, #64	; 0x40
 8001cc6:	f000 ff29 	bl	8002b1c <setRegs>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11c      	bne.n	8001d10 <setAccelConf+0x7c>
      dev->prevAccelCfg.odr = dev->accelCfg.odr;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	795a      	ldrb	r2, [r3, #5]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	725a      	strb	r2, [r3, #9]
      dev->prevAccelCfg.bw = dev->accelCfg.bw;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	79da      	ldrb	r2, [r3, #7]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	72da      	strb	r2, [r3, #11]
      //delay(BMI160_ONE_MS_DELAY);
      HAL_Delay(BMI160_ONE_MS_DELAY);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f001 fe50 	bl	800398c <HAL_Delay>
      rslt = setRegs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	1c59      	adds	r1, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2041      	movs	r0, #65	; 0x41
 8001cf8:	f000 ff10 	bl	8002b1c <setRegs>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK){
 8001d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <setAccelConf+0x7c>
        dev->prevAccelCfg.range = dev->accelCfg.range;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	799a      	ldrb	r2, [r3, #6]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	729a      	strb	r2, [r3, #10]
      }
    }
  }
  return rslt;
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <checkAccelConfig>:

int8_t checkAccelConfig(uint8_t *data, struct bmi160Dev *dev){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  /* read accel Output data rate and bandwidth */
  rslt = getRegs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	2040      	movs	r0, #64	; 0x40
 8001d2e:	f000 fe9f 	bl	8002a70 <getRegs>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 8001d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d11b      	bne.n	8001d76 <checkAccelConfig+0x5a>
    rslt = processAccelOdr(&data[0], dev);
 8001d3e:	6839      	ldr	r1, [r7, #0]
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f81e 	bl	8001d82 <processAccelOdr>
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d111      	bne.n	8001d76 <checkAccelConfig+0x5a>
      rslt = processAccelBw(&data[0], dev);
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f847 	bl	8001de8 <processAccelBw>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK)
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <checkAccelConfig+0x5a>
        rslt = processAccelRange(&data[1], dev);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f865 	bl	8001e3c <processAccelRange>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73fb      	strb	r3, [r7, #15]
    }
  }
  return rslt;
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <processAccelOdr>:

int8_t processAccelOdr(uint8_t *data,  struct bmi160Dev *dev){
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73bb      	strb	r3, [r7, #14]
  uint8_t odr = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	737b      	strb	r3, [r7, #13]

  if (dev->accelCfg.odr <= BMI160_ACCEL_ODR_MAX) {
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	795b      	ldrb	r3, [r3, #5]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d81a      	bhi.n	8001dd6 <processAccelOdr+0x54>
    if (dev->accelCfg.odr != dev->prevAccelCfg.odr) {
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	795a      	ldrb	r2, [r3, #5]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7a5b      	ldrb	r3, [r3, #9]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d016      	beq.n	8001dda <processAccelOdr+0x58>
      odr = (uint8_t)dev->accelCfg.odr;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	795b      	ldrb	r3, [r3, #5]
 8001db0:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	f023 030f 	bic.w	r3, r3, #15
 8001dba:	73bb      	strb	r3, [r7, #14]
      /* Adding output data rate */
      *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001dbc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e001      	b.n	8001dda <processAccelOdr+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8001dd6:	23fc      	movs	r3, #252	; 0xfc
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <processAccelBw>:

int8_t processAccelBw(uint8_t *data, struct bmi160Dev *dev){
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73bb      	strb	r3, [r7, #14]
  uint8_t bw = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	737b      	strb	r3, [r7, #13]

  if (dev->accelCfg.bw <= BMI160_ACCEL_BW_MAX) {
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	79db      	ldrb	r3, [r3, #7]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d811      	bhi.n	8001e2a <processAccelBw+0x42>
    if (dev->accelCfg.bw != dev->prevAccelCfg.bw) {
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	79da      	ldrb	r2, [r3, #7]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	7adb      	ldrb	r3, [r3, #11]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d00d      	beq.n	8001e2e <processAccelBw+0x46>
      bw = (uint8_t)dev->accelCfg.bw;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	79db      	ldrb	r3, [r3, #7]
 8001e16:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e20:	73bb      	strb	r3, [r7, #14]
      /* Adding bandwidth */
      *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7bba      	ldrb	r2, [r7, #14]
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e001      	b.n	8001e2e <processAccelBw+0x46>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8001e2a:	23fc      	movs	r3, #252	; 0xfc
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <processAccelRange>:

int8_t processAccelRange(uint8_t *data, struct bmi160Dev *dev){
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  int8_t rslt = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  uint8_t temp = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73bb      	strb	r3, [r7, #14]
  uint8_t range = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	737b      	strb	r3, [r7, #13]

  if (dev->accelCfg.range <= BMI160_ACCEL_RANGE_MAX) {
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	799b      	ldrb	r3, [r3, #6]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d81a      	bhi.n	8001e90 <processAccelRange+0x54>
    if (dev->accelCfg.range != dev->prevAccelCfg.range) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	799a      	ldrb	r2, [r3, #6]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7a9b      	ldrb	r3, [r3, #10]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d016      	beq.n	8001e94 <processAccelRange+0x58>
      range = (uint8_t)dev->accelCfg.range;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	799b      	ldrb	r3, [r3, #6]
 8001e6a:	737b      	strb	r3, [r7, #13]
      temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f023 030f 	bic.w	r3, r3, #15
 8001e74:	73bb      	strb	r3, [r7, #14]
      /* Adding range */
      *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001e76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	b25a      	sxtb	r2, r3
 8001e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e001      	b.n	8001e94 <processAccelRange+0x58>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8001e90:	23fc      	movs	r3, #252	; 0xfc
 8001e92:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 8001e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <setPowerMode>:

int8_t setPowerMode(struct bmi160Dev *dev){
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  int8_t rslt = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
  rslt = setAccelPwr(dev);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f811 	bl	8001ed6 <setAccelPwr>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK){
 8001eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d104      	bne.n	8001eca <setPowerMode+0x28>
    rslt = setGyroPwr(dev);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f89e 	bl	8002002 <setGyroPwr>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]
  }
  return rslt;
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <setAccelPwr>:

int8_t setAccelPwr(struct bmi160Dev *dev){
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  int8_t rslt = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  uint8_t data = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73bb      	strb	r3, [r7, #14]
  if ((dev->accelCfg.power >= BMI160_ACCEL_SUSPEND_MODE) &&
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	d92a      	bls.n	8001f44 <setAccelPwr+0x6e>
    (dev->accelCfg.power <= BMI160_ACCEL_LOWPOWER_MODE)) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
  if ((dev->accelCfg.power >= BMI160_ACCEL_SUSPEND_MODE) &&
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d826      	bhi.n	8001f44 <setAccelPwr+0x6e>
    if (dev->accelCfg.power != dev->prevAccelCfg.power) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	791a      	ldrb	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7a1b      	ldrb	r3, [r3, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d023      	beq.n	8001f4a <setAccelPwr+0x74>
      rslt = processUnderSampling(&data, dev);
 8001f02:	f107 030e 	add.w	r3, r7, #14
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f825 	bl	8001f58 <processUnderSampling>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]
      if (rslt == BMI160_OK) {
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d117      	bne.n	8001f4a <setAccelPwr+0x74>
        /* Write accel power */
        rslt = setRegs(BMI160_COMMAND_REG_ADDR, &dev->accelCfg.power, 1, dev);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	1d19      	adds	r1, r3, #4
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	207e      	movs	r0, #126	; 0x7e
 8001f24:	f000 fdfa 	bl	8002b1c <setRegs>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]
        /* Add delay of 5 ms */
        if (dev->prevAccelCfg.power == BMI160_ACCEL_SUSPEND_MODE){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7a1b      	ldrb	r3, [r3, #8]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d102      	bne.n	8001f3a <setAccelPwr+0x64>
          //delay(BMI160_ACCEL_DELAY_MS);
        	HAL_Delay(BMI160_ACCEL_DELAY_MS);
 8001f34:	2005      	movs	r0, #5
 8001f36:	f001 fd29 	bl	800398c <HAL_Delay>
        }
        dev->prevAccelCfg.power = dev->accelCfg.power;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	791a      	ldrb	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	721a      	strb	r2, [r3, #8]
    if (dev->accelCfg.power != dev->prevAccelCfg.power) {
 8001f42:	e002      	b.n	8001f4a <setAccelPwr+0x74>
      }
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8001f44:	23fc      	movs	r3, #252	; 0xfc
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e000      	b.n	8001f4c <setAccelPwr+0x76>
    if (dev->accelCfg.power != dev->prevAccelCfg.power) {
 8001f4a:	bf00      	nop
  }
  return rslt;
 8001f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <processUnderSampling>:

int8_t processUnderSampling(uint8_t *data, struct bmi160Dev *dev){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  int8_t rslt;
  uint8_t temp = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73bb      	strb	r3, [r7, #14]
  uint8_t pre_filter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	737b      	strb	r3, [r7, #13]
  rslt = getRegs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	2040      	movs	r0, #64	; 0x40
 8001f72:	f000 fd7d 	bl	8002a70 <getRegs>
 8001f76:	4603      	mov	r3, r0
 8001f78:	73fb      	strb	r3, [r7, #15]
  if (rslt == BMI160_OK) {
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d139      	bne.n	8001ff6 <processUnderSampling+0x9e>
    if (dev->accelCfg.power == BMI160_ACCEL_LOWPOWER_MODE) {
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	791b      	ldrb	r3, [r3, #4]
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d120      	bne.n	8001fcc <processUnderSampling+0x74>
      temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f92:	73bb      	strb	r3, [r7, #14]
      /* Set under-sampling parameter */
      *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	701a      	strb	r2, [r3, #0]
      /* Write data */
      rslt = setRegs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	2040      	movs	r0, #64	; 0x40
 8001fa8:	f000 fdb8 	bl	8002b1c <setRegs>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
      /* disable the pre-filter data in
       * low power mode */
      if (rslt == BMI160_OK)
 8001fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d11e      	bne.n	8001ff6 <processUnderSampling+0x9e>
        /* Disable the Pre-filter data*/
        rslt = setRegs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
 8001fb8:	f107 010d 	add.w	r1, r7, #13
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	2058      	movs	r0, #88	; 0x58
 8001fc2:	f000 fdab 	bl	8002b1c <setRegs>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e014      	b.n	8001ff6 <processUnderSampling+0x9e>
    } else {
      if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da0f      	bge.n	8001ff6 <processUnderSampling+0x9e>

        temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fde:	73bb      	strb	r3, [r7, #14]
        /* disable under-sampling parameter
        if already enabled */
        *data = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7bba      	ldrb	r2, [r7, #14]
 8001fe4:	701a      	strb	r2, [r3, #0]
        /* Write data */
        rslt =setRegs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	2040      	movs	r0, #64	; 0x40
 8001fee:	f000 fd95 	bl	8002b1c <setRegs>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return rslt;
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <setGyroPwr>:

int8_t setGyroPwr(struct bmi160Dev *dev){
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  int8_t rslt = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  if ((dev->gyroCfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyroCfg.power == BMI160_GYRO_NORMAL_MODE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7b1b      	ldrb	r3, [r3, #12]
 8002012:	2b14      	cmp	r3, #20
 8002014:	d007      	beq.n	8002026 <setGyroPwr+0x24>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7b1b      	ldrb	r3, [r3, #12]
 800201a:	2b15      	cmp	r3, #21
 800201c:	d003      	beq.n	8002026 <setGyroPwr+0x24>
    || (dev->gyroCfg.power == BMI160_GYRO_FASTSTARTUP_MODE)) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7b1b      	ldrb	r3, [r3, #12]
 8002022:	2b17      	cmp	r3, #23
 8002024:	d127      	bne.n	8002076 <setGyroPwr+0x74>
    if (dev->gyroCfg.power != dev->prevGyroCfg.power) {
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7b1a      	ldrb	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7c1b      	ldrb	r3, [r3, #16]
 800202e:	429a      	cmp	r2, r3
 8002030:	d023      	beq.n	800207a <setGyroPwr+0x78>
      /* Write gyro power */
      rslt = setRegs(BMI160_COMMAND_REG_ADDR, &dev->gyroCfg.power, 1, dev);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f103 010c 	add.w	r1, r3, #12
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	207e      	movs	r0, #126	; 0x7e
 800203e:	f000 fd6d 	bl	8002b1c <setRegs>
 8002042:	4603      	mov	r3, r0
 8002044:	73fb      	strb	r3, [r7, #15]
      if (dev->prevGyroCfg.power == BMI160_GYRO_SUSPEND_MODE) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c1b      	ldrb	r3, [r3, #16]
 800204a:	2b14      	cmp	r3, #20
 800204c:	d103      	bne.n	8002056 <setGyroPwr+0x54>
        /* Delay of 81 ms */
        //delay(BMI160_GYRO_DELAY_MS);
        HAL_Delay(BMI160_GYRO_DELAY_MS);
 800204e:	2051      	movs	r0, #81	; 0x51
 8002050:	f001 fc9c 	bl	800398c <HAL_Delay>
 8002054:	e00a      	b.n	800206c <setGyroPwr+0x6a>
      } else if ((dev->prevGyroCfg.power == BMI160_GYRO_FASTSTARTUP_MODE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7c1b      	ldrb	r3, [r3, #16]
 800205a:	2b17      	cmp	r3, #23
 800205c:	d106      	bne.n	800206c <setGyroPwr+0x6a>
        && (dev->gyroCfg.power == BMI160_GYRO_NORMAL_MODE)) {
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7b1b      	ldrb	r3, [r3, #12]
 8002062:	2b15      	cmp	r3, #21
 8002064:	d102      	bne.n	800206c <setGyroPwr+0x6a>
        /* This delay is required for transition from
        fast-startup mode to normal mode */
        //delay(10);
        HAL_Delay(10);
 8002066:	200a      	movs	r0, #10
 8002068:	f001 fc90 	bl	800398c <HAL_Delay>
      } else {
        /* do nothing */
      }
      dev->prevGyroCfg.power = dev->gyroCfg.power;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7b1a      	ldrb	r2, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	741a      	strb	r2, [r3, #16]
    if (dev->gyroCfg.power != dev->prevGyroCfg.power) {
 8002074:	e001      	b.n	800207a <setGyroPwr+0x78>
    }
  } else {
    rslt = BMI160_E_OUT_OF_RANGE;
 8002076:	23fc      	movs	r3, #252	; 0xfc
 8002078:	73fb      	strb	r3, [r7, #15]
  }

  return rslt;
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <getAccX>:

float getAccX(){
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
	int rslt;
	float k;
	int16_t accelGyro[6]={0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
	rslt =getAccelGyroData(accelGyro);
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f8c4 	bl	8002228 <getAccelGyroData>
 80020a0:	4603      	mov	r3, r0
 80020a2:	617b      	str	r3, [r7, #20]
	k=accelGyro[3]/16384.0;
 80020a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa17 	bl	80004dc <__aeabi_i2d>
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <getAccX+0x4c>)
 80020b4:	f7fe fba6 	bl	8000804 <__aeabi_ddiv>
 80020b8:	4603      	mov	r3, r0
 80020ba:	460c      	mov	r4, r1
 80020bc:	4618      	mov	r0, r3
 80020be:	4621      	mov	r1, r4
 80020c0:	f7fe fd6e 	bl	8000ba0 <__aeabi_d2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]
	return k;
 80020c8:	693b      	ldr	r3, [r7, #16]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40d00000 	.word	0x40d00000

080020d8 <getAccY>:

float getAccY(){
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
	int rslt;
	float k;
	int16_t accelGyro[6]={0};
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
	rslt =getAccelGyroData(accelGyro);
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f89c 	bl	8002228 <getAccelGyroData>
 80020f0:	4603      	mov	r3, r0
 80020f2:	617b      	str	r3, [r7, #20]
	k=accelGyro[4]/16384.0;
 80020f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe f9ef 	bl	80004dc <__aeabi_i2d>
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <getAccY+0x4c>)
 8002104:	f7fe fb7e 	bl	8000804 <__aeabi_ddiv>
 8002108:	4603      	mov	r3, r0
 800210a:	460c      	mov	r4, r1
 800210c:	4618      	mov	r0, r3
 800210e:	4621      	mov	r1, r4
 8002110:	f7fe fd46 	bl	8000ba0 <__aeabi_d2f>
 8002114:	4603      	mov	r3, r0
 8002116:	613b      	str	r3, [r7, #16]
	return k;
 8002118:	693b      	ldr	r3, [r7, #16]
}
 800211a:	4618      	mov	r0, r3
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	bf00      	nop
 8002124:	40d00000 	.word	0x40d00000

08002128 <getAccZ>:
float getAccZ(){
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
	int rslt;
	float k;
	int16_t accelGyro[6]={0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
	rslt =getAccelGyroData(accelGyro);
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f874 	bl	8002228 <getAccelGyroData>
 8002140:	4603      	mov	r3, r0
 8002142:	617b      	str	r3, [r7, #20]
	k=accelGyro[5]/16384.0;
 8002144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f9c7 	bl	80004dc <__aeabi_i2d>
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <getAccZ+0x50>)
 8002154:	f7fe fb56 	bl	8000804 <__aeabi_ddiv>
 8002158:	4603      	mov	r3, r0
 800215a:	460c      	mov	r4, r1
 800215c:	4618      	mov	r0, r3
 800215e:	4621      	mov	r1, r4
 8002160:	f7fe fd1e 	bl	8000ba0 <__aeabi_d2f>
 8002164:	4603      	mov	r3, r0
 8002166:	613b      	str	r3, [r7, #16]
	return -k;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
}
 800216e:	4618      	mov	r0, r3
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	40d00000 	.word	0x40d00000

0800217c <getstep>:

int getstep(void){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	uint16_t k=0;
 8002182:	2300      	movs	r3, #0
 8002184:	80fb      	strh	r3, [r7, #6]
    uint16_t stepCounter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	80bb      	strh	r3, [r7, #4]
    if (readStepCounter(&stepCounter,Obmi160)==BMI160_OK){
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <getstep+0x30>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f80c 	bl	80021b0 <readStepCounter>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <getstep+0x26>
	  k=stepCounter;
 800219e:	88bb      	ldrh	r3, [r7, #4]
 80021a0:	80fb      	strh	r3, [r7, #6]
    }
	return k;
 80021a2:	88fb      	ldrh	r3, [r7, #6]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000600 	.word	0x20000600

080021b0 <readStepCounter>:

int8_t readStepCounter(uint16_t *stepVal, struct bmi160Dev *dev){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  int8_t rslt = BMI160_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  uint8_t data[2] = {0, 0};
 80021be:	2300      	movs	r3, #0
 80021c0:	723b      	strb	r3, [r7, #8]
 80021c2:	2300      	movs	r3, #0
 80021c4:	727b      	strb	r3, [r7, #9]
  uint16_t msb = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	81bb      	strh	r3, [r7, #12]
  uint8_t lsb = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	72fb      	strb	r3, [r7, #11]
  if (dev == NULL){
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <readStepCounter+0x28>
    rslt = BMI160_E_NULL_PTR;
 80021d4:	23ff      	movs	r3, #255	; 0xff
 80021d6:	73fb      	strb	r3, [r7, #15]
  }
  if (rslt != BMI160_OK) {
 80021d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <readStepCounter+0x36>
    rslt = BMI160_E_NULL_PTR;
 80021e0:	23ff      	movs	r3, #255	; 0xff
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e019      	b.n	800221a <readStepCounter+0x6a>
  } else {
    rslt = getRegs(BMI160_INT_STEP_CNT_0_ADDR, data, 2, dev);
 80021e6:	f107 0108 	add.w	r1, r7, #8
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2202      	movs	r2, #2
 80021ee:	2078      	movs	r0, #120	; 0x78
 80021f0:	f000 fc3e 	bl	8002a70 <getRegs>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK) {
 80021f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10c      	bne.n	800221a <readStepCounter+0x6a>
      lsb = data[0];
 8002200:	7a3b      	ldrb	r3, [r7, #8]
 8002202:	72fb      	strb	r3, [r7, #11]
      msb = data[1] << 8;
 8002204:	7a7b      	ldrb	r3, [r7, #9]
 8002206:	b29b      	uxth	r3, r3
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	81bb      	strh	r3, [r7, #12]
      *stepVal = msb | lsb;
 800220c:	7afb      	ldrb	r3, [r7, #11]
 800220e:	b29a      	uxth	r2, r3
 8002210:	89bb      	ldrh	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	b29a      	uxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	801a      	strh	r2, [r3, #0]
    }
  }
  return rslt;
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <getAccelGyroData>:

int8_t getAccelGyroData( int16_t* data)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMI160_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  rslt = getSensorData((BMI160_ACCEL_SEL | BMI160_GYRO_SEL),Oaccel, Ogyro, Obmi160);
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <getAccelGyroData+0x88>)
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <getAccelGyroData+0x8c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <getAccelGyroData+0x90>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2003      	movs	r0, #3
 8002242:	f000 f83b 	bl	80022bc <getSensorData>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]
  if(rslt == BMI160_OK){
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d128      	bne.n	80022a4 <getAccelGyroData+0x7c>
    data[0]=Ogyro->x;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <getAccelGyroData+0x8c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f9b3 2000 	ldrsh.w	r2, [r3]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	801a      	strh	r2, [r3, #0]
    data[1]=Ogyro->y;
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <getAccelGyroData+0x8c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3302      	adds	r3, #2
 8002266:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800226a:	801a      	strh	r2, [r3, #0]
    data[2]=Ogyro->z;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <getAccelGyroData+0x8c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002278:	801a      	strh	r2, [r3, #0]
    data[3]=Oaccel->x;
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <getAccelGyroData+0x88>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3306      	adds	r3, #6
 8002282:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002286:	801a      	strh	r2, [r3, #0]
    data[4]=Oaccel->y;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <getAccelGyroData+0x88>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3308      	adds	r3, #8
 8002290:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002294:	801a      	strh	r2, [r3, #0]
    data[5]=Oaccel->z;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <getAccelGyroData+0x88>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	330a      	adds	r3, #10
 800229e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80022a2:	801a      	strh	r2, [r3, #0]
  }
  return rslt;
 80022a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200005fc 	.word	0x200005fc
 80022b4:	200005f8 	.word	0x200005f8
 80022b8:	20000600 	.word	0x20000600

080022bc <getSensorData>:

int8_t getSensorData(uint8_t select_sensor, struct bmi160SensorData *accel, struct bmi160SensorData *gyro,struct bmi160Dev *dev){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]
  int8_t rslt = BMI160_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75fb      	strb	r3, [r7, #23]
  uint8_t time_sel;
  uint8_t sen_sel;
  uint8_t len = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	75bb      	strb	r3, [r7, #22]
  /*Extract the sensor  and time select information*/
  sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	757b      	strb	r3, [r7, #21]
  time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 80022dc:	7d7b      	ldrb	r3, [r7, #21]
 80022de:	109b      	asrs	r3, r3, #2
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	753b      	strb	r3, [r7, #20]
  sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 80022e8:	7d7b      	ldrb	r3, [r7, #21]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	757b      	strb	r3, [r7, #21]
  if (time_sel == 1)
 80022f0:	7d3b      	ldrb	r3, [r7, #20]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <getSensorData+0x3e>
    len = 3;
 80022f6:	2303      	movs	r3, #3
 80022f8:	75bb      	strb	r3, [r7, #22]
  /* Null-pointer check */
  if (dev != NULL) {
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03a      	beq.n	8002376 <getSensorData+0xba>
    switch (sen_sel) {
 8002300:	7d7b      	ldrb	r3, [r7, #21]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d012      	beq.n	800232c <getSensorData+0x70>
 8002306:	2b03      	cmp	r3, #3
 8002308:	d01f      	beq.n	800234a <getSensorData+0x8e>
 800230a:	2b01      	cmp	r3, #1
 800230c:	d12f      	bne.n	800236e <getSensorData+0xb2>
    case eBmi160AccelOnly:
      /* Null-pointer check */
      if (accel == NULL)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <getSensorData+0x5e>
        rslt = BMI160_E_NULL_PTR;
 8002314:	23ff      	movs	r3, #255	; 0xff
 8002316:	75fb      	strb	r3, [r7, #23]
      else
        rslt =getAccelData(len, accel, dev);
      break;
 8002318:	e02f      	b.n	800237a <getSensorData+0xbe>
        rslt =getAccelData(len, accel, dev);
 800231a:	7dbb      	ldrb	r3, [r7, #22]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f9b5 	bl	8002690 <getAccelData>
 8002326:	4603      	mov	r3, r0
 8002328:	75fb      	strb	r3, [r7, #23]
      break;
 800232a:	e026      	b.n	800237a <getSensorData+0xbe>
    case eBmi160GyroOnly:
      /* Null-pointer check */
      if (gyro == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <getSensorData+0x7c>
        rslt = BMI160_E_NULL_PTR;
 8002332:	23ff      	movs	r3, #255	; 0xff
 8002334:	75fb      	strb	r3, [r7, #23]
      else
        rslt = getGyroData1(len, gyro, dev);
      break;
 8002336:	e020      	b.n	800237a <getSensorData+0xbe>
        rslt = getGyroData1(len, gyro, dev);
 8002338:	7dbb      	ldrb	r3, [r7, #22]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f821 	bl	8002386 <getGyroData1>
 8002344:	4603      	mov	r3, r0
 8002346:	75fb      	strb	r3, [r7, #23]
      break;
 8002348:	e017      	b.n	800237a <getSensorData+0xbe>
    case eBmi160BothAccelAndGyro:
      /* Null-pointer check */
      if ((gyro == NULL) || (accel == NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <getSensorData+0x9a>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <getSensorData+0xa0>
        rslt = BMI160_E_NULL_PTR;
 8002356:	23ff      	movs	r3, #255	; 0xff
 8002358:	75fb      	strb	r3, [r7, #23]
      else
        rslt = getAccelGyroData1(len, accel, gyro, dev);
      break;
 800235a:	e00e      	b.n	800237a <getSensorData+0xbe>
        rslt = getAccelGyroData1(len, accel, gyro, dev);
 800235c:	7db8      	ldrb	r0, [r7, #22]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	f000 fa4e 	bl	8002804 <getAccelGyroData1>
 8002368:	4603      	mov	r3, r0
 800236a:	75fb      	strb	r3, [r7, #23]
      break;
 800236c:	e005      	b.n	800237a <getSensorData+0xbe>
    default:
      rslt = BMI160_E_INVALID_INPUT;
 800236e:	23fb      	movs	r3, #251	; 0xfb
 8002370:	75fb      	strb	r3, [r7, #23]
      break;
 8002372:	bf00      	nop
 8002374:	e001      	b.n	800237a <getSensorData+0xbe>
    }
  } else {
    rslt = BMI160_E_NULL_PTR;
 8002376:	23ff      	movs	r3, #255	; 0xff
 8002378:	75fb      	strb	r3, [r7, #23]
  }

  return rslt;
 800237a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <getGyroData1>:

int8_t getGyroData1(uint8_t len, struct bmi160SensorData *gyro, struct bmi160Dev *dev){
 8002386:	b580      	push	{r7, lr}
 8002388:	b08e      	sub	sp, #56	; 0x38
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  int8_t rslt;
  uint8_t idx = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t data_array[15] = {0};
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	f8c3 200b 	str.w	r2, [r3, #11]
  uint8_t time_0 = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  uint16_t time_1 = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	867b      	strh	r3, [r7, #50]	; 0x32
  uint32_t time_2 = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t lsb;
  uint8_t msb;
  float msblsb;
  if (len == 0) {
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 809b 	bne.w	80024f6 <getGyroData1+0x170>
    /* read gyro data only */
    rslt = getRegs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80023c0:	f107 0114 	add.w	r1, r7, #20
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2206      	movs	r2, #6
 80023c8:	200c      	movs	r0, #12
 80023ca:	f000 fb51 	bl	8002a70 <getRegs>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BMI160_OK) {
 80023d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 8088 	bne.w	80024ee <getGyroData1+0x168>
      /* Gyro Data */
      lsb = data_array[idx++];
 80023de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80023e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ec:	4413      	add	r3, r2
 80023ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 80023f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8002400:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002404:	4413      	add	r3, r2
 8002406:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800240a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 800240e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	b21a      	sxth	r2, r3
 8002416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b21b      	sxth	r3, r3
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fcc7 	bl	8000db4 <__aeabi_i2f>
 8002426:	4603      	mov	r3, r0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->x = msblsb; /* Data in X axis */
 800242a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800242c:	f7fe fd8c 	bl	8000f48 <__aeabi_f2iz>
 8002430:	4603      	mov	r3, r0
 8002432:	b21a      	sxth	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	801a      	strh	r2, [r3, #0]

      lsb = data_array[idx++];
 8002438:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8002442:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002446:	4413      	add	r3, r2
 8002448:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800244c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 8002450:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800245a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800245e:	4413      	add	r3, r2
 8002460:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 8002468:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	b21a      	sxth	r2, r3
 8002470:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21b      	sxth	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc9a 	bl	8000db4 <__aeabi_i2f>
 8002480:	4603      	mov	r3, r0
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->y = msblsb; /* Data in Y axis */
 8002484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002486:	f7fe fd5f 	bl	8000f48 <__aeabi_f2iz>
 800248a:	4603      	mov	r3, r0
 800248c:	b21a      	sxth	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	805a      	strh	r2, [r3, #2]

      lsb = data_array[idx++];
 8002492:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800249c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024a0:	4413      	add	r3, r2
 80024a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 80024aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80024b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024b8:	4413      	add	r3, r2
 80024ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 80024c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fc6d 	bl	8000db4 <__aeabi_i2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->z = msblsb; /* Data in Z axis */
 80024de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024e0:	f7fe fd32 	bl	8000f48 <__aeabi_f2iz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	809a      	strh	r2, [r3, #4]
 80024ec:	e0ca      	b.n	8002684 <getGyroData1+0x2fe>
    } else {
      rslt = BMI160_E_COM_FAIL;
 80024ee:	23fe      	movs	r3, #254	; 0xfe
 80024f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024f4:	e0c6      	b.n	8002684 <getGyroData1+0x2fe>
    }
  } else {
    /* read gyro sensor data along with time */
    rslt = getRegs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	330c      	adds	r3, #12
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f107 0114 	add.w	r1, r7, #20
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	200c      	movs	r0, #12
 8002506:	f000 fab3 	bl	8002a70 <getRegs>
 800250a:	4603      	mov	r3, r0
 800250c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BMI160_OK) {
 8002510:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 80b2 	bne.w	800267e <getGyroData1+0x2f8>
      /* Gyro Data */
      lsb = data_array[idx++];
 800251a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8002524:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002528:	4413      	add	r3, r2
 800252a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800252e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 8002532:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800253c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002540:	4413      	add	r3, r2
 8002542:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002546:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 800254a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	b21a      	sxth	r2, r3
 8002552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002556:	b21b      	sxth	r3, r3
 8002558:	4313      	orrs	r3, r2
 800255a:	b21b      	sxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fc29 	bl	8000db4 <__aeabi_i2f>
 8002562:	4603      	mov	r3, r0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->x = msblsb; /* gyro X axis data */
 8002566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002568:	f7fe fcee 	bl	8000f48 <__aeabi_f2iz>
 800256c:	4603      	mov	r3, r0
 800256e:	b21a      	sxth	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	801a      	strh	r2, [r3, #0]

      lsb = data_array[idx++];
 8002574:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800257e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002582:	4413      	add	r3, r2
 8002584:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 800258c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8002596:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800259a:	4413      	add	r3, r2
 800259c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 80025a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fbfc 	bl	8000db4 <__aeabi_i2f>
 80025bc:	4603      	mov	r3, r0
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->y = msblsb; /* gyro Y axis data */
 80025c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025c2:	f7fe fcc1 	bl	8000f48 <__aeabi_f2iz>
 80025c6:	4603      	mov	r3, r0
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	805a      	strh	r2, [r3, #2]

      lsb = data_array[idx++];
 80025ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80025d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025dc:	4413      	add	r3, r2
 80025de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      msb = data_array[idx++];
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 80025f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025f4:	4413      	add	r3, r2
 80025f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      msblsb = (int16_t)((msb << 8) | lsb);
 80025fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	b21a      	sxth	r2, r3
 8002606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800260a:	b21b      	sxth	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	b21b      	sxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fbcf 	bl	8000db4 <__aeabi_i2f>
 8002616:	4603      	mov	r3, r0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
      gyro->z = msblsb; /* gyro Z axis data */
 800261a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800261c:	f7fe fc94 	bl	8000f48 <__aeabi_f2iz>
 8002620:	4603      	mov	r3, r0
 8002622:	b21a      	sxth	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	809a      	strh	r2, [r3, #4]

      idx = idx + 6;
 8002628:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800262c:	3306      	adds	r3, #6
 800262e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      time_0 = data_array[idx++];
 8002632:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800263c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002640:	4413      	add	r3, r2
 8002642:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002646:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      time_1 = (uint16_t)(data_array[idx++] << 8);
 800264a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8002654:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002658:	4413      	add	r3, r2
 800265a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800265e:	b29b      	uxth	r3, r3
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	867b      	strh	r3, [r7, #50]	; 0x32
      time_2 = (uint32_t)(data_array[idx++] << 16);
 8002664:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800266e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002672:	4413      	add	r3, r2
 8002674:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267c:	e002      	b.n	8002684 <getGyroData1+0x2fe>
      //gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);

    } else {
      rslt = BMI160_E_COM_FAIL;
 800267e:	23fe      	movs	r3, #254	; 0xfe
 8002680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }

  return rslt;
 8002684:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002688:	4618      	mov	r0, r3
 800268a:	3738      	adds	r7, #56	; 0x38
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <getAccelData>:
    data[2]=Oaccel->z;
  }
  return rslt;
}

int8_t getAccelData(uint8_t len, struct bmi160SensorData *accel, struct bmi160Dev *dev){
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	; 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	73fb      	strb	r3, [r7, #15]
  int8_t rslt;
  uint8_t idx = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t data_array[9] = {0};
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	721a      	strb	r2, [r3, #8]
  uint8_t time_0 = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint16_t time_1 = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint32_t time_2 = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t lsb;
  uint8_t msb;
  float msblsb;
  rslt = getRegs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3306      	adds	r3, #6
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f107 0110 	add.w	r1, r7, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2012      	movs	r0, #18
 80026ce:	f000 f9cf 	bl	8002a70 <getRegs>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (rslt == BMI160_OK){
 80026d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f040 8088 	bne.w	80027f2 <getAccelData+0x162>
    lsb = data_array[idx++];
 80026e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80026ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80026f0:	4413      	add	r3, r2
 80026f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 80026fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002704:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002708:	4413      	add	r3, r2
 800270a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800270e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8002712:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	b21a      	sxth	r2, r3
 800271a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fb45 	bl	8000db4 <__aeabi_i2f>
 800272a:	4603      	mov	r3, r0
 800272c:	61fb      	str	r3, [r7, #28]
    accel->x = msblsb; /* Data in X axis */
 800272e:	69f8      	ldr	r0, [r7, #28]
 8002730:	f7fe fc0a 	bl	8000f48 <__aeabi_f2iz>
 8002734:	4603      	mov	r3, r0
 8002736:	b21a      	sxth	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	801a      	strh	r2, [r3, #0]
    lsb = data_array[idx++];
 800273c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002746:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800274a:	4413      	add	r3, r2
 800274c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8002754:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800275e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002762:	4413      	add	r3, r2
 8002764:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 800276c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b21a      	sxth	r2, r3
 8002774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002778:	b21b      	sxth	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b21b      	sxth	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb18 	bl	8000db4 <__aeabi_i2f>
 8002784:	4603      	mov	r3, r0
 8002786:	61fb      	str	r3, [r7, #28]
    accel->y = msblsb; /* Data in X axis */
 8002788:	69f8      	ldr	r0, [r7, #28]
 800278a:	f7fe fbdd 	bl	8000f48 <__aeabi_f2iz>
 800278e:	4603      	mov	r3, r0
 8002790:	b21a      	sxth	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	805a      	strh	r2, [r3, #2]
    lsb = data_array[idx++];
 8002796:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80027a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027a4:	4413      	add	r3, r2
 80027a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 80027ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80027b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027bc:	4413      	add	r3, r2
 80027be:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 80027c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe faeb 	bl	8000db4 <__aeabi_i2f>
 80027de:	4603      	mov	r3, r0
 80027e0:	61fb      	str	r3, [r7, #28]
    accel->z = msblsb; /* Data in X axis */
 80027e2:	69f8      	ldr	r0, [r7, #28]
 80027e4:	f7fe fbb0 	bl	8000f48 <__aeabi_f2iz>
 80027e8:	4603      	mov	r3, r0
 80027ea:	b21a      	sxth	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	809a      	strh	r2, [r3, #4]
 80027f0:	e002      	b.n	80027f8 <getAccelData+0x168>
  }else{
    rslt = BMI160_E_COM_FAIL;
 80027f2:	23fe      	movs	r3, #254	; 0xfe
 80027f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  return rslt;
 80027f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3730      	adds	r7, #48	; 0x30
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <getAccelGyroData1>:

int8_t getAccelGyroData1(uint8_t len, struct bmi160SensorData *accel, struct bmi160SensorData *gyro, struct bmi160Dev *dev){
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
  int8_t rslt;
  uint8_t idx = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t data_array[15] = {0};
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	f8c3 200b 	str.w	r2, [r3, #11]
  uint8_t time_0 = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint16_t time_1 = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint32_t time_2 = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t msb;
  int16_t msblsb;

  /* read both accel and gyro sensor data
   * along with time if requested */
  rslt = getRegs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	b29b      	uxth	r3, r3
 800283c:	330c      	adds	r3, #12
 800283e:	b29a      	uxth	r2, r3
 8002840:	f107 0110 	add.w	r1, r7, #16
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	200c      	movs	r0, #12
 8002848:	f000 f912 	bl	8002a70 <getRegs>
 800284c:	4603      	mov	r3, r0
 800284e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (rslt == BMI160_OK) {
 8002852:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8101 	bne.w	8002a5e <getAccelGyroData1+0x25a>
    /* Gyro Data */
    lsb = data_array[idx++];
 800285c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002866:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800286a:	4413      	add	r3, r2
 800286c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8002874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800287e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002882:	4413      	add	r3, r2
 8002884:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 800288c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	b21a      	sxth	r2, r3
 8002894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002898:	b21b      	sxth	r3, r3
 800289a:	4313      	orrs	r3, r2
 800289c:	843b      	strh	r3, [r7, #32]
    gyro->x = msblsb; /* gyro X axis data */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8c3a      	ldrh	r2, [r7, #32]
 80028a2:	801a      	strh	r2, [r3, #0]

    lsb = data_array[idx++];
 80028a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80028ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028b2:	4413      	add	r3, r2
 80028b4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80028b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 80028bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80028c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028ca:	4413      	add	r3, r2
 80028cc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80028d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 80028d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	b21a      	sxth	r2, r3
 80028dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	843b      	strh	r3, [r7, #32]
    gyro->y = msblsb; /* gyro Y axis data */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8c3a      	ldrh	r2, [r7, #32]
 80028ea:	805a      	strh	r2, [r3, #2]

    lsb = data_array[idx++];
 80028ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80028f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028fa:	4413      	add	r3, r2
 80028fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8002904:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800290e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002912:	4413      	add	r3, r2
 8002914:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 800291c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	b21a      	sxth	r2, r3
 8002924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002928:	b21b      	sxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	843b      	strh	r3, [r7, #32]
    gyro->z = msblsb; /* gyro Z axis data */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8c3a      	ldrh	r2, [r7, #32]
 8002932:	809a      	strh	r2, [r3, #4]

    /* Accel Data */
    lsb = data_array[idx++];
 8002934:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800293e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002942:	4413      	add	r3, r2
 8002944:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 800294c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002956:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800295a:	4413      	add	r3, r2
 800295c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 8002964:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	b21a      	sxth	r2, r3
 800296c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002970:	b21b      	sxth	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	843b      	strh	r3, [r7, #32]
    accel->x = (int16_t)msblsb; /* accel X axis data */
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	8c3a      	ldrh	r2, [r7, #32]
 800297a:	801a      	strh	r2, [r3, #0]

    lsb = data_array[idx++];
 800297c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002986:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800298a:	4413      	add	r3, r2
 800298c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 8002994:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800299e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029a2:	4413      	add	r3, r2
 80029a4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80029a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 80029ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	843b      	strh	r3, [r7, #32]
    accel->y = (int16_t)msblsb; /* accel Y axis data */
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	8c3a      	ldrh	r2, [r7, #32]
 80029c2:	805a      	strh	r2, [r3, #2]

    lsb = data_array[idx++];
 80029c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80029ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029d2:	4413      	add	r3, r2
 80029d4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80029d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msb = data_array[idx++];
 80029dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80029e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029ea:	4413      	add	r3, r2
 80029ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80029f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msblsb = (int16_t)((msb << 8) | lsb);
 80029f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	b21a      	sxth	r2, r3
 80029fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	843b      	strh	r3, [r7, #32]
    accel->z = (int16_t)msblsb; /* accel Z axis data */
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	8c3a      	ldrh	r2, [r7, #32]
 8002a0a:	809a      	strh	r2, [r3, #4]

    if (len == 3) {
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d128      	bne.n	8002a64 <getAccelGyroData1+0x260>
      time_0 = data_array[idx++];
 8002a12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a20:	4413      	add	r3, r2
 8002a22:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002a26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
      time_1 = (uint16_t)(data_array[idx++] << 8);
 8002a2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a38:	4413      	add	r3, r2
 8002a3a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	857b      	strh	r3, [r7, #42]	; 0x2a
      time_2 = (uint32_t)(data_array[idx++] << 16);
 8002a44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002a4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a52:	4413      	add	r3, r2
 8002a54:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	e002      	b.n	8002a64 <getAccelGyroData1+0x260>
      //accel->sensortime = 0;
      //gyro->sensortime = 0;
      ;
    }
  } else {
    rslt = BMI160_E_COM_FAIL;
 8002a5e:	23fe      	movs	r3, #254	; 0xfe
 8002a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return rslt;
 8002a64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3730      	adds	r7, #48	; 0x30
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <getRegs>:

//底层通信层
int8_t getRegs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi160Dev *dev){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	81bb      	strh	r3, [r7, #12]
  int8_t rslt = BMI160_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]
  if (dev == NULL) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <getRegs+0x22>
    rslt = BMI160_E_NULL_PTR;
 8002a8c:	23ff      	movs	r3, #255	; 0xff
 8002a8e:	75fb      	strb	r3, [r7, #23]
 8002a90:	e00d      	b.n	8002aae <getRegs+0x3e>
  } else {
    rslt = I2cGetRegs(dev, reg_addr, data, len);
 8002a92:	89bb      	ldrh	r3, [r7, #12]
 8002a94:	7bf9      	ldrb	r1, [r7, #15]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f80f 	bl	8002abc <I2cGetRegs>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK){
 8002aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <getRegs+0x3e>
      rslt = BMI160_E_COM_FAIL;
 8002aaa:	23fe      	movs	r3, #254	; 0xfe
 8002aac:	75fb      	strb	r3, [r7, #23]
    }
  }
  return rslt;
 8002aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <I2cGetRegs>:

int8_t I2cGetRegs(struct bmi160Dev *dev, uint8_t reg_addr, uint8_t *data, uint16_t len){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	72fb      	strb	r3, [r7, #11]
 8002acc:	4613      	mov	r3, r2
 8002ace:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&hi2c2,dev->id<<1,&reg_addr,1,1000);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	b299      	uxth	r1, r3
 8002ada:	f107 020b 	add.w	r2, r7, #11
 8002ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <I2cGetRegs+0x5c>)
 8002ae8:	f001 fc42 	bl	8004370 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8002aec:	200a      	movs	r0, #10
 8002aee:	f000 ff4d 	bl	800398c <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c2,dev->id<<1,data,len,1000);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	785b      	ldrb	r3, [r3, #1]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	b299      	uxth	r1, r3
 8002afc:	893a      	ldrh	r2, [r7, #8]
 8002afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4803      	ldr	r0, [pc, #12]	; (8002b18 <I2cGetRegs+0x5c>)
 8002b0a:	f001 fd2f 	bl	800456c <HAL_I2C_Master_Receive>
  return BMI160_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200005a4 	.word	0x200005a4

08002b1c <setRegs>:

int8_t setRegs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi160Dev *dev){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4603      	mov	r3, r0
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	81bb      	strh	r3, [r7, #12]
  int8_t rslt = BMI160_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
  uint8_t count = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75bb      	strb	r3, [r7, #22]
  if(dev == NULL){
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <setRegs+0x26>
    rslt = BMI160_E_NULL_PTR;
 8002b3c:	23ff      	movs	r3, #255	; 0xff
 8002b3e:	75fb      	strb	r3, [r7, #23]
 8002b40:	e010      	b.n	8002b64 <setRegs+0x48>
  }else{
    rslt =I2cSetRegs(dev,reg_addr,data,len);
 8002b42:	89bb      	ldrh	r3, [r7, #12]
 8002b44:	7bf9      	ldrb	r1, [r7, #15]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f811 	bl	8002b70 <I2cSetRegs>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(1);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f000 ff1a 	bl	800398c <HAL_Delay>
    if(rslt != BMI160_OK)
 8002b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <setRegs+0x48>
      rslt = BMI160_E_COM_FAIL;
 8002b60:	23fe      	movs	r3, #254	; 0xfe
 8002b62:	75fb      	strb	r3, [r7, #23]
  }
  return rslt;
 8002b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2cSetRegs>:

int8_t I2cSetRegs(struct bmi160Dev *dev, uint8_t reg_addr, uint8_t *data, uint16_t len){
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b0c9      	sub	sp, #292	; 0x124
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	f107 040c 	add.w	r4, r7, #12
 8002b7a:	6020      	str	r0, [r4, #0]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	1d39      	adds	r1, r7, #4
 8002b80:	600a      	str	r2, [r1, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	f107 030b 	add.w	r3, r7, #11
 8002b88:	4602      	mov	r2, r0
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	f107 0308 	add.w	r3, r7, #8
 8002b90:	460a      	mov	r2, r1
 8002b92:	801a      	strh	r2, [r3, #0]
  uint8_t buf[255]={0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	4618      	mov	r0, r3
 8002b9a:	23ff      	movs	r3, #255	; 0xff
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	f009 fc53 	bl	800c44a <memset>
  buf[0]=reg_addr;
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	f107 020b 	add.w	r2, r7, #11
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	701a      	strb	r2, [r3, #0]
  for(int i=1;i<len+1;i++)
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bb6:	e012      	b.n	8002bde <I2cSetRegs+0x6e>
	  buf[i]=data[i-1];
 8002bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	1d3a      	adds	r2, r7, #4
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	7819      	ldrb	r1, [r3, #0]
 8002bc6:	f107 0214 	add.w	r2, r7, #20
 8002bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bce:	4413      	add	r3, r2
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
  for(int i=1;i<len+1;i++)
 8002bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bea:	429a      	cmp	r2, r3
 8002bec:	dbe4      	blt.n	8002bb8 <I2cSetRegs+0x48>
  HAL_I2C_Master_Transmit(&hi2c2,dev->id<<1,buf,len+1,1000);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	b298      	uxth	r0, r3
 8002c06:	f107 0214 	add.w	r2, r7, #20
 8002c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4603      	mov	r3, r0
 8002c12:	4804      	ldr	r0, [pc, #16]	; (8002c24 <I2cSetRegs+0xb4>)
 8002c14:	f001 fbac 	bl	8004370 <HAL_I2C_Master_Transmit>
  return BMI160_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	200005a4 	.word	0x200005a4

08002c28 <reoprt_sysex>:
 *  Created on: Nov 2, 2020
 *      Author: Administrator
 */
#include "firmata.h"
#if 1
static void reoprt_sysex(uint8_t command, uint8_t argc, uint8_t *argv){
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	603a      	str	r2, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
 8002c34:	460b      	mov	r3, r1
 8002c36:	71bb      	strb	r3, [r7, #6]
	uint8_t mode = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	switch(command){
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b51      	cmp	r3, #81	; 0x51
 8002c42:	f000 8114 	beq.w	8002e6e <reoprt_sysex+0x246>
 8002c46:	2b76      	cmp	r3, #118	; 0x76
 8002c48:	f000 8113 	beq.w	8002e72 <reoprt_sysex+0x24a>
 8002c4c:	2b0d      	cmp	r3, #13
 8002c4e:	d000      	beq.n	8002c52 <reoprt_sysex+0x2a>
				default:
					break;
			}
			break;
		default :
			break;
 8002c50:	e110      	b.n	8002e74 <reoprt_sysex+0x24c>
			mode = argv[0];
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			float acceleration=0.0;
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	623b      	str	r3, [r7, #32]
			uint8_t Accbuf[5]={0xf0,0x0d,0x00,0x00,0xf7};
 8002c60:	4a86      	ldr	r2, [pc, #536]	; (8002e7c <reoprt_sysex+0x254>)
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c6a:	6018      	str	r0, [r3, #0]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	7019      	strb	r1, [r3, #0]
			uint8_t symbol=0;//0:正；1：负
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t data=0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	77fb      	strb	r3, [r7, #31]
			uint8_t stepbuf[7]={0xf0,0x0d,0x00,0x00,0x00,0x00,0xf7};
 8002c7a:	4a81      	ldr	r2, [pc, #516]	; (8002e80 <reoprt_sysex+0x258>)
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c84:	6018      	str	r0, [r3, #0]
 8002c86:	3304      	adds	r3, #4
 8002c88:	8019      	strh	r1, [r3, #0]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	0c0a      	lsrs	r2, r1, #16
 8002c8e:	701a      	strb	r2, [r3, #0]
			uint32_t step=0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
			uint8_t addr=0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			switch(mode){
 8002c9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <reoprt_sysex+0x82>
 8002ca2:	2b0e      	cmp	r3, #14
 8002ca4:	f000 80df 	beq.w	8002e66 <reoprt_sysex+0x23e>
					break;
 8002ca8:	e0e0      	b.n	8002e6c <reoprt_sysex+0x244>
					if(argv[1]==GYROSCOPE_BEGIN){
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11a      	bne.n	8002cea <reoprt_sysex+0xc2>
						if(argv[3]==0)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3303      	adds	r3, #3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <reoprt_sysex+0x9e>
							addr=0x68;
 8002cbe:	2368      	movs	r3, #104	; 0x68
 8002cc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002cc4:	e007      	b.n	8002cd6 <reoprt_sysex+0xae>
						else if(argv[3]==1)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3303      	adds	r3, #3
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <reoprt_sysex+0xae>
							addr=0x69;
 8002cd0:	2369      	movs	r3, #105	; 0x69
 8002cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						begin(argv[2],addr);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe f956 	bl	8000f94 <begin>
					break;
 8002ce8:	e0bf      	b.n	8002e6a <reoprt_sysex+0x242>
					}else if(argv[1]==GYROSCOPE_GET_MESSAGE){
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	f040 80ba 	bne.w	8002e6a <reoprt_sysex+0x242>
						switch(argv[2]){
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	f200 80b0 	bhi.w	8002e62 <reoprt_sysex+0x23a>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <reoprt_sysex+0xe0>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d73 	.word	0x08002d73
 8002d10:	08002dcd 	.word	0x08002dcd
 8002d14:	08002e27 	.word	0x08002e27
								acceleration=getAccX();
 8002d18:	f7ff f9b6 	bl	8002088 <getAccX>
 8002d1c:	6238      	str	r0, [r7, #32]
								if(acceleration<0)
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	6a38      	ldr	r0, [r7, #32]
 8002d24:	f7fe f8e8 	bl	8000ef8 <__aeabi_fcmplt>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <reoprt_sysex+0x10c>
									symbol=1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								data=(uint8_t)(fabs(acceleration)*100);
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fbe0 	bl	8000500 <__aeabi_f2d>
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <reoprt_sysex+0x25c>)
 8002d46:	f7fd fc33 	bl	80005b0 <__aeabi_dmul>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	4618      	mov	r0, r3
 8002d50:	4621      	mov	r1, r4
 8002d52:	f7fd ff05 	bl	8000b60 <__aeabi_d2uiz>
 8002d56:	4603      	mov	r3, r0
 8002d58:	77fb      	strb	r3, [r7, #31]
								Accbuf[2]=symbol;
 8002d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d5e:	74bb      	strb	r3, [r7, #18]
								Accbuf[3]=data;
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	74fb      	strb	r3, [r7, #19]
								CDC_Transmit_FS(Accbuf,5);
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	2105      	movs	r1, #5
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f008 ff52 	bl	800bc14 <CDC_Transmit_FS>
								break;
 8002d70:	e078      	b.n	8002e64 <reoprt_sysex+0x23c>
								acceleration=getAccY();
 8002d72:	f7ff f9b1 	bl	80020d8 <getAccY>
 8002d76:	6238      	str	r0, [r7, #32]
								if(acceleration<0)
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	6a38      	ldr	r0, [r7, #32]
 8002d7e:	f7fe f8bb 	bl	8000ef8 <__aeabi_fcmplt>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <reoprt_sysex+0x166>
									symbol=1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								data=(uint8_t)(fabs(acceleration)*100);
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbb3 	bl	8000500 <__aeabi_f2d>
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <reoprt_sysex+0x25c>)
 8002da0:	f7fd fc06 	bl	80005b0 <__aeabi_dmul>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	4618      	mov	r0, r3
 8002daa:	4621      	mov	r1, r4
 8002dac:	f7fd fed8 	bl	8000b60 <__aeabi_d2uiz>
 8002db0:	4603      	mov	r3, r0
 8002db2:	77fb      	strb	r3, [r7, #31]
								Accbuf[2]=symbol;
 8002db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002db8:	74bb      	strb	r3, [r7, #18]
								Accbuf[3]=data;
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	74fb      	strb	r3, [r7, #19]
								CDC_Transmit_FS(Accbuf,5);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	2105      	movs	r1, #5
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f008 ff25 	bl	800bc14 <CDC_Transmit_FS>
								break;
 8002dca:	e04b      	b.n	8002e64 <reoprt_sysex+0x23c>
								acceleration=getAccZ();
 8002dcc:	f7ff f9ac 	bl	8002128 <getAccZ>
 8002dd0:	6238      	str	r0, [r7, #32]
								if(acceleration<0)
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	6a38      	ldr	r0, [r7, #32]
 8002dd8:	f7fe f88e 	bl	8000ef8 <__aeabi_fcmplt>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <reoprt_sysex+0x1c0>
									symbol=1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								data=(uint8_t)(fabs(acceleration)*100);
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fb86 	bl	8000500 <__aeabi_f2d>
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <reoprt_sysex+0x25c>)
 8002dfa:	f7fd fbd9 	bl	80005b0 <__aeabi_dmul>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460c      	mov	r4, r1
 8002e02:	4618      	mov	r0, r3
 8002e04:	4621      	mov	r1, r4
 8002e06:	f7fd feab 	bl	8000b60 <__aeabi_d2uiz>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	77fb      	strb	r3, [r7, #31]
								Accbuf[2]=symbol;
 8002e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e12:	74bb      	strb	r3, [r7, #18]
								Accbuf[3]=data;
 8002e14:	7ffb      	ldrb	r3, [r7, #31]
 8002e16:	74fb      	strb	r3, [r7, #19]
								CDC_Transmit_FS(Accbuf,5);
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	2105      	movs	r1, #5
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f008 fef8 	bl	800bc14 <CDC_Transmit_FS>
								break;
 8002e24:	e01e      	b.n	8002e64 <reoprt_sysex+0x23c>
								step=getstep();
 8002e26:	f7ff f9a9 	bl	800217c <getstep>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	61bb      	str	r3, [r7, #24]
								printf("STEP==%d\n",step);
 8002e2e:	69b9      	ldr	r1, [r7, #24]
 8002e30:	4815      	ldr	r0, [pc, #84]	; (8002e88 <reoprt_sysex+0x260>)
 8002e32:	f00a f809 	bl	800ce48 <iprintf>
								stepbuf[2]=(uint8_t)step;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	72bb      	strb	r3, [r7, #10]
								stepbuf[3]=(uint8_t)(step>>8);
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	72fb      	strb	r3, [r7, #11]
								stepbuf[4]=(uint8_t)(step>>16);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	733b      	strb	r3, [r7, #12]
								stepbuf[5]=(uint8_t)(step>>24);
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	0e1b      	lsrs	r3, r3, #24
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	737b      	strb	r3, [r7, #13]
								CDC_Transmit_FS(stepbuf,7);
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	2107      	movs	r1, #7
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f008 feda 	bl	800bc14 <CDC_Transmit_FS>
								break;
 8002e60:	e000      	b.n	8002e64 <reoprt_sysex+0x23c>
								break;
 8002e62:	bf00      	nop
					break;
 8002e64:	e001      	b.n	8002e6a <reoprt_sysex+0x242>
					break;
 8002e66:	bf00      	nop
 8002e68:	e004      	b.n	8002e74 <reoprt_sysex+0x24c>
					break;
 8002e6a:	bf00      	nop
			break;
 8002e6c:	e002      	b.n	8002e74 <reoprt_sysex+0x24c>
			break;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <reoprt_sysex+0x24c>
			break;
 8002e72:	bf00      	nop
	}
}
 8002e74:	bf00      	nop
 8002e76:	372c      	adds	r7, #44	; 0x2c
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd90      	pop	{r4, r7, pc}
 8002e7c:	0800eab8 	.word	0x0800eab8
 8002e80:	0800eac0 	.word	0x0800eac0
 8002e84:	40590000 	.word	0x40590000
 8002e88:	0800eaac 	.word	0x0800eaac

08002e8c <sendFirmwareVersion>:

static void sendFirmwareVersion(uint8_t major, uint8_t minor, size_t bytec, uint8_t *bytev){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60ba      	str	r2, [r7, #8]
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4603      	mov	r3, r0
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	73bb      	strb	r3, [r7, #14]
	uint8_t msg[5]={START_SYSEX,REPORT_FIRMWARE,major,minor,END_SYSEX};
 8002e9e:	23f0      	movs	r3, #240	; 0xf0
 8002ea0:	743b      	strb	r3, [r7, #16]
 8002ea2:	2379      	movs	r3, #121	; 0x79
 8002ea4:	747b      	strb	r3, [r7, #17]
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	7bbb      	ldrb	r3, [r7, #14]
 8002eac:	74fb      	strb	r3, [r7, #19]
 8002eae:	23f7      	movs	r3, #247	; 0xf7
 8002eb0:	753b      	strb	r3, [r7, #20]
	CDC_Transmit_FS(msg,5);
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	2105      	movs	r1, #5
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f008 feab 	bl	800bc14 <CDC_Transmit_FS>
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <reoprt_firmware>:

/**
 * 上报版本信息
 */
static void reoprt_firmware(){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
	const size_t major_version_offset = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
	const size_t minor_version_offset = 2;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	60bb      	str	r3, [r7, #8]
	const size_t string_offset = 3;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	607b      	str	r3, [r7, #4]
	if(sysexBytesRead < 3){/*错误格式，用于Firmata V3.0.0 */
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <reoprt_firmware+0x3c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d80b      	bhi.n	8002efa <reoprt_firmware+0x32>
		sendFirmwareVersion(FIRMATA_MAJOR, FIRMATA_MINOR, strlen(myname), (uint8_t *)myname);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <reoprt_firmware+0x40>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd f99e 	bl	8000228 <strlen>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <reoprt_firmware+0x40>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2106      	movs	r1, #6
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	f7ff ffc9 	bl	8002e8c <sendFirmwareVersion>
	}
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000608 	.word	0x20000608
 8002f08:	20000004 	.word	0x20000004

08002f0c <getPinMode>:

uint8_t getPinMode(uint8_t pin){
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
	if((pin<6) || (pin>7))
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d902      	bls.n	8002f22 <getPinMode+0x16>
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	2b07      	cmp	r3, #7
 8002f20:	d901      	bls.n	8002f26 <getPinMode+0x1a>
		return 255;
 8002f22:	23ff      	movs	r3, #255	; 0xff
 8002f24:	e003      	b.n	8002f2e <getPinMode+0x22>
	return pinConfig[pin-6];
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	3b06      	subs	r3, #6
 8002f2a:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <getPinMode+0x2c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	20000610 	.word	0x20000610

08002f3c <firmata_setPinMode>:

/**
 * 根据命令设置IO口的模式
 */
static void firmata_setPinMode(uint8_t pin, int mode){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	71fb      	strb	r3, [r7, #7]
	if(getPinMode(pin) == PIN_MODE_IGNORE){
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ffde 	bl	8002f0c <getPinMode>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b7f      	cmp	r3, #127	; 0x7f
 8002f54:	d00c      	beq.n	8002f70 <firmata_setPinMode+0x34>
		return;
	}
	if((pin<6) || (pin>7))
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d90b      	bls.n	8002f74 <firmata_setPinMode+0x38>
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	2b07      	cmp	r3, #7
 8002f60:	d808      	bhi.n	8002f74 <firmata_setPinMode+0x38>
		return ;
	pinConfig[pin-6]=mode;
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	3b06      	subs	r3, #6
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	b2d1      	uxtb	r1, r2
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <firmata_setPinMode+0x40>)
 8002f6c:	54d1      	strb	r1, [r2, r3]
 8002f6e:	e002      	b.n	8002f76 <firmata_setPinMode+0x3a>
		return;
 8002f70:	bf00      	nop
 8002f72:	e000      	b.n	8002f76 <firmata_setPinMode+0x3a>
		return ;
 8002f74:	bf00      	nop
}
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000610 	.word	0x20000610

08002f80 <firmata_setDigitalPinValue>:
 */

/**
 * 解析处理firmata协议包里的数字口的操作，对应pymata4的digital_pin_write
 */
static void firmata_setDigitalPinValue(uint8_t pin, int value){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
	if(getPinMode(pin) == PIN_MODE_OUTPUT){
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ffbc 	bl	8002f0c <getPinMode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d115      	bne.n	8002fc6 <firmata_setDigitalPinValue+0x46>
		switch(pin){
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d002      	beq.n	8002fa6 <firmata_setDigitalPinValue+0x26>
 8002fa0:	2b07      	cmp	r3, #7
 8002fa2:	d008      	beq.n	8002fb6 <firmata_setDigitalPinValue+0x36>
				break;
			case 7:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,value);
				break;
			default:
				break;
 8002fa4:	e010      	b.n	8002fc8 <firmata_setDigitalPinValue+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,value);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	2140      	movs	r1, #64	; 0x40
 8002fae:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <firmata_setDigitalPinValue+0x50>)
 8002fb0:	f001 f88e 	bl	80040d0 <HAL_GPIO_WritePin>
				break;
 8002fb4:	e008      	b.n	8002fc8 <firmata_setDigitalPinValue+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,value);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <firmata_setDigitalPinValue+0x50>)
 8002fc0:	f001 f886 	bl	80040d0 <HAL_GPIO_WritePin>
				break;
 8002fc4:	e000      	b.n	8002fc8 <firmata_setDigitalPinValue+0x48>
		}

	}
 8002fc6:	bf00      	nop
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40010800 	.word	0x40010800

08002fd4 <firmata_processSysexMessage>:
}

/**
 * 从dataBuffer中解析接收到的完整数据包
 */
void firmata_processSysexMessage(void){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	switch(dataBuffer[0]){ /*第一位是命令位*/
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <firmata_processSysexMessage+0x34>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b71      	cmp	r3, #113	; 0x71
 8002fde:	d010      	beq.n	8003002 <firmata_processSysexMessage+0x2e>
 8002fe0:	2b79      	cmp	r3, #121	; 0x79
 8002fe2:	d102      	bne.n	8002fea <firmata_processSysexMessage+0x16>
		case REPORT_FIRMWARE:
			reoprt_firmware();
 8002fe4:	f7ff ff70 	bl	8002ec8 <reoprt_firmware>
			break;
 8002fe8:	e00c      	b.n	8003004 <firmata_processSysexMessage+0x30>
		case STRING_DATA:
			break;
		default:
			reoprt_sysex(dataBuffer[0], sysexBytesRead - 1, dataBuffer + 1);
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <firmata_processSysexMessage+0x34>)
 8002fec:	7818      	ldrb	r0, [r3, #0]
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <firmata_processSysexMessage+0x38>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <firmata_processSysexMessage+0x3c>)
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f7ff fe14 	bl	8002c28 <reoprt_sysex>
			break;
 8003000:	e000      	b.n	8003004 <firmata_processSysexMessage+0x30>
			break;
 8003002:	bf00      	nop
	}
}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000618 	.word	0x20000618
 800300c:	20000608 	.word	0x20000608
 8003010:	20000619 	.word	0x20000619

08003014 <firmata_parse>:

void firmata_parse(uint8_t* inputData,uint8_t datalen){
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
	uint8_t command;
	if(inputData[0] < 0xF0){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2bef      	cmp	r3, #239	; 0xef
 8003026:	d80c      	bhi.n	8003042 <firmata_parse+0x2e>
		command = inputData[0] & 0xF0;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f023 030f 	bic.w	r3, r3, #15
 8003030:	73fb      	strb	r3, [r7, #15]
		multiByteChannel = inputData[0] & 0x0F;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	b2da      	uxtb	r2, r3
 800303c:	4b30      	ldr	r3, [pc, #192]	; (8003100 <firmata_parse+0xec>)
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e002      	b.n	8003048 <firmata_parse+0x34>
	}else{
		command = inputData[0];
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	73fb      	strb	r3, [r7, #15]
	}
	switch(command){
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2bf0      	cmp	r3, #240	; 0xf0
 800304c:	d02e      	beq.n	80030ac <firmata_parse+0x98>
 800304e:	2bf0      	cmp	r3, #240	; 0xf0
 8003050:	dc0b      	bgt.n	800306a <firmata_parse+0x56>
 8003052:	2bc0      	cmp	r3, #192	; 0xc0
 8003054:	d04c      	beq.n	80030f0 <firmata_parse+0xdc>
 8003056:	2bc0      	cmp	r3, #192	; 0xc0
 8003058:	dc02      	bgt.n	8003060 <firmata_parse+0x4c>
 800305a:	2b90      	cmp	r3, #144	; 0x90
 800305c:	d010      	beq.n	8003080 <firmata_parse+0x6c>
 800305e:	e04c      	b.n	80030fa <firmata_parse+0xe6>
 8003060:	2bd0      	cmp	r3, #208	; 0xd0
 8003062:	d045      	beq.n	80030f0 <firmata_parse+0xdc>
 8003064:	2be0      	cmp	r3, #224	; 0xe0
 8003066:	d00b      	beq.n	8003080 <firmata_parse+0x6c>
 8003068:	e047      	b.n	80030fa <firmata_parse+0xe6>
 800306a:	2bf5      	cmp	r3, #245	; 0xf5
 800306c:	d013      	beq.n	8003096 <firmata_parse+0x82>
 800306e:	2bf5      	cmp	r3, #245	; 0xf5
 8003070:	dc02      	bgt.n	8003078 <firmata_parse+0x64>
 8003072:	2bf4      	cmp	r3, #244	; 0xf4
 8003074:	d004      	beq.n	8003080 <firmata_parse+0x6c>
 8003076:	e040      	b.n	80030fa <firmata_parse+0xe6>
 8003078:	2bf9      	cmp	r3, #249	; 0xf9
 800307a:	d03b      	beq.n	80030f4 <firmata_parse+0xe0>
 800307c:	2bff      	cmp	r3, #255	; 0xff
				dataBuffer[i-1]=inputData[i];
			sysexBytesRead=datalen-2;
			firmata_processSysexMessage();
			break;
		case SYSTEM_RESET:
			break;
 800307e:	e03c      	b.n	80030fa <firmata_parse+0xe6>
			firmata_setPinMode(inputData[1],inputData[2]);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3301      	adds	r3, #1
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3302      	adds	r3, #2
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7ff ff54 	bl	8002f3c <firmata_setPinMode>
			break;
 8003094:	e031      	b.n	80030fa <firmata_parse+0xe6>
			firmata_setDigitalPinValue(inputData[1],inputData[2]);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3301      	adds	r3, #1
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3302      	adds	r3, #2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f7ff ff6b 	bl	8002f80 <firmata_setDigitalPinValue>
			break;
 80030aa:	e026      	b.n	80030fa <firmata_parse+0xe6>
			if(END_SYSEX!=inputData[datalen-1])
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2bf7      	cmp	r3, #247	; 0xf7
 80030b8:	d11e      	bne.n	80030f8 <firmata_parse+0xe4>
			for(int i=1;i<datalen-1;i++)
 80030ba:	2301      	movs	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	e00a      	b.n	80030d6 <firmata_parse+0xc2>
				dataBuffer[i-1]=inputData[i];
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	441a      	add	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	7811      	ldrb	r1, [r2, #0]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <firmata_parse+0xf0>)
 80030ce:	54d1      	strb	r1, [r2, r3]
			for(int i=1;i<datalen-1;i++)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	3b01      	subs	r3, #1
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	429a      	cmp	r2, r3
 80030de:	dbef      	blt.n	80030c0 <firmata_parse+0xac>
			sysexBytesRead=datalen-2;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	3b02      	subs	r3, #2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <firmata_parse+0xf4>)
 80030e8:	601a      	str	r2, [r3, #0]
			firmata_processSysexMessage();
 80030ea:	f7ff ff73 	bl	8002fd4 <firmata_processSysexMessage>
			break;
 80030ee:	e004      	b.n	80030fa <firmata_parse+0xe6>
			break;
 80030f0:	bf00      	nop
 80030f2:	e002      	b.n	80030fa <firmata_parse+0xe6>
		case REPORT_VERSION:
			break;
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <firmata_parse+0xe6>
				return ;
 80030f8:	bf00      	nop
	}
}
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	2000060c 	.word	0x2000060c
 8003104:	20000618 	.word	0x20000618
 8003108:	20000608 	.word	0x20000608

0800310c <__io_putchar>:



PUTCHAR_PROTOTYPE

{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

//同样USART2改为你的串口

HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8003114:	1d39      	adds	r1, r7, #4
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	2201      	movs	r2, #1
 800311c:	4803      	ldr	r0, [pc, #12]	; (800312c <__io_putchar+0x20>)
 800311e:	f004 fcf6 	bl	8007b0e <HAL_UART_Transmit>

    return ch;
 8003122:	687b      	ldr	r3, [r7, #4]

}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200006ac 	.word	0x200006ac

08003130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003134:	f000 fbc8 	bl	80038c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8003138:	2100      	movs	r1, #0
 800313a:	4814      	ldr	r0, [pc, #80]	; (800318c <main+0x5c>)
 800313c:	f004 f842 	bl	80071c4 <HAL_TIM_PWM_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003140:	f000 f82e 	bl	80031a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,1);
 8003144:	2201      	movs	r2, #1
 8003146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800314a:	4811      	ldr	r0, [pc, #68]	; (8003190 <main+0x60>)
 800314c:	f000 ffc0 	bl	80040d0 <HAL_GPIO_WritePin>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003150:	f000 f92a 	bl	80033a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8003154:	f008 fc8c 	bl	800ba70 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8003158:	f000 f8ae 	bl	80032b8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800315c:	f000 f8fa 	bl	8003354 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003160:	f000 f87c 	bl	800325c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,1);
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800316a:	4809      	ldr	r0, [pc, #36]	; (8003190 <main+0x60>)
 800316c:	f000 ffb0 	bl	80040d0 <HAL_GPIO_WritePin>
  //BMI160test();
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(flag2==1){
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <main+0x64>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d1fb      	bne.n	8003170 <main+0x40>
		  firmata_parse(my_RxBuf,my_RxLength);
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <main+0x68>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	4807      	ldr	r0, [pc, #28]	; (800319c <main+0x6c>)
 8003180:	f7ff ff48 	bl	8003014 <firmata_parse>
		  flag2=0;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <main+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
	  if(flag2==1){
 800318a:	e7f1      	b.n	8003170 <main+0x40>
 800318c:	20000664 	.word	0x20000664
 8003190:	40011000 	.word	0x40011000
 8003194:	200009b4 	.word	0x200009b4
 8003198:	200009b8 	.word	0x200009b8
 800319c:	200009bc 	.word	0x200009bc

080031a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b096      	sub	sp, #88	; 0x58
 80031a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031aa:	2228      	movs	r2, #40	; 0x28
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f009 f94b 	bl	800c44a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	611a      	str	r2, [r3, #16]
 80031d2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80031de:	2300      	movs	r3, #0
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031e2:	2301      	movs	r3, #1
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031e6:	2302      	movs	r3, #2
 80031e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80031f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 fac0 	bl	8006780 <HAL_RCC_OscConfig>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003206:	f000 f963 	bl	80034d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800320a:	230f      	movs	r3, #15
 800320c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800320e:	2302      	movs	r3, #2
 8003210:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	2101      	movs	r1, #1
 8003226:	4618      	mov	r0, r3
 8003228:	f003 fd2a 	bl	8006c80 <HAL_RCC_ClockConfig>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003232:	f000 f94d 	bl	80034d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003236:	2310      	movs	r3, #16
 8003238:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800323a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800323e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f003 feb8 	bl	8006fb8 <HAL_RCCEx_PeriphCLKConfig>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800324e:	f000 f93f 	bl	80034d0 <Error_Handler>
  }
}
 8003252:	bf00      	nop
 8003254:	3758      	adds	r7, #88	; 0x58
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <MX_I2C2_Init+0x50>)
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <MX_I2C2_Init+0x54>)
 8003264:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <MX_I2C2_Init+0x50>)
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <MX_I2C2_Init+0x58>)
 800326a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <MX_I2C2_Init+0x50>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_I2C2_Init+0x50>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <MX_I2C2_Init+0x50>)
 800327a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800327e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <MX_I2C2_Init+0x50>)
 8003282:	2200      	movs	r2, #0
 8003284:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <MX_I2C2_Init+0x50>)
 8003288:	2200      	movs	r2, #0
 800328a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <MX_I2C2_Init+0x50>)
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <MX_I2C2_Init+0x50>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003298:	4804      	ldr	r0, [pc, #16]	; (80032ac <MX_I2C2_Init+0x50>)
 800329a:	f000 ff31 	bl	8004100 <HAL_I2C_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80032a4:	f000 f914 	bl	80034d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200005a4 	.word	0x200005a4
 80032b0:	40005800 	.word	0x40005800
 80032b4:	000186a0 	.word	0x000186a0

080032b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032cc:	463b      	mov	r3, r7
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <MX_TIM3_Init+0x94>)
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <MX_TIM3_Init+0x98>)
 80032d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <MX_TIM3_Init+0x94>)
 80032dc:	f240 4237 	movw	r2, #1079	; 0x437
 80032e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <MX_TIM3_Init+0x94>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80032e8:	4b18      	ldr	r3, [pc, #96]	; (800334c <MX_TIM3_Init+0x94>)
 80032ea:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80032ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <MX_TIM3_Init+0x94>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <MX_TIM3_Init+0x94>)
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032fc:	4813      	ldr	r0, [pc, #76]	; (800334c <MX_TIM3_Init+0x94>)
 80032fe:	f003 ff11 	bl	8007124 <HAL_TIM_Base_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003308:	f000 f8e2 	bl	80034d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	4619      	mov	r1, r3
 8003318:	480c      	ldr	r0, [pc, #48]	; (800334c <MX_TIM3_Init+0x94>)
 800331a:	f004 f915 	bl	8007548 <HAL_TIM_ConfigClockSource>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003324:	f000 f8d4 	bl	80034d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003330:	463b      	mov	r3, r7
 8003332:	4619      	mov	r1, r3
 8003334:	4805      	ldr	r0, [pc, #20]	; (800334c <MX_TIM3_Init+0x94>)
 8003336:	f004 fb1f 	bl	8007978 <HAL_TIMEx_MasterConfigSynchronization>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003340:	f000 f8c6 	bl	80034d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000664 	.word	0x20000664
 8003350:	40000400 	.word	0x40000400

08003354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <MX_USART1_UART_Init+0x50>)
 800335c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 8003360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 800337a:	220c      	movs	r2, #12
 800337c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <MX_USART1_UART_Init+0x4c>)
 800338c:	f004 fb72 	bl	8007a74 <HAL_UART_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003396:	f000 f89b 	bl	80034d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200006ac 	.word	0x200006ac
 80033a4:	40013800 	.word	0x40013800

080033a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ae:	f107 0310 	add.w	r3, r7, #16
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4a3f      	ldr	r2, [pc, #252]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033c2:	f043 0320 	orr.w	r3, r3, #32
 80033c6:	6193      	str	r3, [r2, #24]
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d4:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	4a39      	ldr	r2, [pc, #228]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	6193      	str	r3, [r2, #24]
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	4a33      	ldr	r2, [pc, #204]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033f2:	f043 0308 	orr.w	r3, r3, #8
 80033f6:	6193      	str	r3, [r2, #24]
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <MX_GPIO_Init+0x118>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003404:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <MX_GPIO_Init+0x118>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <MX_GPIO_Init+0x118>)
 800340a:	f043 0310 	orr.w	r3, r3, #16
 800340e:	6193      	str	r3, [r2, #24]
 8003410:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <MX_GPIO_Init+0x118>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800341c:	2200      	movs	r2, #0
 800341e:	21c0      	movs	r1, #192	; 0xc0
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <MX_GPIO_Init+0x11c>)
 8003422:	f000 fe55 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8003426:	2200      	movs	r2, #0
 8003428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800342c:	4826      	ldr	r0, [pc, #152]	; (80034c8 <MX_GPIO_Init+0x120>)
 800342e:	f000 fe4f 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003432:	23c0      	movs	r3, #192	; 0xc0
 8003434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003436:	2301      	movs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	2302      	movs	r3, #2
 8003440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0310 	add.w	r3, r7, #16
 8003446:	4619      	mov	r1, r3
 8003448:	481e      	ldr	r0, [pc, #120]	; (80034c4 <MX_GPIO_Init+0x11c>)
 800344a:	f000 fcd7 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800344e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4619      	mov	r1, r3
 8003462:	4818      	ldr	r0, [pc, #96]	; (80034c4 <MX_GPIO_Init+0x11c>)
 8003464:	f000 fcca 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	2301      	movs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2302      	movs	r3, #2
 8003478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	4619      	mov	r1, r3
 8003480:	4811      	ldr	r0, [pc, #68]	; (80034c8 <MX_GPIO_Init+0x120>)
 8003482:	f000 fcbb 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003486:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800348a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	4619      	mov	r1, r3
 800349a:	480b      	ldr	r0, [pc, #44]	; (80034c8 <MX_GPIO_Init+0x120>)
 800349c:	f000 fcae 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034a0:	2304      	movs	r3, #4
 80034a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	4619      	mov	r1, r3
 80034b2:	4806      	ldr	r0, [pc, #24]	; (80034cc <MX_GPIO_Init+0x124>)
 80034b4:	f000 fca2 	bl	8003dfc <HAL_GPIO_Init>

}
 80034b8:	bf00      	nop
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010800 	.word	0x40010800
 80034c8:	40011000 	.word	0x40011000
 80034cc:	40011400 	.word	0x40011400

080034d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_MspInit+0x5c>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_MspInit+0x5c>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6193      	str	r3, [r2, #24]
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_MspInit+0x5c>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_MspInit+0x5c>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <HAL_MspInit+0x5c>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	61d3      	str	r3, [r2, #28]
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_MspInit+0x5c>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_MspInit+0x60>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_MspInit+0x60>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	40021000 	.word	0x40021000
 800353c:	40010000 	.word	0x40010000

08003540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <HAL_I2C_MspInit+0x74>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d124      	bne.n	80035aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003560:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_I2C_MspInit+0x78>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <HAL_I2C_MspInit+0x78>)
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	6193      	str	r3, [r2, #24]
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_I2C_MspInit+0x78>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003578:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800357c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800357e:	2312      	movs	r3, #18
 8003580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	4619      	mov	r1, r3
 800358c:	480b      	ldr	r0, [pc, #44]	; (80035bc <HAL_I2C_MspInit+0x7c>)
 800358e:	f000 fc35 	bl	8003dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_I2C_MspInit+0x78>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <HAL_I2C_MspInit+0x78>)
 8003598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800359c:	61d3      	str	r3, [r2, #28]
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_I2C_MspInit+0x78>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40005800 	.word	0x40005800
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40010c00 	.word	0x40010c00

080035c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <HAL_TIM_Base_MspInit+0x44>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d113      	bne.n	80035fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_TIM_Base_MspInit+0x48>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_TIM_Base_MspInit+0x48>)
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	61d3      	str	r3, [r2, #28]
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_TIM_Base_MspInit+0x48>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	201d      	movs	r0, #29
 80035f0:	f000 fac5 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035f4:	201d      	movs	r0, #29
 80035f6:	f000 fade 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40000400 	.word	0x40000400
 8003608:	40021000 	.word	0x40021000

0800360c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <HAL_UART_MspInit+0x9c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d139      	bne.n	80036a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800362c:	4b1f      	ldr	r3, [pc, #124]	; (80036ac <HAL_UART_MspInit+0xa0>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <HAL_UART_MspInit+0xa0>)
 8003632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003636:	6193      	str	r3, [r2, #24]
 8003638:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <HAL_UART_MspInit+0xa0>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_UART_MspInit+0xa0>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_UART_MspInit+0xa0>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6193      	str	r3, [r2, #24]
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <HAL_UART_MspInit+0xa0>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800365c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003666:	2303      	movs	r3, #3
 8003668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 0310 	add.w	r3, r7, #16
 800366e:	4619      	mov	r1, r3
 8003670:	480f      	ldr	r0, [pc, #60]	; (80036b0 <HAL_UART_MspInit+0xa4>)
 8003672:	f000 fbc3 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800367a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003684:	f107 0310 	add.w	r3, r7, #16
 8003688:	4619      	mov	r1, r3
 800368a:	4809      	ldr	r0, [pc, #36]	; (80036b0 <HAL_UART_MspInit+0xa4>)
 800368c:	f000 fbb6 	bl	8003dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2025      	movs	r0, #37	; 0x25
 8003696:	f000 fa72 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800369a:	2025      	movs	r0, #37	; 0x25
 800369c:	f000 fa8b 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036a0:	bf00      	nop
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40013800 	.word	0x40013800
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40010800 	.word	0x40010800

080036b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <HardFault_Handler+0x4>

080036c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036ca:	e7fe      	b.n	80036ca <MemManage_Handler+0x4>

080036cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <BusFault_Handler+0x4>

080036d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d6:	e7fe      	b.n	80036d6 <UsageFault_Handler+0x4>

080036d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003700:	f000 f928 	bl	8003954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}

08003708 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800370e:	f001 fde4 	bl	80052da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200013f0 	.word	0x200013f0

0800371c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <TIM3_IRQHandler+0x10>)
 8003722:	f003 fe09 	bl	8007338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000664 	.word	0x20000664

08003730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <USART1_IRQHandler+0x10>)
 8003736:	f004 fa7d 	bl	8007c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200006ac 	.word	0x200006ac

08003744 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e00a      	b.n	800376c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003756:	f3af 8000 	nop.w
 800375a:	4601      	mov	r1, r0
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	60ba      	str	r2, [r7, #8]
 8003762:	b2ca      	uxtb	r2, r1
 8003764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	dbf0      	blt.n	8003756 <_read+0x12>
	}

return len;
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e009      	b.n	80037a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	60ba      	str	r2, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fcb7 	bl	800310c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	dbf1      	blt.n	8003790 <_write+0x12>
	}
	return len;
 80037ac:	687b      	ldr	r3, [r7, #4]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <_close>:

int _close(int file)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
	return -1;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037dc:	605a      	str	r2, [r3, #4]
	return 0;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <_isatty>:

int _isatty(int file)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	return 1;
 80037f2:	2301      	movs	r3, #1
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
	return 0;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
	...

08003818 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <_sbrk+0x50>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <_sbrk+0x16>
		heap_end = &end;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <_sbrk+0x50>)
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <_sbrk+0x54>)
 800382c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <_sbrk+0x50>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <_sbrk+0x50>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	466a      	mov	r2, sp
 800383e:	4293      	cmp	r3, r2
 8003840:	d907      	bls.n	8003852 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003842:	f008 fdc5 	bl	800c3d0 <__errno>
 8003846:	4602      	mov	r2, r0
 8003848:	230c      	movs	r3, #12
 800384a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
 8003850:	e006      	b.n	8003860 <_sbrk+0x48>
	}

	heap_end += incr;
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <_sbrk+0x50>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	4a03      	ldr	r2, [pc, #12]	; (8003868 <_sbrk+0x50>)
 800385c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000374 	.word	0x20000374
 800386c:	200016e0 	.word	0x200016e0

08003870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800387c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800387e:	e003      	b.n	8003888 <LoopCopyDataInit>

08003880 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003882:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003884:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003886:	3104      	adds	r1, #4

08003888 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003888:	480a      	ldr	r0, [pc, #40]	; (80038b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800388c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800388e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003890:	d3f6      	bcc.n	8003880 <CopyDataInit>
  ldr r2, =_sbss
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003894:	e002      	b.n	800389c <LoopFillZerobss>

08003896 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003898:	f842 3b04 	str.w	r3, [r2], #4

0800389c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800389e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038a0:	d3f9      	bcc.n	8003896 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038a2:	f7ff ffe5 	bl	8003870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038a6:	f008 fd99 	bl	800c3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038aa:	f7ff fc41 	bl	8003130 <main>
  bx lr
 80038ae:	4770      	bx	lr
  ldr r3, =_sidata
 80038b0:	0800ee18 	.word	0x0800ee18
  ldr r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038b8:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 80038bc:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 80038c0:	200016e0 	.word	0x200016e0

080038c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c4:	e7fe      	b.n	80038c4 <ADC1_2_IRQHandler>
	...

080038c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_Init+0x28>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_Init+0x28>)
 80038d2:	f043 0310 	orr.w	r3, r3, #16
 80038d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d8:	2003      	movs	r0, #3
 80038da:	f000 f945 	bl	8003b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038de:	2000      	movs	r0, #0
 80038e0:	f000 f808 	bl	80038f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e4:	f7ff fdfa 	bl	80034dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000

080038f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_InitTick+0x54>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_InitTick+0x58>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390a:	fbb3 f3f1 	udiv	r3, r3, r1
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f95d 	bl	8003bd2 <HAL_SYSTICK_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00e      	b.n	8003940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d80a      	bhi.n	800393e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003928:	2200      	movs	r2, #0
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f000 f925 	bl	8003b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003934:	4a06      	ldr	r2, [pc, #24]	; (8003950 <HAL_InitTick+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000008 	.word	0x20000008
 800394c:	20000010 	.word	0x20000010
 8003950:	2000000c 	.word	0x2000000c

08003954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_IncTick+0x1c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_IncTick+0x20>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_IncTick+0x20>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	20000010 	.word	0x20000010
 8003974:	200006ec 	.word	0x200006ec

08003978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return uwTick;
 800397c:	4b02      	ldr	r3, [pc, #8]	; (8003988 <HAL_GetTick+0x10>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	200006ec 	.word	0x200006ec

0800398c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003994:	f7ff fff0 	bl	8003978 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d005      	beq.n	80039b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_Delay+0x40>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039b2:	bf00      	nop
 80039b4:	f7ff ffe0 	bl	8003978 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d8f7      	bhi.n	80039b4 <HAL_Delay+0x28>
  {
  }
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000010 	.word	0x20000010

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4906      	ldr	r1, [pc, #24]	; (8003a68 <__NVIC_EnableIRQ+0x34>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	; (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b34:	d301      	bcc.n	8003b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00f      	b.n	8003b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <SysTick_Config+0x40>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b42:	210f      	movs	r1, #15
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f7ff ff90 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <SysTick_Config+0x40>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <SysTick_Config+0x40>)
 8003b54:	2207      	movs	r2, #7
 8003b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	e000e010 	.word	0xe000e010

08003b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff2d 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	4603      	mov	r3, r0
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b90:	f7ff ff42 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7ff ff90 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff5f 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff35 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ffa2 	bl	8003b24 <SysTick_Config>
 8003be0:	4603      	mov	r3, r0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d005      	beq.n	8003c0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2204      	movs	r2, #4
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e0d6      	b.n	8003dbc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 020e 	bic.w	r2, r2, #14
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d958      	bls.n	8003cec <HAL_DMA_Abort_IT+0x100>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a63      	ldr	r2, [pc, #396]	; (8003dcc <HAL_DMA_Abort_IT+0x1e0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04f      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0xf8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a61      	ldr	r2, [pc, #388]	; (8003dd0 <HAL_DMA_Abort_IT+0x1e4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d048      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xf4>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a60      	ldr	r2, [pc, #384]	; (8003dd4 <HAL_DMA_Abort_IT+0x1e8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <HAL_DMA_Abort_IT+0xee>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a5e      	ldr	r2, [pc, #376]	; (8003dd8 <HAL_DMA_Abort_IT+0x1ec>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d038      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0xe8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a5d      	ldr	r2, [pc, #372]	; (8003ddc <HAL_DMA_Abort_IT+0x1f0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d030      	beq.n	8003cce <HAL_DMA_Abort_IT+0xe2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5b      	ldr	r2, [pc, #364]	; (8003de0 <HAL_DMA_Abort_IT+0x1f4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d028      	beq.n	8003cc8 <HAL_DMA_Abort_IT+0xdc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a53      	ldr	r2, [pc, #332]	; (8003dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d020      	beq.n	8003cc2 <HAL_DMA_Abort_IT+0xd6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a57      	ldr	r2, [pc, #348]	; (8003de4 <HAL_DMA_Abort_IT+0x1f8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_DMA_Abort_IT+0xd2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_DMA_Abort_IT+0x1fc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d012      	beq.n	8003cba <HAL_DMA_Abort_IT+0xce>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a54      	ldr	r2, [pc, #336]	; (8003dec <HAL_DMA_Abort_IT+0x200>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0xc8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a53      	ldr	r2, [pc, #332]	; (8003df0 <HAL_DMA_Abort_IT+0x204>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d102      	bne.n	8003cae <HAL_DMA_Abort_IT+0xc2>
 8003ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cac:	e01b      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb2:	e018      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb8:	e015      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cba:	2310      	movs	r3, #16
 8003cbc:	e013      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e011      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc6:	e00e      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ccc:	e00b      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cd2:	e008      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd8:	e005      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cde:	e002      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	e000      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xfa>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_DMA_Abort_IT+0x208>)
 8003ce8:	6053      	str	r3, [r2, #4]
 8003cea:	e057      	b.n	8003d9c <HAL_DMA_Abort_IT+0x1b0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <HAL_DMA_Abort_IT+0x1e0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d04f      	beq.n	8003d96 <HAL_DMA_Abort_IT+0x1aa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a35      	ldr	r2, [pc, #212]	; (8003dd0 <HAL_DMA_Abort_IT+0x1e4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d048      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x1a6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_DMA_Abort_IT+0x1e8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d040      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x1a0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a32      	ldr	r2, [pc, #200]	; (8003dd8 <HAL_DMA_Abort_IT+0x1ec>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d038      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x19a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <HAL_DMA_Abort_IT+0x1f0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d030      	beq.n	8003d80 <HAL_DMA_Abort_IT+0x194>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <HAL_DMA_Abort_IT+0x1f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d028      	beq.n	8003d7a <HAL_DMA_Abort_IT+0x18e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <HAL_DMA_Abort_IT+0x1dc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d020      	beq.n	8003d74 <HAL_DMA_Abort_IT+0x188>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_DMA_Abort_IT+0x1f8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d019      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x184>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <HAL_DMA_Abort_IT+0x1fc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d012      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x180>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a28      	ldr	r2, [pc, #160]	; (8003dec <HAL_DMA_Abort_IT+0x200>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00a      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x17a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <HAL_DMA_Abort_IT+0x204>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d102      	bne.n	8003d60 <HAL_DMA_Abort_IT+0x174>
 8003d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d5e:	e01b      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d64:	e018      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d6a:	e015      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	e013      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e011      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d78:	e00e      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d7e:	e00b      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d84:	e008      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d8a:	e005      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d90:	e002      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d92:	2310      	movs	r3, #16
 8003d94:	e000      	b.n	8003d98 <HAL_DMA_Abort_IT+0x1ac>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_DMA_Abort_IT+0x20c>)
 8003d9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
    } 
  }
  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020080 	.word	0x40020080
 8003dcc:	40020008 	.word	0x40020008
 8003dd0:	4002001c 	.word	0x4002001c
 8003dd4:	40020030 	.word	0x40020030
 8003dd8:	40020044 	.word	0x40020044
 8003ddc:	40020058 	.word	0x40020058
 8003de0:	4002006c 	.word	0x4002006c
 8003de4:	40020408 	.word	0x40020408
 8003de8:	4002041c 	.word	0x4002041c
 8003dec:	40020430 	.word	0x40020430
 8003df0:	40020444 	.word	0x40020444
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020000 	.word	0x40020000

08003dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b08b      	sub	sp, #44	; 0x2c
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0e:	e133      	b.n	8004078 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e10:	2201      	movs	r2, #1
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	f040 8122 	bne.w	8004072 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b12      	cmp	r3, #18
 8003e34:	d034      	beq.n	8003ea0 <HAL_GPIO_Init+0xa4>
 8003e36:	2b12      	cmp	r3, #18
 8003e38:	d80d      	bhi.n	8003e56 <HAL_GPIO_Init+0x5a>
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d02b      	beq.n	8003e96 <HAL_GPIO_Init+0x9a>
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d804      	bhi.n	8003e4c <HAL_GPIO_Init+0x50>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d031      	beq.n	8003eaa <HAL_GPIO_Init+0xae>
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d01c      	beq.n	8003e84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e4a:	e048      	b.n	8003ede <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d043      	beq.n	8003ed8 <HAL_GPIO_Init+0xdc>
 8003e50:	2b11      	cmp	r3, #17
 8003e52:	d01b      	beq.n	8003e8c <HAL_GPIO_Init+0x90>
          break;
 8003e54:	e043      	b.n	8003ede <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e56:	4a8f      	ldr	r2, [pc, #572]	; (8004094 <HAL_GPIO_Init+0x298>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d026      	beq.n	8003eaa <HAL_GPIO_Init+0xae>
 8003e5c:	4a8d      	ldr	r2, [pc, #564]	; (8004094 <HAL_GPIO_Init+0x298>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d806      	bhi.n	8003e70 <HAL_GPIO_Init+0x74>
 8003e62:	4a8d      	ldr	r2, [pc, #564]	; (8004098 <HAL_GPIO_Init+0x29c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d020      	beq.n	8003eaa <HAL_GPIO_Init+0xae>
 8003e68:	4a8c      	ldr	r2, [pc, #560]	; (800409c <HAL_GPIO_Init+0x2a0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01d      	beq.n	8003eaa <HAL_GPIO_Init+0xae>
          break;
 8003e6e:	e036      	b.n	8003ede <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e70:	4a8b      	ldr	r2, [pc, #556]	; (80040a0 <HAL_GPIO_Init+0x2a4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d019      	beq.n	8003eaa <HAL_GPIO_Init+0xae>
 8003e76:	4a8b      	ldr	r2, [pc, #556]	; (80040a4 <HAL_GPIO_Init+0x2a8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d016      	beq.n	8003eaa <HAL_GPIO_Init+0xae>
 8003e7c:	4a8a      	ldr	r2, [pc, #552]	; (80040a8 <HAL_GPIO_Init+0x2ac>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_GPIO_Init+0xae>
          break;
 8003e82:	e02c      	b.n	8003ede <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	623b      	str	r3, [r7, #32]
          break;
 8003e8a:	e028      	b.n	8003ede <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	623b      	str	r3, [r7, #32]
          break;
 8003e94:	e023      	b.n	8003ede <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	623b      	str	r3, [r7, #32]
          break;
 8003e9e:	e01e      	b.n	8003ede <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	623b      	str	r3, [r7, #32]
          break;
 8003ea8:	e019      	b.n	8003ede <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	623b      	str	r3, [r7, #32]
          break;
 8003eb6:	e012      	b.n	8003ede <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	611a      	str	r2, [r3, #16]
          break;
 8003eca:	e008      	b.n	8003ede <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ecc:	2308      	movs	r3, #8
 8003ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	615a      	str	r2, [r3, #20]
          break;
 8003ed6:	e002      	b.n	8003ede <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
          break;
 8003edc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2bff      	cmp	r3, #255	; 0xff
 8003ee2:	d801      	bhi.n	8003ee8 <HAL_GPIO_Init+0xec>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	e001      	b.n	8003eec <HAL_GPIO_Init+0xf0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2bff      	cmp	r3, #255	; 0xff
 8003ef2:	d802      	bhi.n	8003efa <HAL_GPIO_Init+0xfe>
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_Init+0x104>
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	3b08      	subs	r3, #8
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	210f      	movs	r1, #15
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	401a      	ands	r2, r3
 8003f12:	6a39      	ldr	r1, [r7, #32]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a2 	beq.w	8004072 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f2e:	4b5f      	ldr	r3, [pc, #380]	; (80040ac <HAL_GPIO_Init+0x2b0>)
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	4a5e      	ldr	r2, [pc, #376]	; (80040ac <HAL_GPIO_Init+0x2b0>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6193      	str	r3, [r2, #24]
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_GPIO_Init+0x2b0>)
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f46:	4a5a      	ldr	r2, [pc, #360]	; (80040b0 <HAL_GPIO_Init+0x2b4>)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a51      	ldr	r2, [pc, #324]	; (80040b4 <HAL_GPIO_Init+0x2b8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01f      	beq.n	8003fb2 <HAL_GPIO_Init+0x1b6>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a50      	ldr	r2, [pc, #320]	; (80040b8 <HAL_GPIO_Init+0x2bc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_GPIO_Init+0x1b2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4f      	ldr	r2, [pc, #316]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_Init+0x1ae>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4e      	ldr	r2, [pc, #312]	; (80040c0 <HAL_GPIO_Init+0x2c4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00d      	beq.n	8003fa6 <HAL_GPIO_Init+0x1aa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4d      	ldr	r2, [pc, #308]	; (80040c4 <HAL_GPIO_Init+0x2c8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <HAL_GPIO_Init+0x1a6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a4c      	ldr	r2, [pc, #304]	; (80040c8 <HAL_GPIO_Init+0x2cc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_GPIO_Init+0x1a2>
 8003f9a:	2305      	movs	r3, #5
 8003f9c:	e00a      	b.n	8003fb4 <HAL_GPIO_Init+0x1b8>
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	e008      	b.n	8003fb4 <HAL_GPIO_Init+0x1b8>
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	e006      	b.n	8003fb4 <HAL_GPIO_Init+0x1b8>
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e004      	b.n	8003fb4 <HAL_GPIO_Init+0x1b8>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e002      	b.n	8003fb4 <HAL_GPIO_Init+0x1b8>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_GPIO_Init+0x1b8>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	f002 0203 	and.w	r2, r2, #3
 8003fba:	0092      	lsls	r2, r2, #2
 8003fbc:	4093      	lsls	r3, r2
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fc4:	493a      	ldr	r1, [pc, #232]	; (80040b0 <HAL_GPIO_Init+0x2b4>)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d006      	beq.n	8003fec <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	493a      	ldr	r1, [pc, #232]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
 8003fea:	e006      	b.n	8003ffa <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fec:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	4935      	ldr	r1, [pc, #212]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4930      	ldr	r1, [pc, #192]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
 8004012:	e006      	b.n	8004022 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004014:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	43db      	mvns	r3, r3
 800401c:	492b      	ldr	r1, [pc, #172]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 800401e:	4013      	ands	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800402e:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	4926      	ldr	r1, [pc, #152]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
 800403a:	e006      	b.n	800404a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800403c:	4b23      	ldr	r3, [pc, #140]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	43db      	mvns	r3, r3
 8004044:	4921      	ldr	r1, [pc, #132]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8004046:	4013      	ands	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d006      	beq.n	8004064 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	491c      	ldr	r1, [pc, #112]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	60cb      	str	r3, [r1, #12]
 8004062:	e006      	b.n	8004072 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	43db      	mvns	r3, r3
 800406c:	4917      	ldr	r1, [pc, #92]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 800406e:	4013      	ands	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	3301      	adds	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	fa22 f303 	lsr.w	r3, r2, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f47f aec4 	bne.w	8003e10 <HAL_GPIO_Init+0x14>
  }
}
 8004088:	bf00      	nop
 800408a:	372c      	adds	r7, #44	; 0x2c
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	10210000 	.word	0x10210000
 8004098:	10110000 	.word	0x10110000
 800409c:	10120000 	.word	0x10120000
 80040a0:	10310000 	.word	0x10310000
 80040a4:	10320000 	.word	0x10320000
 80040a8:	10220000 	.word	0x10220000
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010800 	.word	0x40010800
 80040b8:	40010c00 	.word	0x40010c00
 80040bc:	40011000 	.word	0x40011000
 80040c0:	40011400 	.word	0x40011400
 80040c4:	40011800 	.word	0x40011800
 80040c8:	40011c00 	.word	0x40011c00
 80040cc:	40010400 	.word	0x40010400

080040d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	4613      	mov	r3, r2
 80040de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040e0:	787b      	ldrb	r3, [r7, #1]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040ec:	e003      	b.n	80040f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	041a      	lsls	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e11f      	b.n	8004352 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fa0a 	bl	8003540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	; 0x24
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004164:	f002 fee2 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8004168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4a7b      	ldr	r2, [pc, #492]	; (800435c <HAL_I2C_Init+0x25c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d807      	bhi.n	8004184 <HAL_I2C_Init+0x84>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a7a      	ldr	r2, [pc, #488]	; (8004360 <HAL_I2C_Init+0x260>)
 8004178:	4293      	cmp	r3, r2
 800417a:	bf94      	ite	ls
 800417c:	2301      	movls	r3, #1
 800417e:	2300      	movhi	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e006      	b.n	8004192 <HAL_I2C_Init+0x92>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a77      	ldr	r2, [pc, #476]	; (8004364 <HAL_I2C_Init+0x264>)
 8004188:	4293      	cmp	r3, r2
 800418a:	bf94      	ite	ls
 800418c:	2301      	movls	r3, #1
 800418e:	2300      	movhi	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0db      	b.n	8004352 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a72      	ldr	r2, [pc, #456]	; (8004368 <HAL_I2C_Init+0x268>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	0c9b      	lsrs	r3, r3, #18
 80041a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a64      	ldr	r2, [pc, #400]	; (800435c <HAL_I2C_Init+0x25c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d802      	bhi.n	80041d4 <HAL_I2C_Init+0xd4>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	3301      	adds	r3, #1
 80041d2:	e009      	b.n	80041e8 <HAL_I2C_Init+0xe8>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	4a63      	ldr	r2, [pc, #396]	; (800436c <HAL_I2C_Init+0x26c>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	3301      	adds	r3, #1
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4956      	ldr	r1, [pc, #344]	; (800435c <HAL_I2C_Init+0x25c>)
 8004204:	428b      	cmp	r3, r1
 8004206:	d80d      	bhi.n	8004224 <HAL_I2C_Init+0x124>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1e59      	subs	r1, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fbb1 f3f3 	udiv	r3, r1, r3
 8004216:	3301      	adds	r3, #1
 8004218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421c:	2b04      	cmp	r3, #4
 800421e:	bf38      	it	cc
 8004220:	2304      	movcc	r3, #4
 8004222:	e04f      	b.n	80042c4 <HAL_I2C_Init+0x1c4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <HAL_I2C_Init+0x150>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e012      	b.n	8004276 <HAL_I2C_Init+0x176>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	0099      	lsls	r1, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x17e>
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_I2C_Init+0x1c4>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <HAL_I2C_Init+0x1a4>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1e58      	subs	r0, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	440b      	add	r3, r1
 8004294:	fbb0 f3f3 	udiv	r3, r0, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a2:	e00f      	b.n	80042c4 <HAL_I2C_Init+0x1c4>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	6809      	ldr	r1, [r1, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6911      	ldr	r1, [r2, #16]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	000186a0 	.word	0x000186a0
 8004360:	001e847f 	.word	0x001e847f
 8004364:	003d08ff 	.word	0x003d08ff
 8004368:	431bde83 	.word	0x431bde83
 800436c:	10624dd3 	.word	0x10624dd3

08004370 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	460b      	mov	r3, r1
 800437e:	817b      	strh	r3, [r7, #10]
 8004380:	4613      	mov	r3, r2
 8004382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7ff faf8 	bl	8003978 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 80e0 	bne.w	8004558 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2319      	movs	r3, #25
 800439e:	2201      	movs	r2, #1
 80043a0:	4970      	ldr	r1, [pc, #448]	; (8004564 <HAL_I2C_Master_Transmit+0x1f4>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fc8c 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
 80043b0:	e0d3      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_I2C_Master_Transmit+0x50>
 80043bc:	2302      	movs	r3, #2
 80043be:	e0cc      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d007      	beq.n	80043e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2210      	movs	r2, #16
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	893a      	ldrh	r2, [r7, #8]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a50      	ldr	r2, [pc, #320]	; (8004568 <HAL_I2C_Master_Transmit+0x1f8>)
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004428:	8979      	ldrh	r1, [r7, #10]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 faf6 	bl	8004a20 <I2C_MasterRequestWrite>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e08d      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004454:	e066      	b.n	8004524 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fd06 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11b      	bne.n	80044f8 <HAL_I2C_Master_Transmit+0x188>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d017      	beq.n	80044f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	6a39      	ldr	r1, [r7, #32]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fcf6 	bl	8004eee <I2C_WaitOnBTFFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b04      	cmp	r3, #4
 800450e:	d107      	bne.n	8004520 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e01a      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d194      	bne.n	8004456 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	00100002 	.word	0x00100002
 8004568:	ffff0000 	.word	0xffff0000

0800456c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	; 0x30
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	461a      	mov	r2, r3
 8004578:	460b      	mov	r3, r1
 800457a:	817b      	strh	r3, [r7, #10]
 800457c:	4613      	mov	r3, r2
 800457e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004584:	f7ff f9f8 	bl	8003978 <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b20      	cmp	r3, #32
 8004594:	f040 8238 	bne.w	8004a08 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	2319      	movs	r3, #25
 800459e:	2201      	movs	r2, #1
 80045a0:	497e      	ldr	r1, [pc, #504]	; (800479c <HAL_I2C_Master_Receive+0x230>)
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fb8c 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
 80045b0:	e22b      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_I2C_Master_Receive+0x54>
 80045bc:	2302      	movs	r3, #2
 80045be:	e224      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d007      	beq.n	80045e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2222      	movs	r2, #34	; 0x22
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2210      	movs	r2, #16
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	893a      	ldrh	r2, [r7, #8]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a5e      	ldr	r2, [pc, #376]	; (80047a0 <HAL_I2C_Master_Receive+0x234>)
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004628:	8979      	ldrh	r1, [r7, #10]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fa78 	bl	8004b24 <I2C_MasterRequestRead>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e1e5      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	d113      	bne.n	800466e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e1b9      	b.n	80049e2 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	2b01      	cmp	r3, #1
 8004674:	d11d      	bne.n	80046b2 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004684:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004686:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046ae:	b662      	cpsie	i
 80046b0:	e197      	b.n	80049e2 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d11d      	bne.n	80046f6 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046ca:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046f2:	b662      	cpsie	i
 80046f4:	e175      	b.n	80049e2 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800471c:	e161      	b.n	80049e2 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004722:	2b03      	cmp	r3, #3
 8004724:	f200 811a 	bhi.w	800495c <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	2b01      	cmp	r3, #1
 800472e:	d123      	bne.n	8004778 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fc1b 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e162      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004776:	e134      	b.n	80049e2 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	2b02      	cmp	r3, #2
 800477e:	d150      	bne.n	8004822 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	2200      	movs	r2, #0
 8004788:	4906      	ldr	r1, [pc, #24]	; (80047a4 <HAL_I2C_Master_Receive+0x238>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fa98 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e137      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
 800479a:	bf00      	nop
 800479c:	00100002 	.word	0x00100002
 80047a0:	ffff0000 	.word	0xffff0000
 80047a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80047a8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047ec:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004820:	e0df      	b.n	80049e2 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	2200      	movs	r2, #0
 800482a:	497a      	ldr	r1, [pc, #488]	; (8004a14 <HAL_I2C_Master_Receive+0x4a8>)
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fa47 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0e6      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800484c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004880:	4b65      	ldr	r3, [pc, #404]	; (8004a18 <HAL_I2C_Master_Receive+0x4ac>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	4a65      	ldr	r2, [pc, #404]	; (8004a1c <HAL_I2C_Master_Receive+0x4b0>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	0a1a      	lsrs	r2, r3, #8
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	00da      	lsls	r2, r3, #3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	3b01      	subs	r3, #1
 800489e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d117      	bne.n	80048d6 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80048c8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e099      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d1da      	bne.n	800489a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004926:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
 800495a:	e042      	b.n	80049e2 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb05 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04c      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d118      	bne.n	80049e2 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f ae99 	bne.w	800471e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3728      	adds	r7, #40	; 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	00010004 	.word	0x00010004
 8004a18:	20000008 	.word	0x20000008
 8004a1c:	14f8b589 	.word	0x14f8b589

08004a20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d006      	beq.n	8004a4a <I2C_MasterRequestWrite+0x2a>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d003      	beq.n	8004a4a <I2C_MasterRequestWrite+0x2a>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a48:	d108      	bne.n	8004a5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e00b      	b.n	8004a74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	2b12      	cmp	r3, #18
 8004a62:	d107      	bne.n	8004a74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f91d 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00d      	beq.n	8004aa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	d103      	bne.n	8004aa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e035      	b.n	8004b14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab0:	d108      	bne.n	8004ac4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ab2:	897b      	ldrh	r3, [r7, #10]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ac0:	611a      	str	r2, [r3, #16]
 8004ac2:	e01b      	b.n	8004afc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	11db      	asrs	r3, r3, #7
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 0306 	and.w	r3, r3, #6
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f063 030f 	orn	r3, r3, #15
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	490e      	ldr	r1, [pc, #56]	; (8004b1c <I2C_MasterRequestWrite+0xfc>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f943 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e010      	b.n	8004b14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4907      	ldr	r1, [pc, #28]	; (8004b20 <I2C_MasterRequestWrite+0x100>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f933 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	00010008 	.word	0x00010008
 8004b20:	00010002 	.word	0x00010002

08004b24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	460b      	mov	r3, r1
 8004b32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d006      	beq.n	8004b5e <I2C_MasterRequestRead+0x3a>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d003      	beq.n	8004b5e <I2C_MasterRequestRead+0x3a>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b5c:	d108      	bne.n	8004b70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e00b      	b.n	8004b88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	2b11      	cmp	r3, #17
 8004b76:	d107      	bne.n	8004b88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f893 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d103      	bne.n	8004bb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e079      	b.n	8004cb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc4:	d108      	bne.n	8004bd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bc6:	897b      	ldrh	r3, [r7, #10]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]
 8004bd6:	e05f      	b.n	8004c98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bd8:	897b      	ldrh	r3, [r7, #10]
 8004bda:	11db      	asrs	r3, r3, #7
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0306 	and.w	r3, r3, #6
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f063 030f 	orn	r3, r3, #15
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4930      	ldr	r1, [pc, #192]	; (8004cb8 <I2C_MasterRequestRead+0x194>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f8b9 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e054      	b.n	8004cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c06:	897b      	ldrh	r3, [r7, #10]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4929      	ldr	r1, [pc, #164]	; (8004cbc <I2C_MasterRequestRead+0x198>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f8a9 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e044      	b.n	8004cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f831 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00d      	beq.n	8004c80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c72:	d103      	bne.n	8004c7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e017      	b.n	8004cb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c80:	897b      	ldrh	r3, [r7, #10]
 8004c82:	11db      	asrs	r3, r3, #7
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 0306 	and.w	r3, r3, #6
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f063 030e 	orn	r3, r3, #14
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <I2C_MasterRequestRead+0x198>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f865 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	00010008 	.word	0x00010008
 8004cbc:	00010002 	.word	0x00010002

08004cc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd0:	e025      	b.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d021      	beq.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fe fe4d 	bl	8003978 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d116      	bne.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e023      	b.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10d      	bne.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	e00c      	b.n	8004d5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d0b6      	beq.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d7c:	e051      	b.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d123      	bne.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004da6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f043 0204 	orr.w	r2, r3, #4
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e046      	b.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d021      	beq.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fe fdcb 	bl	8003978 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d116      	bne.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e020      	b.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d10c      	bne.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e00b      	b.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	43da      	mvns	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4013      	ands	r3, r2
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d18d      	bne.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e78:	e02d      	b.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f8ce 	bl	800501c <I2C_IsAcknowledgeFailed>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e02d      	b.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d021      	beq.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fe fd71 	bl	8003978 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d116      	bne.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e007      	b.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d1ca      	bne.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004efa:	e02d      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f88d 	bl	800501c <I2C_IsAcknowledgeFailed>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e02d      	b.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d021      	beq.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f14:	f7fe fd30 	bl	8003978 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d302      	bcc.n	8004f2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e007      	b.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d1ca      	bne.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f7c:	e042      	b.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d119      	bne.n	8004fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e029      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fe fcda 	bl	8003978 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e007      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d1b5      	bne.n	8004f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005032:	d11b      	bne.n	800506c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800503c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f043 0204 	orr.w	r2, r3, #4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507a:	b08b      	sub	sp, #44	; 0x2c
 800507c:	af06      	add	r7, sp, #24
 800507e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0fd      	b.n	8005286 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f006 feec 	bl	800be7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2203      	movs	r2, #3
 80050a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f003 f8f1 	bl	8008298 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	687e      	ldr	r6, [r7, #4]
 80050be:	466d      	mov	r5, sp
 80050c0:	f106 0410 	add.w	r4, r6, #16
 80050c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	1d33      	adds	r3, r6, #4
 80050ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050d0:	6838      	ldr	r0, [r7, #0]
 80050d2:	f003 f8bb 	bl	800824c <USB_CoreInit>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0ce      	b.n	8005286 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2100      	movs	r1, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f003 f8ec 	bl	80082cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	e04c      	b.n	8005194 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	440b      	add	r3, r1
 800510a:	3301      	adds	r3, #1
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	7bfa      	ldrb	r2, [r7, #15]
 8005122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	b298      	uxth	r0, r3
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	440b      	add	r3, r1
 8005136:	3336      	adds	r3, #54	; 0x36
 8005138:	4602      	mov	r2, r0
 800513a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	440b      	add	r3, r1
 800514c:	3303      	adds	r3, #3
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	440b      	add	r3, r1
 8005160:	3338      	adds	r3, #56	; 0x38
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005166:	7bfa      	ldrb	r2, [r7, #15]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	440b      	add	r3, r1
 8005174:	333c      	adds	r3, #60	; 0x3c
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	440b      	add	r3, r1
 8005188:	3340      	adds	r3, #64	; 0x40
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	3301      	adds	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
 8005194:	7bfa      	ldrb	r2, [r7, #15]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d3ad      	bcc.n	80050fa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
 80051a2:	e044      	b.n	800522e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051ba:	7bfa      	ldrb	r2, [r7, #15]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	440b      	add	r3, r1
 80051c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	440b      	add	r3, r1
 80051de:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	440b      	add	r3, r1
 80051f4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	440b      	add	r3, r1
 800520a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005212:	7bfa      	ldrb	r2, [r7, #15]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	3301      	adds	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
 800522e:	7bfa      	ldrb	r2, [r7, #15]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d3b5      	bcc.n	80051a4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	687e      	ldr	r6, [r7, #4]
 8005240:	466d      	mov	r5, sp
 8005242:	f106 0410 	add.w	r4, r6, #16
 8005246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	1d33      	adds	r3, r6, #4
 8005250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005252:	6838      	ldr	r0, [r7, #0]
 8005254:	f003 f846 	bl	80082e4 <USB_DevInit>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e00d      	b.n	8005286 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f004 ffe0 	bl	800a244 <USB_DevDisconnect>

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800528e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_PCD_Start+0x16>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e016      	b.n	80052d2 <HAL_PCD_Start+0x44>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 ffdb 	bl	800826c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80052b6:	2101      	movs	r1, #1
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f007 f852 	bl	800c362 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f004 ffb4 	bl	800a230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b088      	sub	sp, #32
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f004 ffb6 	bl	800a258 <USB_ReadInterrupts>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f6:	d102      	bne.n	80052fe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fb61 	bl	80059c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f004 ffa8 	bl	800a258 <USB_ReadInterrupts>
 8005308:	4603      	mov	r3, r0
 800530a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005312:	d112      	bne.n	800533a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005326:	b292      	uxth	r2, r2
 8005328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f006 fe20 	bl	800bf72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005332:	2100      	movs	r1, #0
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f925 	bl	8005584 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f004 ff8a 	bl	800a258 <USB_ReadInterrupts>
 8005344:	4603      	mov	r3, r0
 8005346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800534e:	d10b      	bne.n	8005368 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005362:	b292      	uxth	r2, r2
 8005364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f004 ff73 	bl	800a258 <USB_ReadInterrupts>
 8005372:	4603      	mov	r3, r0
 8005374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537c:	d10b      	bne.n	8005396 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005390:	b292      	uxth	r2, r2
 8005392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f004 ff5c 	bl	800a258 <USB_ReadInterrupts>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d126      	bne.n	80053fa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	b292      	uxth	r2, r2
 80053c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0208 	bic.w	r2, r2, #8
 80053d6:	b292      	uxth	r2, r2
 80053d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f006 fe01 	bl	800bfe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053f4:	b292      	uxth	r2, r2
 80053f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f004 ff2a 	bl	800a258 <USB_ReadInterrupts>
 8005404:	4603      	mov	r3, r0
 8005406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540e:	f040 8084 	bne.w	800551a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e011      	b.n	800543c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	7ffb      	ldrb	r3, [r7, #31]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	7ffb      	ldrb	r3, [r7, #31]
 8005426:	8812      	ldrh	r2, [r2, #0]
 8005428:	b292      	uxth	r2, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	f107 0120 	add.w	r1, r7, #32
 8005430:	440b      	add	r3, r1
 8005432:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005436:	7ffb      	ldrb	r3, [r7, #31]
 8005438:	3301      	adds	r3, #1
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	7ffb      	ldrb	r3, [r7, #31]
 800543e:	2b07      	cmp	r3, #7
 8005440:	d9ea      	bls.n	8005418 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	b292      	uxth	r2, r2
 8005456:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005462:	b29a      	uxth	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	b292      	uxth	r2, r2
 800546e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005472:	bf00      	nop
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800547c:	b29b      	uxth	r3, r3
 800547e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f6      	beq.n	8005474 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800548e:	b29a      	uxth	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	b292      	uxth	r2, r2
 800549a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e010      	b.n	80054c6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80054a4:	7ffb      	ldrb	r3, [r7, #31]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	4611      	mov	r1, r2
 80054ac:	7ffa      	ldrb	r2, [r7, #31]
 80054ae:	0092      	lsls	r2, r2, #2
 80054b0:	440a      	add	r2, r1
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	f107 0120 	add.w	r1, r7, #32
 80054b8:	440b      	add	r3, r1
 80054ba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80054be:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
 80054c2:	3301      	adds	r3, #1
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	7ffb      	ldrb	r3, [r7, #31]
 80054c8:	2b07      	cmp	r3, #7
 80054ca:	d9eb      	bls.n	80054a4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0208 	orr.w	r2, r2, #8
 80054de:	b292      	uxth	r2, r2
 80054e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f6:	b292      	uxth	r2, r2
 80054f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005504:	b29a      	uxth	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0204 	orr.w	r2, r2, #4
 800550e:	b292      	uxth	r2, r2
 8005510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f006 fd4b 	bl	800bfb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f004 fe9a 	bl	800a258 <USB_ReadInterrupts>
 8005524:	4603      	mov	r3, r0
 8005526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800552a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552e:	d10e      	bne.n	800554e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005542:	b292      	uxth	r2, r2
 8005544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f006 fd04 	bl	800bf56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f004 fe80 	bl	800a258 <USB_ReadInterrupts>
 8005558:	4603      	mov	r3, r0
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005562:	d10b      	bne.n	800557c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005576:	b292      	uxth	r2, r2
 8005578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800557c:	bf00      	nop
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_PCD_SetAddress+0x1a>
 800559a:	2302      	movs	r3, #2
 800559c:	e013      	b.n	80055c6 <HAL_PCD_SetAddress+0x42>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 fe27 	bl	800a20a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	461a      	mov	r2, r3
 80055dc:	4603      	mov	r3, r0
 80055de:	70fb      	strb	r3, [r7, #3]
 80055e0:	460b      	mov	r3, r1
 80055e2:	803b      	strh	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	da0e      	bge.n	8005612 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	705a      	strb	r2, [r3, #1]
 8005610:	e00e      	b.n	8005630 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	f003 0207 	and.w	r2, r3, #7
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4413      	add	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800563c:	883a      	ldrh	r2, [r7, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	78ba      	ldrb	r2, [r7, #2]
 8005646:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800565a:	78bb      	ldrb	r3, [r7, #2]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d102      	bne.n	8005666 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_PCD_EP_Open+0xa6>
 8005670:	2302      	movs	r3, #2
 8005672:	e00e      	b.n	8005692 <HAL_PCD_EP_Open+0xc4>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	4618      	mov	r0, r3
 8005684:	f002 fe4e 	bl	8008324 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005690:	7afb      	ldrb	r3, [r7, #11]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	da0e      	bge.n	80056cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	705a      	strb	r2, [r3, #1]
 80056ca:	e00e      	b.n	80056ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 0207 	and.w	r2, r3, #7
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_PCD_EP_Close+0x6a>
 8005700:	2302      	movs	r3, #2
 8005702:	e00e      	b.n	8005722 <HAL_PCD_EP_Close+0x88>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	f003 f970 	bl	80089f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	460b      	mov	r3, r1
 8005738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	f003 0207 	and.w	r2, r3, #7
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800576a:	7afb      	ldrb	r3, [r7, #11]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	b2da      	uxtb	r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	4618      	mov	r0, r3
 8005788:	f003 fb22 	bl	8008dd0 <USB_EPStartXfer>
 800578c:	e005      	b.n	800579a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	4618      	mov	r0, r3
 8005796:	f003 fb1b 	bl	8008dd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	f003 0207 	and.w	r2, r3, #7
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80057c6:	681b      	ldr	r3, [r3, #0]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	460b      	mov	r3, r1
 80057e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057e2:	7afb      	ldrb	r3, [r7, #11]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2201      	movs	r2, #1
 800581c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	b2da      	uxtb	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800582a:	7afb      	ldrb	r3, [r7, #11]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	4618      	mov	r0, r3
 800583c:	f003 fac8 	bl	8008dd0 <USB_EPStartXfer>
 8005840:	e005      	b.n	800584e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6979      	ldr	r1, [r7, #20]
 8005848:	4618      	mov	r0, r3
 800584a:	f003 fac1 	bl	8008dd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	f003 0207 	and.w	r2, r3, #7
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	429a      	cmp	r2, r3
 8005870:	d901      	bls.n	8005876 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e04c      	b.n	8005910 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da0e      	bge.n	800589c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	705a      	strb	r2, [r3, #1]
 800589a:	e00c      	b.n	80058b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	4413      	add	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_PCD_EP_SetStall+0x7e>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e01c      	b.n	8005910 <HAL_PCD_EP_SetStall+0xb8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f004 fb93 	bl	800a010 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f004 fcb8 	bl	800a276 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 020f 	and.w	r2, r3, #15
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	429a      	cmp	r2, r3
 8005930:	d901      	bls.n	8005936 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e040      	b.n	80059b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800593a:	2b00      	cmp	r3, #0
 800593c:	da0e      	bge.n	800595c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	705a      	strb	r2, [r3, #1]
 800595a:	e00e      	b.n	800597a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 0207 	and.w	r2, r3, #7
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_PCD_EP_ClrStall+0x82>
 8005996:	2302      	movs	r3, #2
 8005998:	e00e      	b.n	80059b8 <HAL_PCD_EP_ClrStall+0xa0>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f004 fb81 	bl	800a0b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059c8:	e2df      	b.n	8005f8a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80059d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80059e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8158 	bne.w	8005c9a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80059ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d152      	bne.n	8005a9a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a04:	81fb      	strh	r3, [r7, #14]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	89fb      	ldrh	r3, [r7, #14]
 8005a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3328      	adds	r3, #40	; 0x28
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	3302      	adds	r3, #2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	441a      	add	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a58:	2100      	movs	r1, #0
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f006 fa61 	bl	800bf22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 828e 	beq.w	8005f8a <PCD_EP_ISR_Handler+0x5ca>
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 8289 	bne.w	8005f8a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a98:	e277      	b.n	8005f8a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005aaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d034      	beq.n	8005b1e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3306      	adds	r3, #6
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f004 fc0e 	bl	800a314 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b04:	4013      	ands	r3, r2
 8005b06:	823b      	strh	r3, [r7, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	8a3a      	ldrh	r2, [r7, #16]
 8005b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b12:	b292      	uxth	r2, r2
 8005b14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f006 f9d6 	bl	800bec8 <HAL_PCD_SetupStageCallback>
 8005b1c:	e235      	b.n	8005f8a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f280 8231 	bge.w	8005f8a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b34:	4013      	ands	r3, r2
 8005b36:	83bb      	strh	r3, [r7, #28]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	8bba      	ldrh	r2, [r7, #28]
 8005b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b42:	b292      	uxth	r2, r2
 8005b44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	3306      	adds	r3, #6
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d019      	beq.n	8005bae <PCD_EP_ISR_Handler+0x1ee>
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d015      	beq.n	8005bae <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	6959      	ldr	r1, [r3, #20]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f004 fbbe 	bl	800a314 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	441a      	add	r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f006 f99f 	bl	800beec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d112      	bne.n	8005bfc <PCD_EP_ISR_Handler+0x23c>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	e02f      	b.n	8005c5c <PCD_EP_ISR_Handler+0x29c>
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b3e      	cmp	r3, #62	; 0x3e
 8005c02:	d813      	bhi.n	8005c2c <PCD_EP_ISR_Handler+0x26c>
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <PCD_EP_ISR_Handler+0x25e>
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e017      	b.n	8005c5c <PCD_EP_ISR_Handler+0x29c>
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	633b      	str	r3, [r7, #48]	; 0x30
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <PCD_EP_ISR_Handler+0x286>
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	3b01      	subs	r3, #1
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	029b      	lsls	r3, r3, #10
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6c:	827b      	strh	r3, [r7, #18]
 8005c6e:	8a7b      	ldrh	r3, [r7, #18]
 8005c70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c74:	827b      	strh	r3, [r7, #18]
 8005c76:	8a7b      	ldrh	r3, [r7, #18]
 8005c78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c7c:	827b      	strh	r3, [r7, #18]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	8a7b      	ldrh	r3, [r7, #18]
 8005c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	8013      	strh	r3, [r2, #0]
 8005c98:	e177      	b.n	8005f8a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005cac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f280 80ea 	bge.w	8005e8a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ccc:	4013      	ands	r3, r2
 8005cce:	853b      	strh	r3, [r7, #40]	; 0x28
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ce4:	b292      	uxth	r2, r2
 8005ce6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005ce8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	7b1b      	ldrb	r3, [r3, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d122      	bne.n	8005d4c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	3306      	adds	r3, #6
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005d30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8087 	beq.w	8005e46 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	6959      	ldr	r1, [r3, #20]
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	88da      	ldrh	r2, [r3, #6]
 8005d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d46:	f004 fae5 	bl	800a314 <USB_ReadPMA>
 8005d4a:	e07c      	b.n	8005e46 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	78db      	ldrb	r3, [r3, #3]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d108      	bne.n	8005d66 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d56:	461a      	mov	r2, r3
 8005d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f923 	bl	8005fa6 <HAL_PCD_EP_DB_Receive>
 8005d60:	4603      	mov	r3, r0
 8005d62:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d64:	e06f      	b.n	8005e46 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d021      	beq.n	8005e04 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005de8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005dea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02a      	beq.n	8005e46 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	6959      	ldr	r1, [r3, #20]
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	891a      	ldrh	r2, [r3, #8]
 8005dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dfe:	f004 fa89 	bl	800a314 <USB_ReadPMA>
 8005e02:	e020      	b.n	8005e46 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	4413      	add	r3, r2
 8005e18:	3306      	adds	r3, #6
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005e2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	6959      	ldr	r1, [r3, #20]
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	895a      	ldrh	r2, [r3, #10]
 8005e40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e42:	f004 fa67 	bl	800a314 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e4c:	441a      	add	r2, r3
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e58:	441a      	add	r2, r3
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <PCD_EP_ISR_Handler+0x4b0>
 8005e66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d206      	bcs.n	8005e7e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f006 f838 	bl	800beec <HAL_PCD_DataOutStageCallback>
 8005e7c:	e005      	b.n	8005e8a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e84:	4618      	mov	r0, r3
 8005e86:	f002 ffa3 	bl	8008dd0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d07a      	beq.n	8005f8a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	843b      	strh	r3, [r7, #32]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	8c3b      	ldrh	r3, [r7, #32]
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d108      	bne.n	8005efa <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d146      	bne.n	8005f7e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005ef0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d141      	bne.n	8005f7e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3302      	adds	r3, #2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f22:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	8bfb      	ldrh	r3, [r7, #30]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d906      	bls.n	8005f3c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	8bfb      	ldrh	r3, [r7, #30]
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	619a      	str	r2, [r3, #24]
 8005f3a:	e002      	b.n	8005f42 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	2200      	movs	r2, #0
 8005f40:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f005 ffe6 	bl	800bf22 <HAL_PCD_DataInStageCallback>
 8005f56:	e018      	b.n	8005f8a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	695a      	ldr	r2, [r3, #20]
 8005f5c:	8bfb      	ldrh	r3, [r7, #30]
 8005f5e:	441a      	add	r2, r3
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	8bfb      	ldrh	r3, [r7, #30]
 8005f6a:	441a      	add	r2, r3
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f002 ff2a 	bl	8008dd0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005f7c:	e005      	b.n	8005f8a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f80:	461a      	mov	r2, r3
 8005f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f91b 	bl	80061c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	b21b      	sxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f6ff ad17 	blt.w	80059ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3738      	adds	r7, #56	; 0x38
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b088      	sub	sp, #32
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d07e      	beq.n	80060bc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	8b7b      	ldrh	r3, [r7, #26]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d306      	bcc.n	8006000 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	8b7b      	ldrh	r3, [r7, #26]
 8005ff8:	1ad2      	subs	r2, r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	619a      	str	r2, [r3, #24]
 8005ffe:	e002      	b.n	8006006 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d123      	bne.n	8006056 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	833b      	strh	r3, [r7, #24]
 800602a:	8b3b      	ldrh	r3, [r7, #24]
 800602c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006030:	833b      	strh	r3, [r7, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	441a      	add	r2, r3
 8006040:	8b3b      	ldrh	r3, [r7, #24]
 8006042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	b29b      	uxth	r3, r3
 8006054:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01f      	beq.n	80060a0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	82fb      	strh	r3, [r7, #22]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800609c:	b29b      	uxth	r3, r3
 800609e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80060a0:	8b7b      	ldrh	r3, [r7, #26]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8087 	beq.w	80061b6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6959      	ldr	r1, [r3, #20]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	891a      	ldrh	r2, [r3, #8]
 80060b4:	8b7b      	ldrh	r3, [r7, #26]
 80060b6:	f004 f92d 	bl	800a314 <USB_ReadPMA>
 80060ba:	e07c      	b.n	80061b6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	3306      	adds	r3, #6
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	8b7b      	ldrh	r3, [r7, #26]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d306      	bcc.n	80060fe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	8b7b      	ldrh	r3, [r7, #26]
 80060f6:	1ad2      	subs	r2, r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	619a      	str	r2, [r3, #24]
 80060fc:	e002      	b.n	8006104 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d123      	bne.n	8006154 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	83fb      	strh	r3, [r7, #30]
 8006128:	8bfb      	ldrh	r3, [r7, #30]
 800612a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800612e:	83fb      	strh	r3, [r7, #30]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	8bfb      	ldrh	r3, [r7, #30]
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d11f      	bne.n	800619e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006178:	83bb      	strh	r3, [r7, #28]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	8bbb      	ldrh	r3, [r7, #28]
 800618a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006196:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800619e:	8b7b      	ldrh	r3, [r7, #26]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6959      	ldr	r1, [r3, #20]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	895a      	ldrh	r2, [r3, #10]
 80061b0:	8b7b      	ldrh	r3, [r7, #26]
 80061b2:	f004 f8af 	bl	800a314 <USB_ReadPMA>
    }
  }

  return count;
 80061b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b092      	sub	sp, #72	; 0x48
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8132 	beq.w	800643e <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	3302      	adds	r3, #2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006202:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800620a:	429a      	cmp	r2, r3
 800620c:	d906      	bls.n	800621c <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	619a      	str	r2, [r3, #24]
 800621a:	e002      	b.n	8006222 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2200      	movs	r2, #0
 8006220:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d12c      	bne.n	8006284 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f005 fe76 	bl	800bf22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 822f 	beq.w	80066a0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625c:	827b      	strh	r3, [r7, #18]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8a7b      	ldrh	r3, [r7, #18]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
 8006282:	e20d      	b.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01f      	beq.n	80062ce <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	441a      	add	r2, r3
 80062b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 81e3 	bne.w	80066a0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062e0:	441a      	add	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062ec:	441a      	add	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d309      	bcc.n	8006312 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	621a      	str	r2, [r3, #32]
 8006310:	e014      	b.n	800633c <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800631a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006326:	e009      	b.n	800633c <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2200      	movs	r2, #0
 800633a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d155      	bne.n	80063f0 <HAL_PCD_EP_DB_Transmit+0x230>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006352:	b29b      	uxth	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	4413      	add	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	011a      	lsls	r2, r3, #4
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	4413      	add	r3, r2
 8006366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	2b00      	cmp	r3, #0
 8006370:	d112      	bne.n	8006398 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637c:	b29a      	uxth	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006390:	b29a      	uxth	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	e047      	b.n	8006428 <HAL_PCD_EP_DB_Transmit+0x268>
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	2b3e      	cmp	r3, #62	; 0x3e
 800639c:	d811      	bhi.n	80063c2 <HAL_PCD_EP_DB_Transmit+0x202>
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	3301      	adds	r3, #1
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	029b      	lsls	r3, r3, #10
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e032      	b.n	8006428 <HAL_PCD_EP_DB_Transmit+0x268>
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <HAL_PCD_EP_DB_Transmit+0x218>
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	b29b      	uxth	r3, r3
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	e01b      	b.n	8006428 <HAL_PCD_EP_DB_Transmit+0x268>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d117      	bne.n	8006428 <HAL_PCD_EP_DB_Transmit+0x268>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	4413      	add	r3, r2
 800640e:	623b      	str	r3, [r7, #32]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	011a      	lsls	r2, r3, #4
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	4413      	add	r3, r2
 800641a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	b29a      	uxth	r2, r3
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6959      	ldr	r1, [r3, #20]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	891a      	ldrh	r2, [r3, #8]
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	b29b      	uxth	r3, r3
 8006438:	f003 ff28 	bl	800a28c <USB_WritePMA>
 800643c:	e130      	b.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	3306      	adds	r3, #6
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006466:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800646e:	429a      	cmp	r2, r3
 8006470:	d306      	bcc.n	8006480 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006478:	1ad2      	subs	r2, r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	619a      	str	r2, [r3, #24]
 800647e:	e002      	b.n	8006486 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2200      	movs	r2, #0
 8006484:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d12c      	bne.n	80064e8 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	4619      	mov	r1, r3
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f005 fd44 	bl	800bf22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 80fd 	bne.w	80066a0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
 80064e6:	e0db      	b.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11f      	bne.n	8006532 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006538:	2b01      	cmp	r3, #1
 800653a:	f040 80b1 	bne.w	80066a0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006544:	441a      	add	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006550:	441a      	add	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	429a      	cmp	r2, r3
 8006560:	d309      	bcc.n	8006576 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	621a      	str	r2, [r3, #32]
 8006574:	e014      	b.n	80065a0 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800657e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800658a:	e009      	b.n	80065a0 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d155      	bne.n	800665a <HAL_PCD_EP_DB_Transmit+0x49a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c2:	4413      	add	r3, r2
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	011a      	lsls	r2, r3, #4
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	4413      	add	r3, r2
 80065d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d112      	bne.n	8006602 <HAL_PCD_EP_DB_Transmit+0x442>
 80065dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e044      	b.n	800668c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	2b3e      	cmp	r3, #62	; 0x3e
 8006606:	d811      	bhi.n	800662c <HAL_PCD_EP_DB_Transmit+0x46c>
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_PCD_EP_DB_Transmit+0x45e>
 8006618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661a:	3301      	adds	r3, #1
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29a      	uxth	r2, r3
 8006626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e02f      	b.n	800668c <HAL_PCD_EP_DB_Transmit+0x4cc>
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <HAL_PCD_EP_DB_Transmit+0x482>
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	3b01      	subs	r3, #1
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	b29b      	uxth	r3, r3
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006652:	b29a      	uxth	r2, r3
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e018      	b.n	800668c <HAL_PCD_EP_DB_Transmit+0x4cc>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d114      	bne.n	800668c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666a:	b29b      	uxth	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	4413      	add	r3, r2
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	011a      	lsls	r2, r3, #4
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	4413      	add	r3, r2
 800667e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	b29a      	uxth	r2, r3
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6959      	ldr	r1, [r3, #20]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	895a      	ldrh	r2, [r3, #10]
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	b29b      	uxth	r3, r3
 800669c:	f003 fdf6 	bl	800a28c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ba:	823b      	strh	r3, [r7, #16]
 80066bc:	8a3b      	ldrh	r3, [r7, #16]
 80066be:	f083 0310 	eor.w	r3, r3, #16
 80066c2:	823b      	strh	r3, [r7, #16]
 80066c4:	8a3b      	ldrh	r3, [r7, #16]
 80066c6:	f083 0320 	eor.w	r3, r3, #32
 80066ca:	823b      	strh	r3, [r7, #16]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	8a3b      	ldrh	r3, [r7, #16]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3748      	adds	r7, #72	; 0x48
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b087      	sub	sp, #28
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	817b      	strh	r3, [r7, #10]
 8006708:	4613      	mov	r3, r2
 800670a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800670c:	897b      	ldrh	r3, [r7, #10]
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006718:	897b      	ldrh	r3, [r7, #10]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e009      	b.n	8006744 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006730:	897a      	ldrh	r2, [r7, #10]
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006744:	893b      	ldrh	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	b29a      	uxth	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	80da      	strh	r2, [r3, #6]
 8006758:	e00b      	b.n	8006772 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2201      	movs	r2, #1
 800675e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	b29a      	uxth	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	b29a      	uxth	r2, r3
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
	...

08006780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e26c      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8087 	beq.w	80068ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067a0:	4b92      	ldr	r3, [pc, #584]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d00c      	beq.n	80067c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067ac:	4b8f      	ldr	r3, [pc, #572]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f003 030c 	and.w	r3, r3, #12
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d112      	bne.n	80067de <HAL_RCC_OscConfig+0x5e>
 80067b8:	4b8c      	ldr	r3, [pc, #560]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c4:	d10b      	bne.n	80067de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c6:	4b89      	ldr	r3, [pc, #548]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d06c      	beq.n	80068ac <HAL_RCC_OscConfig+0x12c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d168      	bne.n	80068ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e246      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e6:	d106      	bne.n	80067f6 <HAL_RCC_OscConfig+0x76>
 80067e8:	4b80      	ldr	r3, [pc, #512]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a7f      	ldr	r2, [pc, #508]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80067ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	e02e      	b.n	8006854 <HAL_RCC_OscConfig+0xd4>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10c      	bne.n	8006818 <HAL_RCC_OscConfig+0x98>
 80067fe:	4b7b      	ldr	r3, [pc, #492]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a7a      	ldr	r2, [pc, #488]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	4b78      	ldr	r3, [pc, #480]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a77      	ldr	r2, [pc, #476]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	e01d      	b.n	8006854 <HAL_RCC_OscConfig+0xd4>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006820:	d10c      	bne.n	800683c <HAL_RCC_OscConfig+0xbc>
 8006822:	4b72      	ldr	r3, [pc, #456]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a71      	ldr	r2, [pc, #452]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	4b6f      	ldr	r3, [pc, #444]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a6e      	ldr	r2, [pc, #440]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e00b      	b.n	8006854 <HAL_RCC_OscConfig+0xd4>
 800683c:	4b6b      	ldr	r3, [pc, #428]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a6a      	ldr	r2, [pc, #424]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	4b68      	ldr	r3, [pc, #416]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a67      	ldr	r2, [pc, #412]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 800684e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006852:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d013      	beq.n	8006884 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685c:	f7fd f88c 	bl	8003978 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006864:	f7fd f888 	bl	8003978 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	; 0x64
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1fa      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006876:	4b5d      	ldr	r3, [pc, #372]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <HAL_RCC_OscConfig+0xe4>
 8006882:	e014      	b.n	80068ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006884:	f7fd f878 	bl	8003978 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800688c:	f7fd f874 	bl	8003978 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b64      	cmp	r3, #100	; 0x64
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e1e6      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800689e:	4b53      	ldr	r3, [pc, #332]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x10c>
 80068aa:	e000      	b.n	80068ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d063      	beq.n	8006982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068ba:	4b4c      	ldr	r3, [pc, #304]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f003 030c 	and.w	r3, r3, #12
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00b      	beq.n	80068de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068c6:	4b49      	ldr	r3, [pc, #292]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d11c      	bne.n	800690c <HAL_RCC_OscConfig+0x18c>
 80068d2:	4b46      	ldr	r3, [pc, #280]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d116      	bne.n	800690c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068de:	4b43      	ldr	r3, [pc, #268]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_RCC_OscConfig+0x176>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d001      	beq.n	80068f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e1ba      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f6:	4b3d      	ldr	r3, [pc, #244]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4939      	ldr	r1, [pc, #228]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006906:	4313      	orrs	r3, r2
 8006908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800690a:	e03a      	b.n	8006982 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d020      	beq.n	8006956 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006914:	4b36      	ldr	r3, [pc, #216]	; (80069f0 <HAL_RCC_OscConfig+0x270>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691a:	f7fd f82d 	bl	8003978 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006922:	f7fd f829 	bl	8003978 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e19b      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006934:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006940:	4b2a      	ldr	r3, [pc, #168]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	4927      	ldr	r1, [pc, #156]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006950:	4313      	orrs	r3, r2
 8006952:	600b      	str	r3, [r1, #0]
 8006954:	e015      	b.n	8006982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006956:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <HAL_RCC_OscConfig+0x270>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695c:	f7fd f80c 	bl	8003978 <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006964:	f7fd f808 	bl	8003978 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e17a      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006976:	4b1d      	ldr	r3, [pc, #116]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f0      	bne.n	8006964 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d03a      	beq.n	8006a04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d019      	beq.n	80069ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006996:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <HAL_RCC_OscConfig+0x274>)
 8006998:	2201      	movs	r2, #1
 800699a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800699c:	f7fc ffec 	bl	8003978 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a4:	f7fc ffe8 	bl	8003978 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e15a      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <HAL_RCC_OscConfig+0x26c>)
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069c2:	2001      	movs	r0, #1
 80069c4:	f000 fada 	bl	8006f7c <RCC_Delay>
 80069c8:	e01c      	b.n	8006a04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <HAL_RCC_OscConfig+0x274>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d0:	f7fc ffd2 	bl	8003978 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d6:	e00f      	b.n	80069f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d8:	f7fc ffce 	bl	8003978 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d908      	bls.n	80069f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e140      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
 80069ea:	bf00      	nop
 80069ec:	40021000 	.word	0x40021000
 80069f0:	42420000 	.word	0x42420000
 80069f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069f8:	4b9e      	ldr	r3, [pc, #632]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e9      	bne.n	80069d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80a6 	beq.w	8006b5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a16:	4b97      	ldr	r3, [pc, #604]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10d      	bne.n	8006a3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a22:	4b94      	ldr	r3, [pc, #592]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	4a93      	ldr	r2, [pc, #588]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2c:	61d3      	str	r3, [r2, #28]
 8006a2e:	4b91      	ldr	r3, [pc, #580]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3e:	4b8e      	ldr	r3, [pc, #568]	; (8006c78 <HAL_RCC_OscConfig+0x4f8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d118      	bne.n	8006a7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a4a:	4b8b      	ldr	r3, [pc, #556]	; (8006c78 <HAL_RCC_OscConfig+0x4f8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a8a      	ldr	r2, [pc, #552]	; (8006c78 <HAL_RCC_OscConfig+0x4f8>)
 8006a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a56:	f7fc ff8f 	bl	8003978 <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a5e:	f7fc ff8b 	bl	8003978 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b64      	cmp	r3, #100	; 0x64
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e0fd      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a70:	4b81      	ldr	r3, [pc, #516]	; (8006c78 <HAL_RCC_OscConfig+0x4f8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f0      	beq.n	8006a5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d106      	bne.n	8006a92 <HAL_RCC_OscConfig+0x312>
 8006a84:	4b7b      	ldr	r3, [pc, #492]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	4a7a      	ldr	r2, [pc, #488]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6213      	str	r3, [r2, #32]
 8006a90:	e02d      	b.n	8006aee <HAL_RCC_OscConfig+0x36e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10c      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x334>
 8006a9a:	4b76      	ldr	r3, [pc, #472]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	4a75      	ldr	r2, [pc, #468]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	6213      	str	r3, [r2, #32]
 8006aa6:	4b73      	ldr	r3, [pc, #460]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4a72      	ldr	r2, [pc, #456]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006aac:	f023 0304 	bic.w	r3, r3, #4
 8006ab0:	6213      	str	r3, [r2, #32]
 8006ab2:	e01c      	b.n	8006aee <HAL_RCC_OscConfig+0x36e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b05      	cmp	r3, #5
 8006aba:	d10c      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x356>
 8006abc:	4b6d      	ldr	r3, [pc, #436]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	4a6c      	ldr	r2, [pc, #432]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006ac2:	f043 0304 	orr.w	r3, r3, #4
 8006ac6:	6213      	str	r3, [r2, #32]
 8006ac8:	4b6a      	ldr	r3, [pc, #424]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	4a69      	ldr	r2, [pc, #420]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	6213      	str	r3, [r2, #32]
 8006ad4:	e00b      	b.n	8006aee <HAL_RCC_OscConfig+0x36e>
 8006ad6:	4b67      	ldr	r3, [pc, #412]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	4a66      	ldr	r2, [pc, #408]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	6213      	str	r3, [r2, #32]
 8006ae2:	4b64      	ldr	r3, [pc, #400]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	4a63      	ldr	r2, [pc, #396]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006ae8:	f023 0304 	bic.w	r3, r3, #4
 8006aec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d015      	beq.n	8006b22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af6:	f7fc ff3f 	bl	8003978 <HAL_GetTick>
 8006afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afc:	e00a      	b.n	8006b14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afe:	f7fc ff3b 	bl	8003978 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e0ab      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b14:	4b57      	ldr	r3, [pc, #348]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0ee      	beq.n	8006afe <HAL_RCC_OscConfig+0x37e>
 8006b20:	e014      	b.n	8006b4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b22:	f7fc ff29 	bl	8003978 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b28:	e00a      	b.n	8006b40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b2a:	f7fc ff25 	bl	8003978 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e095      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b40:	4b4c      	ldr	r3, [pc, #304]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ee      	bne.n	8006b2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d105      	bne.n	8006b5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b52:	4b48      	ldr	r3, [pc, #288]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4a47      	ldr	r2, [pc, #284]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8081 	beq.w	8006c6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b68:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 030c 	and.w	r3, r3, #12
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d061      	beq.n	8006c38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d146      	bne.n	8006c0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b7c:	4b3f      	ldr	r3, [pc, #252]	; (8006c7c <HAL_RCC_OscConfig+0x4fc>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b82:	f7fc fef9 	bl	8003978 <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8a:	f7fc fef5 	bl	8003978 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e067      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b9c:	4b35      	ldr	r3, [pc, #212]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1f0      	bne.n	8006b8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d108      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bb2:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	492d      	ldr	r1, [pc, #180]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc4:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a19      	ldr	r1, [r3, #32]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	4927      	ldr	r1, [pc, #156]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bdc:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <HAL_RCC_OscConfig+0x4fc>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be2:	f7fc fec9 	bl	8003978 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006be8:	e008      	b.n	8006bfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bea:	f7fc fec5 	bl	8003978 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e037      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0f0      	beq.n	8006bea <HAL_RCC_OscConfig+0x46a>
 8006c08:	e02f      	b.n	8006c6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <HAL_RCC_OscConfig+0x4fc>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c10:	f7fc feb2 	bl	8003978 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c18:	f7fc feae 	bl	8003978 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e020      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c2a:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x498>
 8006c36:	e018      	b.n	8006c6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e013      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d106      	bne.n	8006c66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d001      	beq.n	8006c6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40007000 	.word	0x40007000
 8006c7c:	42420060 	.word	0x42420060

08006c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0d0      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c94:	4b6a      	ldr	r3, [pc, #424]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d910      	bls.n	8006cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca2:	4b67      	ldr	r3, [pc, #412]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 0207 	bic.w	r2, r3, #7
 8006caa:	4965      	ldr	r1, [pc, #404]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b63      	ldr	r3, [pc, #396]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0b8      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cdc:	4b59      	ldr	r3, [pc, #356]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	4a58      	ldr	r2, [pc, #352]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf4:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4a52      	ldr	r2, [pc, #328]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d00:	4b50      	ldr	r3, [pc, #320]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	494d      	ldr	r1, [pc, #308]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d040      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d26:	4b47      	ldr	r3, [pc, #284]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d115      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e07f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d3e:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e073      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4e:	4b3d      	ldr	r3, [pc, #244]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e06b      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d5e:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f023 0203 	bic.w	r2, r3, #3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4936      	ldr	r1, [pc, #216]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d70:	f7fc fe02 	bl	8003978 <HAL_GetTick>
 8006d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d76:	e00a      	b.n	8006d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d78:	f7fc fdfe 	bl	8003978 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e053      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8e:	4b2d      	ldr	r3, [pc, #180]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 020c 	and.w	r2, r3, #12
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d1eb      	bne.n	8006d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d210      	bcs.n	8006dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 0207 	bic.w	r2, r3, #7
 8006db6:	4922      	ldr	r1, [pc, #136]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b20      	ldr	r3, [pc, #128]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e032      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ddc:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4916      	ldr	r1, [pc, #88]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	490e      	ldr	r1, [pc, #56]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e0e:	f000 f821 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8006e12:	4601      	mov	r1, r0
 8006e14:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <HAL_RCC_ClockConfig+0x1c8>)
 8006e20:	5cd3      	ldrb	r3, [r2, r3]
 8006e22:	fa21 f303 	lsr.w	r3, r1, r3
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <HAL_RCC_ClockConfig+0x1cc>)
 8006e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <HAL_RCC_ClockConfig+0x1d0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fc fd60 	bl	80038f4 <HAL_InitTick>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40022000 	.word	0x40022000
 8006e44:	40021000 	.word	0x40021000
 8006e48:	0800eb34 	.word	0x0800eb34
 8006e4c:	20000008 	.word	0x20000008
 8006e50:	2000000c 	.word	0x2000000c

08006e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e54:	b490      	push	{r4, r7}
 8006e56:	b08a      	sub	sp, #40	; 0x28
 8006e58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e5a:	4b2a      	ldr	r3, [pc, #168]	; (8006f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e5c:	1d3c      	adds	r4, r7, #4
 8006e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e64:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	2300      	movs	r3, #0
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e7e:	4b23      	ldr	r3, [pc, #140]	; (8006f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d002      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x40>
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d003      	beq.n	8006e9a <HAL_RCC_GetSysClockFreq+0x46>
 8006e92:	e02d      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e96:	623b      	str	r3, [r7, #32]
      break;
 8006e98:	e02d      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	0c9b      	lsrs	r3, r3, #18
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006eac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d013      	beq.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006eb8:	4b14      	ldr	r3, [pc, #80]	; (8006f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	0c5b      	lsrs	r3, r3, #17
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ecc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4a0f      	ldr	r2, [pc, #60]	; (8006f10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ed2:	fb02 f203 	mul.w	r2, r2, r3
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ede:	e004      	b.n	8006eea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	; (8006f14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	623b      	str	r3, [r7, #32]
      break;
 8006eee:	e002      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ef2:	623b      	str	r3, [r7, #32]
      break;
 8006ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3728      	adds	r7, #40	; 0x28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc90      	pop	{r4, r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	0800eac8 	.word	0x0800eac8
 8006f08:	0800ead8 	.word	0x0800ead8
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	007a1200 	.word	0x007a1200
 8006f14:	003d0900 	.word	0x003d0900

08006f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr
 8006f28:	20000008 	.word	0x20000008

08006f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f30:	f7ff fff2 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8006f34:	4601      	mov	r1, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4a03      	ldr	r2, [pc, #12]	; (8006f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f42:	5cd3      	ldrb	r3, [r2, r3]
 8006f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	0800eb44 	.word	0x0800eb44

08006f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f58:	f7ff ffde 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	0adb      	lsrs	r3, r3, #11
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4a03      	ldr	r2, [pc, #12]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f6a:	5cd3      	ldrb	r3, [r2, r3]
 8006f6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40021000 	.word	0x40021000
 8006f78:	0800eb44 	.word	0x0800eb44

08006f7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <RCC_Delay+0x34>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <RCC_Delay+0x38>)
 8006f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8e:	0a5b      	lsrs	r3, r3, #9
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f98:	bf00      	nop
  }
  while (Delay --);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1e5a      	subs	r2, r3, #1
 8006f9e:	60fa      	str	r2, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f9      	bne.n	8006f98 <RCC_Delay+0x1c>
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000008 	.word	0x20000008
 8006fb4:	10624dd3 	.word	0x10624dd3

08006fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d07d      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd8:	4b4f      	ldr	r3, [pc, #316]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fe4:	4b4c      	ldr	r3, [pc, #304]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	4a4b      	ldr	r2, [pc, #300]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fee:	61d3      	str	r3, [r2, #28]
 8006ff0:	4b49      	ldr	r3, [pc, #292]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	4b46      	ldr	r3, [pc, #280]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d118      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800700c:	4b43      	ldr	r3, [pc, #268]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a42      	ldr	r2, [pc, #264]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007018:	f7fc fcae 	bl	8003978 <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800701e:	e008      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007020:	f7fc fcaa 	bl	8003978 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b64      	cmp	r3, #100	; 0x64
 800702c:	d901      	bls.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e06d      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007032:	4b3a      	ldr	r3, [pc, #232]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f0      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800703e:	4b36      	ldr	r3, [pc, #216]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007046:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d02e      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	429a      	cmp	r2, r3
 800705a:	d027      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800705c:	4b2e      	ldr	r3, [pc, #184]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007064:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007066:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800706c:	4b2c      	ldr	r3, [pc, #176]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007072:	4a29      	ldr	r2, [pc, #164]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d014      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007082:	f7fc fc79 	bl	8003978 <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007088:	e00a      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708a:	f7fc fc75 	bl	8003978 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	f241 3288 	movw	r2, #5000	; 0x1388
 8007098:	4293      	cmp	r3, r2
 800709a:	d901      	bls.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e036      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a0:	4b1d      	ldr	r3, [pc, #116]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0ee      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	4917      	ldr	r1, [pc, #92]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d105      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c4:	4b14      	ldr	r3, [pc, #80]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	4a13      	ldr	r2, [pc, #76]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070dc:	4b0e      	ldr	r3, [pc, #56]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	490b      	ldr	r1, [pc, #44]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	4904      	ldr	r1, [pc, #16]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007108:	4313      	orrs	r3, r2
 800710a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40021000 	.word	0x40021000
 800711c:	40007000 	.word	0x40007000
 8007120:	42420440 	.word	0x42420440

08007124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e041      	b.n	80071ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fc fa38 	bl	80035c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f000 fad4 	bl	8007710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <HAL_TIM_PWM_Start+0x24>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b01      	cmp	r3, #1
 80071de:	bf14      	ite	ne
 80071e0:	2301      	movne	r3, #1
 80071e2:	2300      	moveq	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	e022      	b.n	800722e <HAL_TIM_PWM_Start+0x6a>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d109      	bne.n	8007202 <HAL_TIM_PWM_Start+0x3e>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	bf14      	ite	ne
 80071fa:	2301      	movne	r3, #1
 80071fc:	2300      	moveq	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	e015      	b.n	800722e <HAL_TIM_PWM_Start+0x6a>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b08      	cmp	r3, #8
 8007206:	d109      	bne.n	800721c <HAL_TIM_PWM_Start+0x58>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	bf14      	ite	ne
 8007214:	2301      	movne	r3, #1
 8007216:	2300      	moveq	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	e008      	b.n	800722e <HAL_TIM_PWM_Start+0x6a>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	bf14      	ite	ne
 8007228:	2301      	movne	r3, #1
 800722a:	2300      	moveq	r3, #0
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e072      	b.n	800731c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <HAL_TIM_PWM_Start+0x82>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007244:	e013      	b.n	800726e <HAL_TIM_PWM_Start+0xaa>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b04      	cmp	r3, #4
 800724a:	d104      	bne.n	8007256 <HAL_TIM_PWM_Start+0x92>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007254:	e00b      	b.n	800726e <HAL_TIM_PWM_Start+0xaa>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d104      	bne.n	8007266 <HAL_TIM_PWM_Start+0xa2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007264:	e003      	b.n	800726e <HAL_TIM_PWM_Start+0xaa>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2202      	movs	r2, #2
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2201      	movs	r2, #1
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fb5a 	bl	8007930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a28      	ldr	r2, [pc, #160]	; (8007324 <HAL_TIM_PWM_Start+0x160>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_TIM_PWM_Start+0xcc>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a27      	ldr	r2, [pc, #156]	; (8007328 <HAL_TIM_PWM_Start+0x164>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d101      	bne.n	8007294 <HAL_TIM_PWM_Start+0xd0>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <HAL_TIM_PWM_Start+0xd2>
 8007294:	2300      	movs	r3, #0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1d      	ldr	r2, [pc, #116]	; (8007324 <HAL_TIM_PWM_Start+0x160>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d018      	beq.n	80072e6 <HAL_TIM_PWM_Start+0x122>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <HAL_TIM_PWM_Start+0x164>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <HAL_TIM_PWM_Start+0x122>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c6:	d00e      	beq.n	80072e6 <HAL_TIM_PWM_Start+0x122>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a17      	ldr	r2, [pc, #92]	; (800732c <HAL_TIM_PWM_Start+0x168>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d009      	beq.n	80072e6 <HAL_TIM_PWM_Start+0x122>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a16      	ldr	r2, [pc, #88]	; (8007330 <HAL_TIM_PWM_Start+0x16c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d004      	beq.n	80072e6 <HAL_TIM_PWM_Start+0x122>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a14      	ldr	r2, [pc, #80]	; (8007334 <HAL_TIM_PWM_Start+0x170>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d111      	bne.n	800730a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b06      	cmp	r3, #6
 80072f6:	d010      	beq.n	800731a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0201 	orr.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007308:	e007      	b.n	800731a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0201 	orr.w	r2, r2, #1
 8007318:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40012c00 	.word	0x40012c00
 8007328:	40013400 	.word	0x40013400
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800
 8007334:	40000c00 	.word	0x40000c00

08007338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b02      	cmp	r3, #2
 800734c:	d122      	bne.n	8007394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d11b      	bne.n	8007394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0202 	mvn.w	r2, #2
 8007364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9ad 	bl	80076da <HAL_TIM_IC_CaptureCallback>
 8007380:	e005      	b.n	800738e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9a0 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f9af 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d122      	bne.n	80073e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d11b      	bne.n	80073e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0204 	mvn.w	r2, #4
 80073b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f983 	bl	80076da <HAL_TIM_IC_CaptureCallback>
 80073d4:	e005      	b.n	80073e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f976 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f985 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d122      	bne.n	800743c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d11b      	bne.n	800743c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0208 	mvn.w	r2, #8
 800740c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2204      	movs	r2, #4
 8007412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f959 	bl	80076da <HAL_TIM_IC_CaptureCallback>
 8007428:	e005      	b.n	8007436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f94c 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f95b 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b10      	cmp	r3, #16
 8007448:	d122      	bne.n	8007490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d11b      	bne.n	8007490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0210 	mvn.w	r2, #16
 8007460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2208      	movs	r2, #8
 8007466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f92f 	bl	80076da <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f922 	bl	80076c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f931 	bl	80076ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b01      	cmp	r3, #1
 800749c:	d10e      	bne.n	80074bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d107      	bne.n	80074bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0201 	mvn.w	r2, #1
 80074b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f8fd 	bl	80076b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c6:	2b80      	cmp	r3, #128	; 0x80
 80074c8:	d10e      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d107      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fabd 	bl	8007a62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d10e      	bne.n	8007514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d107      	bne.n	8007514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8f5 	bl	80076fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b20      	cmp	r3, #32
 8007520:	d10e      	bne.n	8007540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b20      	cmp	r3, #32
 800752e:	d107      	bne.n	8007540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0220 	mvn.w	r2, #32
 8007538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa88 	bl	8007a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_TIM_ConfigClockSource+0x18>
 800755c:	2302      	movs	r3, #2
 800755e:	e0a6      	b.n	80076ae <HAL_TIM_ConfigClockSource+0x166>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800757e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d067      	beq.n	8007668 <HAL_TIM_ConfigClockSource+0x120>
 8007598:	2b40      	cmp	r3, #64	; 0x40
 800759a:	d80b      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x6c>
 800759c:	2b10      	cmp	r3, #16
 800759e:	d073      	beq.n	8007688 <HAL_TIM_ConfigClockSource+0x140>
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d802      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x62>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d06f      	beq.n	8007688 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80075a8:	e078      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d06c      	beq.n	8007688 <HAL_TIM_ConfigClockSource+0x140>
 80075ae:	2b30      	cmp	r3, #48	; 0x30
 80075b0:	d06a      	beq.n	8007688 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80075b2:	e073      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80075b4:	2b70      	cmp	r3, #112	; 0x70
 80075b6:	d00d      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0x8c>
 80075b8:	2b70      	cmp	r3, #112	; 0x70
 80075ba:	d804      	bhi.n	80075c6 <HAL_TIM_ConfigClockSource+0x7e>
 80075bc:	2b50      	cmp	r3, #80	; 0x50
 80075be:	d033      	beq.n	8007628 <HAL_TIM_ConfigClockSource+0xe0>
 80075c0:	2b60      	cmp	r3, #96	; 0x60
 80075c2:	d041      	beq.n	8007648 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80075c4:	e06a      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ca:	d066      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x152>
 80075cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d0:	d017      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80075d2:	e063      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	6899      	ldr	r1, [r3, #8]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f000 f985 	bl	80078f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	609a      	str	r2, [r3, #8]
      break;
 8007600:	e04c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6899      	ldr	r1, [r3, #8]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f000 f96e 	bl	80078f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007624:	609a      	str	r2, [r3, #8]
      break;
 8007626:	e039      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	6859      	ldr	r1, [r3, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	461a      	mov	r2, r3
 8007636:	f000 f8e5 	bl	8007804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2150      	movs	r1, #80	; 0x50
 8007640:	4618      	mov	r0, r3
 8007642:	f000 f93c 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007646:	e029      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6859      	ldr	r1, [r3, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	461a      	mov	r2, r3
 8007656:	f000 f903 	bl	8007860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2160      	movs	r1, #96	; 0x60
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f92c 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007666:	e019      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	6859      	ldr	r1, [r3, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	461a      	mov	r2, r3
 8007676:	f000 f8c5 	bl	8007804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2140      	movs	r1, #64	; 0x40
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f91c 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007686:	e009      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f000 f913 	bl	80078be <TIM_ITRx_SetConfig>
        break;
 8007698:	e000      	b.n	800769c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800769a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr

080076da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr

080076ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr

080076fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a33      	ldr	r2, [pc, #204]	; (80077f0 <TIM_Base_SetConfig+0xe0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d013      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a32      	ldr	r2, [pc, #200]	; (80077f4 <TIM_Base_SetConfig+0xe4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00f      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007736:	d00b      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a2f      	ldr	r2, [pc, #188]	; (80077f8 <TIM_Base_SetConfig+0xe8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d007      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a2e      	ldr	r2, [pc, #184]	; (80077fc <TIM_Base_SetConfig+0xec>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a2d      	ldr	r2, [pc, #180]	; (8007800 <TIM_Base_SetConfig+0xf0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d108      	bne.n	8007762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a22      	ldr	r2, [pc, #136]	; (80077f0 <TIM_Base_SetConfig+0xe0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <TIM_Base_SetConfig+0x82>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <TIM_Base_SetConfig+0xe4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00f      	beq.n	8007792 <TIM_Base_SetConfig+0x82>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d00b      	beq.n	8007792 <TIM_Base_SetConfig+0x82>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1e      	ldr	r2, [pc, #120]	; (80077f8 <TIM_Base_SetConfig+0xe8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d007      	beq.n	8007792 <TIM_Base_SetConfig+0x82>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a1d      	ldr	r2, [pc, #116]	; (80077fc <TIM_Base_SetConfig+0xec>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_Base_SetConfig+0x82>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a1c      	ldr	r2, [pc, #112]	; (8007800 <TIM_Base_SetConfig+0xf0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d108      	bne.n	80077a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <TIM_Base_SetConfig+0xe0>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0xc8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a08      	ldr	r2, [pc, #32]	; (80077f4 <TIM_Base_SetConfig+0xe4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d103      	bne.n	80077e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	615a      	str	r2, [r3, #20]
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bc80      	pop	{r7}
 80077ee:	4770      	bx	lr
 80077f0:	40012c00 	.word	0x40012c00
 80077f4:	40013400 	.word	0x40013400
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00

08007804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f023 0201 	bic.w	r2, r3, #1
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800782e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 030a 	bic.w	r3, r3, #10
 8007840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	621a      	str	r2, [r3, #32]
}
 8007856:	bf00      	nop
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr

08007860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	f023 0210 	bic.w	r2, r3, #16
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800788a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	031b      	lsls	r3, r3, #12
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800789c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	f043 0307 	orr.w	r3, r3, #7
 80078e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc80      	pop	{r7}
 80078f0:	4770      	bx	lr

080078f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b087      	sub	sp, #28
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800790c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	021a      	lsls	r2, r3, #8
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	431a      	orrs	r2, r3
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	4313      	orrs	r3, r2
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	609a      	str	r2, [r3, #8]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	2201      	movs	r2, #1
 8007944:	fa02 f303 	lsl.w	r3, r2, r3
 8007948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	43db      	mvns	r3, r3
 8007952:	401a      	ands	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1a      	ldr	r2, [r3, #32]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	fa01 f303 	lsl.w	r3, r1, r3
 8007968:	431a      	orrs	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr

08007978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800798c:	2302      	movs	r3, #2
 800798e:	e050      	b.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d018      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e6:	d00e      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a15      	ldr	r2, [pc, #84]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d009      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d004      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d10c      	bne.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00

08007a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bc80      	pop	{r7}
 8007a72:	4770      	bx	lr

08007a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e03f      	b.n	8007b06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fb fdb6 	bl	800360c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	; 0x24
 8007aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb39 	bl	8008130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695a      	ldr	r2, [r3, #20]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b08a      	sub	sp, #40	; 0x28
 8007b12:	af02      	add	r7, sp, #8
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	603b      	str	r3, [r7, #0]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d17c      	bne.n	8007c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_UART_Transmit+0x2c>
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e075      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_UART_Transmit+0x3e>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e06e      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2221      	movs	r2, #33	; 0x21
 8007b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007b62:	f7fb ff09 	bl	8003978 <HAL_GetTick>
 8007b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	88fa      	ldrh	r2, [r7, #6]
 8007b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d108      	bne.n	8007b90 <HAL_UART_Transmit+0x82>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	e003      	b.n	8007b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007ba0:	e02a      	b.n	8007bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f95c 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e036      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	61bb      	str	r3, [r7, #24]
 8007bd8:	e007      	b.n	8007bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	781a      	ldrb	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3301      	adds	r3, #1
 8007be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1cf      	bne.n	8007ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2140      	movs	r1, #64	; 0x40
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f92c 	bl	8007e6a <UART_WaitOnFlagUntilTimeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e006      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e000      	b.n	8007c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c28:	2302      	movs	r3, #2
  }
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10d      	bne.n	8007c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <HAL_UART_IRQHandler+0x52>
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f9d5 	bl	800802e <UART_Receive_IT>
      return;
 8007c84:	e0d1      	b.n	8007e2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80b0 	beq.w	8007dee <HAL_UART_IRQHandler+0x1ba>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d105      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x70>
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80a5 	beq.w	8007dee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x90>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbc:	f043 0201 	orr.w	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_UART_IRQHandler+0xb0>
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	f043 0202 	orr.w	r2, r3, #2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <HAL_UART_IRQHandler+0xd0>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	f043 0204 	orr.w	r2, r3, #4
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f003 0308 	and.w	r3, r3, #8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00f      	beq.n	8007d2e <HAL_UART_IRQHandler+0xfa>
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d104      	bne.n	8007d22 <HAL_UART_IRQHandler+0xee>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	f043 0208 	orr.w	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d078      	beq.n	8007e28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <HAL_UART_IRQHandler+0x11c>
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f96f 	bl	800802e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <HAL_UART_IRQHandler+0x144>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d031      	beq.n	8007ddc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8c0 	bl	8007efe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d023      	beq.n	8007dd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695a      	ldr	r2, [r3, #20]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d013      	beq.n	8007dcc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da8:	4a21      	ldr	r2, [pc, #132]	; (8007e30 <HAL_UART_IRQHandler+0x1fc>)
 8007daa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fb ff1b 	bl	8003bec <HAL_DMA_Abort_IT>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d016      	beq.n	8007dea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dca:	e00e      	b.n	8007dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f843 	bl	8007e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd2:	e00a      	b.n	8007dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f83f 	bl	8007e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dda:	e006      	b.n	8007dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f83b 	bl	8007e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007de8:	e01e      	b.n	8007e28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dea:	bf00      	nop
    return;
 8007dec:	e01c      	b.n	8007e28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <HAL_UART_IRQHandler+0x1d6>
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8ac 	bl	8007f60 <UART_Transmit_IT>
    return;
 8007e08:	e00f      	b.n	8007e2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1f6>
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f8ed 	bl	8007ffe <UART_EndTransmit_IT>
    return;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007e28:	bf00      	nop
  }
}
 8007e2a:	3720      	adds	r7, #32
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	08007f39 	.word	0x08007f39

08007e34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr

08007e46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr

08007e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	603b      	str	r3, [r7, #0]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7a:	e02c      	b.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d028      	beq.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d007      	beq.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8007e8a:	f7fb fd75 	bl	8003978 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d21d      	bcs.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ea8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	695a      	ldr	r2, [r3, #20]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e00f      	b.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	bf0c      	ite	eq
 8007ee6:	2301      	moveq	r3, #1
 8007ee8:	2300      	movne	r3, #0
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d0c3      	beq.n	8007e7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0201 	bic.w	r2, r2, #1
 8007f24:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff ff80 	bl	8007e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b21      	cmp	r3, #33	; 0x21
 8007f72:	d13e      	bne.n	8007ff2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7c:	d114      	bne.n	8007fa8 <UART_Transmit_IT+0x48>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d110      	bne.n	8007fa8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	1c9a      	adds	r2, r3, #2
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	621a      	str	r2, [r3, #32]
 8007fa6:	e008      	b.n	8007fba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	1c59      	adds	r1, r3, #1
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6211      	str	r1, [r2, #32]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10f      	bne.n	8007fee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e000      	b.n	8007ff4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ff2:	2302      	movs	r3, #2
  }
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2220      	movs	r2, #32
 800801a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff ff08 	bl	8007e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b22      	cmp	r3, #34	; 0x22
 8008040:	d170      	bne.n	8008124 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804a:	d117      	bne.n	800807c <UART_Receive_IT+0x4e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d113      	bne.n	800807c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	b29a      	uxth	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	629a      	str	r2, [r3, #40]	; 0x28
 800807a:	e026      	b.n	80080ca <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808e:	d007      	beq.n	80080a0 <UART_Receive_IT+0x72>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <UART_Receive_IT+0x80>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	701a      	strb	r2, [r3, #0]
 80080ac:	e008      	b.n	80080c0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4619      	mov	r1, r3
 80080d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d120      	bne.n	8008120 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0220 	bic.w	r2, r2, #32
 80080ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0201 	bic.w	r2, r2, #1
 800810c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fe95 	bl	8007e46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e002      	b.n	8008126 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	e000      	b.n	8008126 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8008124:	2302      	movs	r3, #2
  }
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800816a:	f023 030c 	bic.w	r3, r3, #12
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	430b      	orrs	r3, r1
 8008176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a2c      	ldr	r2, [pc, #176]	; (8008244 <UART_SetConfig+0x114>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d103      	bne.n	80081a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008198:	f7fe fedc 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	e002      	b.n	80081a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80081a0:	f7fe fec4 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 80081a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009a      	lsls	r2, r3, #2
 80081b0:	441a      	add	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	4a22      	ldr	r2, [pc, #136]	; (8008248 <UART_SetConfig+0x118>)
 80081be:	fba2 2303 	umull	r2, r3, r2, r3
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	0119      	lsls	r1, r3, #4
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009a      	lsls	r2, r3, #2
 80081d0:	441a      	add	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081dc:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <UART_SetConfig+0x118>)
 80081de:	fba3 0302 	umull	r0, r3, r3, r2
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	2064      	movs	r0, #100	; 0x64
 80081e6:	fb00 f303 	mul.w	r3, r0, r3
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	3332      	adds	r3, #50	; 0x32
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <UART_SetConfig+0x118>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081fc:	4419      	add	r1, r3
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	009a      	lsls	r2, r3, #2
 8008208:	441a      	add	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	fbb2 f2f3 	udiv	r2, r2, r3
 8008214:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <UART_SetConfig+0x118>)
 8008216:	fba3 0302 	umull	r0, r3, r3, r2
 800821a:	095b      	lsrs	r3, r3, #5
 800821c:	2064      	movs	r0, #100	; 0x64
 800821e:	fb00 f303 	mul.w	r3, r0, r3
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	3332      	adds	r3, #50	; 0x32
 8008228:	4a07      	ldr	r2, [pc, #28]	; (8008248 <UART_SetConfig+0x118>)
 800822a:	fba2 2303 	umull	r2, r3, r2, r3
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	f003 020f 	and.w	r2, r3, #15
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	440a      	add	r2, r1
 800823a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40013800 	.word	0x40013800
 8008248:	51eb851f 	.word	0x51eb851f

0800824c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800824c:	b084      	sub	sp, #16
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	f107 0014 	add.w	r0, r7, #20
 800825a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	b004      	add	sp, #16
 800826a:	4770      	bx	lr

0800826c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800827c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008280:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	b29a      	uxth	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr

08008298 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80082a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	43db      	mvns	r3, r3
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4013      	ands	r3, r2
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr

080082e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082e4:	b084      	sub	sp, #16
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	f107 0014 	add.w	r0, r7, #20
 80082f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	bc80      	pop	{r7}
 8008320:	b004      	add	sp, #16
 8008322:	4770      	bx	lr

08008324 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008324:	b480      	push	{r7}
 8008326:	b09b      	sub	sp, #108	; 0x6c
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	78db      	ldrb	r3, [r3, #3]
 8008352:	2b03      	cmp	r3, #3
 8008354:	d81f      	bhi.n	8008396 <USB_ActivateEndpoint+0x72>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <USB_ActivateEndpoint+0x38>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	0800836d 	.word	0x0800836d
 8008360:	08008389 	.word	0x08008389
 8008364:	0800839f 	.word	0x0800839f
 8008368:	0800837b 	.word	0x0800837b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800836c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008374:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008378:	e012      	b.n	80083a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800837a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800837e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008382:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008386:	e00b      	b.n	80083a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008388:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800838c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008390:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008394:	e004      	b.n	80083a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800839c:	e000      	b.n	80083a0 <USB_ActivateEndpoint+0x7c>
      break;
 800839e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	441a      	add	r2, r3
 80083aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80083ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083be:	b29b      	uxth	r3, r3
 80083c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d8:	b29a      	uxth	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	441a      	add	r2, r3
 80083f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80083f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008404:	b29b      	uxth	r3, r3
 8008406:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	7b1b      	ldrb	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f040 8149 	bne.w	80086a4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 8084 	beq.w	8008524 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008426:	b29b      	uxth	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	4413      	add	r3, r2
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	011a      	lsls	r2, r3, #4
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	88db      	ldrh	r3, [r3, #6]
 8008444:	085b      	lsrs	r3, r3, #1
 8008446:	b29b      	uxth	r3, r3
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	81fb      	strh	r3, [r7, #14]
 800845e:	89fb      	ldrh	r3, [r7, #14]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <USB_ActivateEndpoint+0x17c>
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847e:	81bb      	strh	r3, [r7, #12]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	441a      	add	r2, r3
 800848a:	89bb      	ldrh	r3, [r7, #12]
 800848c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800849c:	b29b      	uxth	r3, r3
 800849e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	78db      	ldrb	r3, [r3, #3]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d020      	beq.n	80084ea <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084be:	813b      	strh	r3, [r7, #8]
 80084c0:	893b      	ldrh	r3, [r7, #8]
 80084c2:	f083 0320 	eor.w	r3, r3, #32
 80084c6:	813b      	strh	r3, [r7, #8]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	441a      	add	r2, r3
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	8013      	strh	r3, [r2, #0]
 80084e8:	e27f      	b.n	80089ea <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008500:	817b      	strh	r3, [r7, #10]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	441a      	add	r2, r3
 800850c:	897b      	ldrh	r3, [r7, #10]
 800850e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851e:	b29b      	uxth	r3, r3
 8008520:	8013      	strh	r3, [r2, #0]
 8008522:	e262      	b.n	80089ea <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800852e:	b29b      	uxth	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	4413      	add	r3, r2
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	011a      	lsls	r2, r3, #4
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	4413      	add	r3, r2
 8008542:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008546:	62bb      	str	r3, [r7, #40]	; 0x28
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	88db      	ldrh	r3, [r3, #6]
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	b29b      	uxth	r3, r3
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008562:	b29b      	uxth	r3, r3
 8008564:	461a      	mov	r2, r3
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	4413      	add	r3, r2
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	011a      	lsls	r2, r3, #4
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	4413      	add	r3, r2
 8008576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800857a:	623b      	str	r3, [r7, #32]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d112      	bne.n	80085aa <USB_ActivateEndpoint+0x286>
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800858e:	b29a      	uxth	r2, r3
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	801a      	strh	r2, [r3, #0]
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	801a      	strh	r2, [r3, #0]
 80085a8:	e02f      	b.n	800860a <USB_ActivateEndpoint+0x2e6>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b3e      	cmp	r3, #62	; 0x3e
 80085b0:	d813      	bhi.n	80085da <USB_ActivateEndpoint+0x2b6>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	663b      	str	r3, [r7, #96]	; 0x60
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <USB_ActivateEndpoint+0x2a8>
 80085c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c8:	3301      	adds	r3, #1
 80085ca:	663b      	str	r3, [r7, #96]	; 0x60
 80085cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	029b      	lsls	r3, r3, #10
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e017      	b.n	800860a <USB_ActivateEndpoint+0x2e6>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	663b      	str	r3, [r7, #96]	; 0x60
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d102      	bne.n	80085f4 <USB_ActivateEndpoint+0x2d0>
 80085ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085f0:	3b01      	subs	r3, #1
 80085f2:	663b      	str	r3, [r7, #96]	; 0x60
 80085f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	029b      	lsls	r3, r3, #10
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008604:	b29a      	uxth	r2, r3
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	83fb      	strh	r3, [r7, #30]
 8008618:	8bfb      	ldrh	r3, [r7, #30]
 800861a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01b      	beq.n	800865a <USB_ActivateEndpoint+0x336>
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008638:	83bb      	strh	r3, [r7, #28]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	441a      	add	r2, r3
 8008644:	8bbb      	ldrh	r3, [r7, #28]
 8008646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800864a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008656:	b29b      	uxth	r3, r3
 8008658:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29b      	uxth	r3, r3
 8008668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800866c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008670:	837b      	strh	r3, [r7, #26]
 8008672:	8b7b      	ldrh	r3, [r7, #26]
 8008674:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008678:	837b      	strh	r3, [r7, #26]
 800867a:	8b7b      	ldrh	r3, [r7, #26]
 800867c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008680:	837b      	strh	r3, [r7, #26]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	441a      	add	r2, r3
 800868c:	8b7b      	ldrh	r3, [r7, #26]
 800868e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869e:	b29b      	uxth	r3, r3
 80086a0:	8013      	strh	r3, [r2, #0]
 80086a2:	e1a2      	b.n	80089ea <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	441a      	add	r2, r3
 80086c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80086cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80086d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086dc:	b29b      	uxth	r3, r3
 80086de:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086f0:	4413      	add	r3, r2
 80086f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	011a      	lsls	r2, r3, #4
 80086fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008702:	657b      	str	r3, [r7, #84]	; 0x54
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	891b      	ldrh	r3, [r3, #8]
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	b29b      	uxth	r3, r3
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	653b      	str	r3, [r7, #80]	; 0x50
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800871e:	b29b      	uxth	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008724:	4413      	add	r3, r2
 8008726:	653b      	str	r3, [r7, #80]	; 0x50
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	011a      	lsls	r2, r3, #4
 800872e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008730:	4413      	add	r3, r2
 8008732:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	895b      	ldrh	r3, [r3, #10]
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	b29b      	uxth	r3, r3
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008746:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 8091 	bne.w	8008874 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008760:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01b      	beq.n	80087a2 <USB_ActivateEndpoint+0x47e>
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800877c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008780:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	441a      	add	r2, r3
 800878c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800878e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800879a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879e:	b29b      	uxth	r3, r3
 80087a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80087b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01b      	beq.n	80087f2 <USB_ActivateEndpoint+0x4ce>
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008808:	86bb      	strh	r3, [r7, #52]	; 0x34
 800880a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800880c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008810:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008812:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008814:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008818:	86bb      	strh	r3, [r7, #52]	; 0x34
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	441a      	add	r2, r3
 8008824:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008836:	b29b      	uxth	r3, r3
 8008838:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008850:	867b      	strh	r3, [r7, #50]	; 0x32
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	441a      	add	r2, r3
 800885c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800885e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800886a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886e:	b29b      	uxth	r3, r3
 8008870:	8013      	strh	r3, [r2, #0]
 8008872:	e0ba      	b.n	80089ea <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008884:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01d      	beq.n	80088cc <USB_ActivateEndpoint+0x5a8>
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	b29b      	uxth	r3, r3
 800889e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	441a      	add	r2, r3
 80088b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80088b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80088dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01d      	beq.n	8008924 <USB_ActivateEndpoint+0x600>
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	78db      	ldrb	r3, [r3, #3]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d024      	beq.n	8008976 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	b29b      	uxth	r3, r3
 800893a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008942:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008946:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800894a:	f083 0320 	eor.w	r3, r3, #32
 800894e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800896c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008970:	b29b      	uxth	r3, r3
 8008972:	8013      	strh	r3, [r2, #0]
 8008974:	e01d      	b.n	80089b2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	441a      	add	r2, r3
 800899a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800899e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	441a      	add	r2, r3
 80089d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80089d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80089ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	376c      	adds	r7, #108	; 0x6c
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr

080089f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b08d      	sub	sp, #52	; 0x34
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	7b1b      	ldrb	r3, [r3, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f040 808e 	bne.w	8008b28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	785b      	ldrb	r3, [r3, #1]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d044      	beq.n	8008a9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	81bb      	strh	r3, [r7, #12]
 8008a22:	89bb      	ldrh	r3, [r7, #12]
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01b      	beq.n	8008a64 <USB_DeactivateEndpoint+0x6c>
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a42:	817b      	strh	r3, [r7, #10]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	441a      	add	r2, r3
 8008a4e:	897b      	ldrh	r3, [r7, #10]
 8008a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a7a:	813b      	strh	r3, [r7, #8]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	441a      	add	r2, r3
 8008a86:	893b      	ldrh	r3, [r7, #8]
 8008a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	8013      	strh	r3, [r2, #0]
 8008a9c:	e192      	b.n	8008dc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	827b      	strh	r3, [r7, #18]
 8008aac:	8a7b      	ldrh	r3, [r7, #18]
 8008aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01b      	beq.n	8008aee <USB_DeactivateEndpoint+0xf6>
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008acc:	823b      	strh	r3, [r7, #16]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	441a      	add	r2, r3
 8008ad8:	8a3b      	ldrh	r3, [r7, #16]
 8008ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b04:	81fb      	strh	r3, [r7, #14]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	441a      	add	r2, r3
 8008b10:	89fb      	ldrh	r3, [r7, #14]
 8008b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	8013      	strh	r3, [r2, #0]
 8008b26:	e14d      	b.n	8008dc4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 80a5 	bne.w	8008c7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	843b      	strh	r3, [r7, #32]
 8008b40:	8c3b      	ldrh	r3, [r7, #32]
 8008b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01b      	beq.n	8008b82 <USB_DeactivateEndpoint+0x18a>
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b60:	83fb      	strh	r3, [r7, #30]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	8bfb      	ldrh	r3, [r7, #30]
 8008b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	83bb      	strh	r3, [r7, #28]
 8008b90:	8bbb      	ldrh	r3, [r7, #28]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01b      	beq.n	8008bd2 <USB_DeactivateEndpoint+0x1da>
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb0:	837b      	strh	r3, [r7, #26]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	441a      	add	r2, r3
 8008bbc:	8b7b      	ldrh	r3, [r7, #26]
 8008bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be8:	833b      	strh	r3, [r7, #24]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	441a      	add	r2, r3
 8008bf4:	8b3b      	ldrh	r3, [r7, #24]
 8008bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c20:	82fb      	strh	r3, [r7, #22]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	441a      	add	r2, r3
 8008c2c:	8afb      	ldrh	r3, [r7, #22]
 8008c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c58:	82bb      	strh	r3, [r7, #20]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	441a      	add	r2, r3
 8008c64:	8abb      	ldrh	r3, [r7, #20]
 8008c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	8013      	strh	r3, [r2, #0]
 8008c7a:	e0a3      	b.n	8008dc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d01b      	beq.n	8008ccc <USB_DeactivateEndpoint+0x2d4>
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008caa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008cda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01b      	beq.n	8008d1c <USB_DeactivateEndpoint+0x324>
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfa:	853b      	strh	r3, [r7, #40]	; 0x28
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	441a      	add	r2, r3
 8008d06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	441a      	add	r2, r3
 8008d3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	441a      	add	r2, r3
 8008d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	847b      	strh	r3, [r7, #34]	; 0x22
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	441a      	add	r2, r3
 8008dae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3734      	adds	r7, #52	; 0x34
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bc80      	pop	{r7}
 8008dce:	4770      	bx	lr

08008dd0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b0c4      	sub	sp, #272	; 0x110
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	1d3b      	adds	r3, r7, #4
 8008dd8:	6018      	str	r0, [r3, #0]
 8008dda:	463b      	mov	r3, r7
 8008ddc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dde:	463b      	mov	r3, r7
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	f040 8557 	bne.w	8009898 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008dea:	463b      	mov	r3, r7
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	463b      	mov	r3, r7
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d905      	bls.n	8008e06 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e04:	e004      	b.n	8008e10 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008e06:	463b      	mov	r3, r7
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e10:	463b      	mov	r3, r7
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	7b1b      	ldrb	r3, [r3, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d12c      	bne.n	8008e74 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6959      	ldr	r1, [r3, #20]
 8008e20:	463b      	mov	r3, r7
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	88da      	ldrh	r2, [r3, #6]
 8008e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	1d38      	adds	r0, r7, #4
 8008e2e:	6800      	ldr	r0, [r0, #0]
 8008e30:	f001 fa2c 	bl	800a28c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e34:	1d3b      	adds	r3, r7, #4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	1d3b      	adds	r3, r7, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	4413      	add	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	011a      	lsls	r2, r3, #4
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	4413      	add	r3, r2
 8008e58:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008e5c:	f107 0310 	add.w	r3, r7, #16
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	f107 0310 	add.w	r3, r7, #16
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	801a      	strh	r2, [r3, #0]
 8008e70:	f000 bcdd 	b.w	800982e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008e74:	463b      	mov	r3, r7
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	78db      	ldrb	r3, [r3, #3]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	f040 8347 	bne.w	800950e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008e80:	463b      	mov	r3, r7
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6a1a      	ldr	r2, [r3, #32]
 8008e86:	463b      	mov	r3, r7
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	f240 82eb 	bls.w	8009468 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008e92:	1d3b      	adds	r3, r7, #4
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	463b      	mov	r3, r7
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008eb0:	1d3b      	adds	r3, r7, #4
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	441a      	add	r2, r3
 8008ebe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ee0:	1ad2      	subs	r2, r2, r3
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ee8:	1d3b      	adds	r3, r7, #4
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 8159 	beq.w	80091b6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f04:	1d3b      	adds	r3, r7, #4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	637b      	str	r3, [r7, #52]	; 0x34
 8008f0a:	463b      	mov	r3, r7
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	785b      	ldrb	r3, [r3, #1]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d164      	bne.n	8008fde <USB_EPStartXfer+0x20e>
 8008f14:	1d3b      	adds	r3, r7, #4
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f1a:	1d3b      	adds	r3, r7, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	4413      	add	r3, r2
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f2c:	463b      	mov	r3, r7
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	011a      	lsls	r2, r3, #4
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	4413      	add	r3, r2
 8008f38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d112      	bne.n	8008f6c <USB_EPStartXfer+0x19c>
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	801a      	strh	r2, [r3, #0]
 8008f6a:	e054      	b.n	8009016 <USB_EPStartXfer+0x246>
 8008f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f70:	2b3e      	cmp	r3, #62	; 0x3e
 8008f72:	d817      	bhi.n	8008fa4 <USB_EPStartXfer+0x1d4>
 8008f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d004      	beq.n	8008f94 <USB_EPStartXfer+0x1c4>
 8008f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f8e:	3301      	adds	r3, #1
 8008f90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	029b      	lsls	r3, r3, #10
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	801a      	strh	r2, [r3, #0]
 8008fa2:	e038      	b.n	8009016 <USB_EPStartXfer+0x246>
 8008fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <USB_EPStartXfer+0x1f4>
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	029b      	lsls	r3, r3, #10
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	801a      	strh	r2, [r3, #0]
 8008fdc:	e01b      	b.n	8009016 <USB_EPStartXfer+0x246>
 8008fde:	463b      	mov	r3, r7
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d116      	bne.n	8009016 <USB_EPStartXfer+0x246>
 8008fe8:	1d3b      	adds	r3, r7, #4
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff6:	4413      	add	r3, r2
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	011a      	lsls	r2, r3, #4
 8009002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009004:	4413      	add	r3, r2
 8009006:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800900a:	633b      	str	r3, [r7, #48]	; 0x30
 800900c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009010:	b29a      	uxth	r2, r3
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009016:	463b      	mov	r3, r7
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	895b      	ldrh	r3, [r3, #10]
 800901c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009020:	463b      	mov	r3, r7
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6959      	ldr	r1, [r3, #20]
 8009026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800902a:	b29b      	uxth	r3, r3
 800902c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009030:	1d38      	adds	r0, r7, #4
 8009032:	6800      	ldr	r0, [r0, #0]
 8009034:	f001 f92a 	bl	800a28c <USB_WritePMA>
            ep->xfer_buff += len;
 8009038:	463b      	mov	r3, r7
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	695a      	ldr	r2, [r3, #20]
 800903e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009042:	441a      	add	r2, r3
 8009044:	463b      	mov	r3, r7
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800904a:	463b      	mov	r3, r7
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a1a      	ldr	r2, [r3, #32]
 8009050:	463b      	mov	r3, r7
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	429a      	cmp	r2, r3
 8009058:	d909      	bls.n	800906e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800905a:	463b      	mov	r3, r7
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6a1a      	ldr	r2, [r3, #32]
 8009060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009064:	1ad2      	subs	r2, r2, r3
 8009066:	463b      	mov	r3, r7
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	621a      	str	r2, [r3, #32]
 800906c:	e008      	b.n	8009080 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800906e:	463b      	mov	r3, r7
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8009078:	463b      	mov	r3, r7
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2200      	movs	r2, #0
 800907e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009080:	463b      	mov	r3, r7
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d164      	bne.n	8009154 <USB_EPStartXfer+0x384>
 800908a:	1d3b      	adds	r3, r7, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	463b      	mov	r3, r7
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	011a      	lsls	r2, r3, #4
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	4413      	add	r3, r2
 80090ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d112      	bne.n	80090e2 <USB_EPStartXfer+0x312>
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	801a      	strh	r2, [r3, #0]
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090da:	b29a      	uxth	r2, r3
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	e057      	b.n	8009192 <USB_EPStartXfer+0x3c2>
 80090e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090e6:	2b3e      	cmp	r3, #62	; 0x3e
 80090e8:	d817      	bhi.n	800911a <USB_EPStartXfer+0x34a>
 80090ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d004      	beq.n	800910a <USB_EPStartXfer+0x33a>
 8009100:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009104:	3301      	adds	r3, #1
 8009106:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800910a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800910e:	b29b      	uxth	r3, r3
 8009110:	029b      	lsls	r3, r3, #10
 8009112:	b29a      	uxth	r2, r3
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	e03b      	b.n	8009192 <USB_EPStartXfer+0x3c2>
 800911a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	2b00      	cmp	r3, #0
 800912e:	d104      	bne.n	800913a <USB_EPStartXfer+0x36a>
 8009130:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009134:	3b01      	subs	r3, #1
 8009136:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800913a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800913e:	b29b      	uxth	r3, r3
 8009140:	029b      	lsls	r3, r3, #10
 8009142:	b29b      	uxth	r3, r3
 8009144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800914c:	b29a      	uxth	r2, r3
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	e01e      	b.n	8009192 <USB_EPStartXfer+0x3c2>
 8009154:	463b      	mov	r3, r7
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d119      	bne.n	8009192 <USB_EPStartXfer+0x3c2>
 800915e:	1d3b      	adds	r3, r7, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
 8009164:	1d3b      	adds	r3, r7, #4
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800916c:	b29b      	uxth	r3, r3
 800916e:	461a      	mov	r2, r3
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	4413      	add	r3, r2
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
 8009176:	463b      	mov	r3, r7
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	011a      	lsls	r2, r3, #4
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	4413      	add	r3, r2
 8009182:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009186:	623b      	str	r3, [r7, #32]
 8009188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800918c:	b29a      	uxth	r2, r3
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009192:	463b      	mov	r3, r7
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	891b      	ldrh	r3, [r3, #8]
 8009198:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800919c:	463b      	mov	r3, r7
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6959      	ldr	r1, [r3, #20]
 80091a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80091ac:	1d38      	adds	r0, r7, #4
 80091ae:	6800      	ldr	r0, [r0, #0]
 80091b0:	f001 f86c 	bl	800a28c <USB_WritePMA>
 80091b4:	e33b      	b.n	800982e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091b6:	463b      	mov	r3, r7
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d164      	bne.n	800928a <USB_EPStartXfer+0x4ba>
 80091c0:	1d3b      	adds	r3, r7, #4
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091c6:	1d3b      	adds	r3, r7, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d4:	4413      	add	r3, r2
 80091d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091d8:	463b      	mov	r3, r7
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	011a      	lsls	r2, r3, #4
 80091e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e2:	4413      	add	r3, r2
 80091e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d112      	bne.n	8009218 <USB_EPStartXfer+0x448>
 80091f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009200:	801a      	strh	r2, [r3, #0]
 8009202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009210:	b29a      	uxth	r2, r3
 8009212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	e057      	b.n	80092c8 <USB_EPStartXfer+0x4f8>
 8009218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800921c:	2b3e      	cmp	r3, #62	; 0x3e
 800921e:	d817      	bhi.n	8009250 <USB_EPStartXfer+0x480>
 8009220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009224:	085b      	lsrs	r3, r3, #1
 8009226:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800922a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <USB_EPStartXfer+0x470>
 8009236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800923a:	3301      	adds	r3, #1
 800923c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009244:	b29b      	uxth	r3, r3
 8009246:	029b      	lsls	r3, r3, #10
 8009248:	b29a      	uxth	r2, r3
 800924a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800924c:	801a      	strh	r2, [r3, #0]
 800924e:	e03b      	b.n	80092c8 <USB_EPStartXfer+0x4f8>
 8009250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009254:	095b      	lsrs	r3, r3, #5
 8009256:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800925a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800925e:	f003 031f 	and.w	r3, r3, #31
 8009262:	2b00      	cmp	r3, #0
 8009264:	d104      	bne.n	8009270 <USB_EPStartXfer+0x4a0>
 8009266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800926a:	3b01      	subs	r3, #1
 800926c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009274:	b29b      	uxth	r3, r3
 8009276:	029b      	lsls	r3, r3, #10
 8009278:	b29b      	uxth	r3, r3
 800927a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800927e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009282:	b29a      	uxth	r2, r3
 8009284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e01e      	b.n	80092c8 <USB_EPStartXfer+0x4f8>
 800928a:	463b      	mov	r3, r7
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d119      	bne.n	80092c8 <USB_EPStartXfer+0x4f8>
 8009294:	1d3b      	adds	r3, r7, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	657b      	str	r3, [r7, #84]	; 0x54
 800929a:	1d3b      	adds	r3, r7, #4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092a8:	4413      	add	r3, r2
 80092aa:	657b      	str	r3, [r7, #84]	; 0x54
 80092ac:	463b      	mov	r3, r7
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	011a      	lsls	r2, r3, #4
 80092b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b6:	4413      	add	r3, r2
 80092b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092bc:	653b      	str	r3, [r7, #80]	; 0x50
 80092be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092c8:	463b      	mov	r3, r7
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	891b      	ldrh	r3, [r3, #8]
 80092ce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092d2:	463b      	mov	r3, r7
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6959      	ldr	r1, [r3, #20]
 80092d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092dc:	b29b      	uxth	r3, r3
 80092de:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80092e2:	1d38      	adds	r0, r7, #4
 80092e4:	6800      	ldr	r0, [r0, #0]
 80092e6:	f000 ffd1 	bl	800a28c <USB_WritePMA>
            ep->xfer_buff += len;
 80092ea:	463b      	mov	r3, r7
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695a      	ldr	r2, [r3, #20]
 80092f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092f4:	441a      	add	r2, r3
 80092f6:	463b      	mov	r3, r7
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80092fc:	463b      	mov	r3, r7
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6a1a      	ldr	r2, [r3, #32]
 8009302:	463b      	mov	r3, r7
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	429a      	cmp	r2, r3
 800930a:	d909      	bls.n	8009320 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800930c:	463b      	mov	r3, r7
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6a1a      	ldr	r2, [r3, #32]
 8009312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	463b      	mov	r3, r7
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	621a      	str	r2, [r3, #32]
 800931e:	e008      	b.n	8009332 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8009320:	463b      	mov	r3, r7
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800932a:	463b      	mov	r3, r7
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2200      	movs	r2, #0
 8009330:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	647b      	str	r3, [r7, #68]	; 0x44
 8009338:	463b      	mov	r3, r7
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d164      	bne.n	800940c <USB_EPStartXfer+0x63c>
 8009342:	1d3b      	adds	r3, r7, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009348:	1d3b      	adds	r3, r7, #4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009350:	b29b      	uxth	r3, r3
 8009352:	461a      	mov	r2, r3
 8009354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009356:	4413      	add	r3, r2
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800935a:	463b      	mov	r3, r7
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	011a      	lsls	r2, r3, #4
 8009362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009364:	4413      	add	r3, r2
 8009366:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800936a:	63bb      	str	r3, [r7, #56]	; 0x38
 800936c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d112      	bne.n	800939a <USB_EPStartXfer+0x5ca>
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800937e:	b29a      	uxth	r2, r3
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800938e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009392:	b29a      	uxth	r2, r3
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	801a      	strh	r2, [r3, #0]
 8009398:	e054      	b.n	8009444 <USB_EPStartXfer+0x674>
 800939a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800939e:	2b3e      	cmp	r3, #62	; 0x3e
 80093a0:	d817      	bhi.n	80093d2 <USB_EPStartXfer+0x602>
 80093a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093a6:	085b      	lsrs	r3, r3, #1
 80093a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d004      	beq.n	80093c2 <USB_EPStartXfer+0x5f2>
 80093b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093bc:	3301      	adds	r3, #1
 80093be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	029b      	lsls	r3, r3, #10
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	e038      	b.n	8009444 <USB_EPStartXfer+0x674>
 80093d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093d6:	095b      	lsrs	r3, r3, #5
 80093d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093e0:	f003 031f 	and.w	r3, r3, #31
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <USB_EPStartXfer+0x622>
 80093e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093ec:	3b01      	subs	r3, #1
 80093ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	029b      	lsls	r3, r3, #10
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009404:	b29a      	uxth	r2, r3
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	801a      	strh	r2, [r3, #0]
 800940a:	e01b      	b.n	8009444 <USB_EPStartXfer+0x674>
 800940c:	463b      	mov	r3, r7
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	785b      	ldrb	r3, [r3, #1]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d116      	bne.n	8009444 <USB_EPStartXfer+0x674>
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800941e:	b29b      	uxth	r3, r3
 8009420:	461a      	mov	r2, r3
 8009422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009424:	4413      	add	r3, r2
 8009426:	647b      	str	r3, [r7, #68]	; 0x44
 8009428:	463b      	mov	r3, r7
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	011a      	lsls	r2, r3, #4
 8009430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009432:	4413      	add	r3, r2
 8009434:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009438:	643b      	str	r3, [r7, #64]	; 0x40
 800943a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800943e:	b29a      	uxth	r2, r3
 8009440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009442:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009444:	463b      	mov	r3, r7
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	895b      	ldrh	r3, [r3, #10]
 800944a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800944e:	463b      	mov	r3, r7
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6959      	ldr	r1, [r3, #20]
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009458:	b29b      	uxth	r3, r3
 800945a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800945e:	1d38      	adds	r0, r7, #4
 8009460:	6800      	ldr	r0, [r0, #0]
 8009462:	f000 ff13 	bl	800a28c <USB_WritePMA>
 8009466:	e1e2      	b.n	800982e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009468:	463b      	mov	r3, r7
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009472:	1d3b      	adds	r3, r7, #4
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	463b      	mov	r3, r7
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	441a      	add	r2, r3
 800949e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80094a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094b6:	1d3b      	adds	r3, r7, #4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	663b      	str	r3, [r7, #96]	; 0x60
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094ca:	4413      	add	r3, r2
 80094cc:	663b      	str	r3, [r7, #96]	; 0x60
 80094ce:	463b      	mov	r3, r7
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	011a      	lsls	r2, r3, #4
 80094d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094d8:	4413      	add	r3, r2
 80094da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80094ea:	463b      	mov	r3, r7
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	891b      	ldrh	r3, [r3, #8]
 80094f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094f4:	463b      	mov	r3, r7
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6959      	ldr	r1, [r3, #20]
 80094fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094fe:	b29b      	uxth	r3, r3
 8009500:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009504:	1d38      	adds	r0, r7, #4
 8009506:	6800      	ldr	r0, [r0, #0]
 8009508:	f000 fec0 	bl	800a28c <USB_WritePMA>
 800950c:	e18f      	b.n	800982e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	463b      	mov	r3, r7
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 808f 	beq.w	8009648 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800952a:	1d3b      	adds	r3, r7, #4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009530:	463b      	mov	r3, r7
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d164      	bne.n	8009604 <USB_EPStartXfer+0x834>
 800953a:	1d3b      	adds	r3, r7, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	673b      	str	r3, [r7, #112]	; 0x70
 8009540:	1d3b      	adds	r3, r7, #4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009548:	b29b      	uxth	r3, r3
 800954a:	461a      	mov	r2, r3
 800954c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800954e:	4413      	add	r3, r2
 8009550:	673b      	str	r3, [r7, #112]	; 0x70
 8009552:	463b      	mov	r3, r7
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	011a      	lsls	r2, r3, #4
 800955a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800955c:	4413      	add	r3, r2
 800955e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009562:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d112      	bne.n	8009592 <USB_EPStartXfer+0x7c2>
 800956c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009576:	b29a      	uxth	r2, r3
 8009578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957a:	801a      	strh	r2, [r3, #0]
 800957c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	b29b      	uxth	r3, r3
 8009582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800958a:	b29a      	uxth	r2, r3
 800958c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958e:	801a      	strh	r2, [r3, #0]
 8009590:	e054      	b.n	800963c <USB_EPStartXfer+0x86c>
 8009592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009596:	2b3e      	cmp	r3, #62	; 0x3e
 8009598:	d817      	bhi.n	80095ca <USB_EPStartXfer+0x7fa>
 800959a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800959e:	085b      	lsrs	r3, r3, #1
 80095a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <USB_EPStartXfer+0x7ea>
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b4:	3301      	adds	r3, #1
 80095b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095be:	b29b      	uxth	r3, r3
 80095c0:	029b      	lsls	r3, r3, #10
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c6:	801a      	strh	r2, [r3, #0]
 80095c8:	e038      	b.n	800963c <USB_EPStartXfer+0x86c>
 80095ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095ce:	095b      	lsrs	r3, r3, #5
 80095d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095d8:	f003 031f 	and.w	r3, r3, #31
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <USB_EPStartXfer+0x81a>
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e4:	3b01      	subs	r3, #1
 80095e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	029b      	lsls	r3, r3, #10
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009600:	801a      	strh	r2, [r3, #0]
 8009602:	e01b      	b.n	800963c <USB_EPStartXfer+0x86c>
 8009604:	463b      	mov	r3, r7
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d116      	bne.n	800963c <USB_EPStartXfer+0x86c>
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009616:	b29b      	uxth	r3, r3
 8009618:	461a      	mov	r2, r3
 800961a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800961c:	4413      	add	r3, r2
 800961e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009620:	463b      	mov	r3, r7
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	011a      	lsls	r2, r3, #4
 8009628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800962a:	4413      	add	r3, r2
 800962c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009630:	677b      	str	r3, [r7, #116]	; 0x74
 8009632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009636:	b29a      	uxth	r2, r3
 8009638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800963a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800963c:	463b      	mov	r3, r7
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	895b      	ldrh	r3, [r3, #10]
 8009642:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009646:	e097      	b.n	8009778 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009648:	463b      	mov	r3, r7
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d168      	bne.n	8009724 <USB_EPStartXfer+0x954>
 8009652:	1d3b      	adds	r3, r7, #4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800965a:	1d3b      	adds	r3, r7, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009662:	b29b      	uxth	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800966a:	4413      	add	r3, r2
 800966c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009670:	463b      	mov	r3, r7
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	011a      	lsls	r2, r3, #4
 8009678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800967c:	4413      	add	r3, r2
 800967e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009682:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009688:	2b00      	cmp	r3, #0
 800968a:	d112      	bne.n	80096b2 <USB_EPStartXfer+0x8e2>
 800968c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009696:	b29a      	uxth	r2, r3
 8009698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	e05d      	b.n	800976e <USB_EPStartXfer+0x99e>
 80096b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096b6:	2b3e      	cmp	r3, #62	; 0x3e
 80096b8:	d817      	bhi.n	80096ea <USB_EPStartXfer+0x91a>
 80096ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096be:	085b      	lsrs	r3, r3, #1
 80096c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d004      	beq.n	80096da <USB_EPStartXfer+0x90a>
 80096d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80096d4:	3301      	adds	r3, #1
 80096d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80096de:	b29b      	uxth	r3, r3
 80096e0:	029b      	lsls	r3, r3, #10
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096e6:	801a      	strh	r2, [r3, #0]
 80096e8:	e041      	b.n	800976e <USB_EPStartXfer+0x99e>
 80096ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096ee:	095b      	lsrs	r3, r3, #5
 80096f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096f8:	f003 031f 	and.w	r3, r3, #31
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <USB_EPStartXfer+0x93a>
 8009700:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009704:	3b01      	subs	r3, #1
 8009706:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800970a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800970e:	b29b      	uxth	r3, r3
 8009710:	029b      	lsls	r3, r3, #10
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800971c:	b29a      	uxth	r2, r3
 800971e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009720:	801a      	strh	r2, [r3, #0]
 8009722:	e024      	b.n	800976e <USB_EPStartXfer+0x99e>
 8009724:	463b      	mov	r3, r7
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	785b      	ldrb	r3, [r3, #1]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d11f      	bne.n	800976e <USB_EPStartXfer+0x99e>
 800972e:	1d3b      	adds	r3, r7, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800973e:	b29b      	uxth	r3, r3
 8009740:	461a      	mov	r2, r3
 8009742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009746:	4413      	add	r3, r2
 8009748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800974c:	463b      	mov	r3, r7
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	011a      	lsls	r2, r3, #4
 8009754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009758:	4413      	add	r3, r2
 800975a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800975e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009766:	b29a      	uxth	r2, r3
 8009768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800976c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800976e:	463b      	mov	r3, r7
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	891b      	ldrh	r3, [r3, #8]
 8009774:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009778:	463b      	mov	r3, r7
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6959      	ldr	r1, [r3, #20]
 800977e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009782:	b29b      	uxth	r3, r3
 8009784:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009788:	1d38      	adds	r0, r7, #4
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	f000 fd7e 	bl	800a28c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009790:	463b      	mov	r3, r7
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d122      	bne.n	80097e0 <USB_EPStartXfer+0xa10>
 800979a:	1d3b      	adds	r3, r7, #4
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	463b      	mov	r3, r7
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80097b8:	1d3b      	adds	r3, r7, #4
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	463b      	mov	r3, r7
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	441a      	add	r2, r3
 80097c6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80097ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097da:	b29b      	uxth	r3, r3
 80097dc:	8013      	strh	r3, [r2, #0]
 80097de:	e026      	b.n	800982e <USB_EPStartXfer+0xa5e>
 80097e0:	463b      	mov	r3, r7
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d121      	bne.n	800982e <USB_EPStartXfer+0xa5e>
 80097ea:	1d3b      	adds	r3, r7, #4
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	463b      	mov	r3, r7
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009804:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009808:	1d3b      	adds	r3, r7, #4
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	463b      	mov	r3, r7
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	441a      	add	r2, r3
 8009816:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800981a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800981e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982a:	b29b      	uxth	r3, r3
 800982c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800982e:	1d3b      	adds	r3, r7, #4
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	463b      	mov	r3, r7
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29b      	uxth	r3, r3
 8009840:	f107 020e 	add.w	r2, r7, #14
 8009844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984c:	8013      	strh	r3, [r2, #0]
 800984e:	f107 030e 	add.w	r3, r7, #14
 8009852:	f107 020e 	add.w	r2, r7, #14
 8009856:	8812      	ldrh	r2, [r2, #0]
 8009858:	f082 0210 	eor.w	r2, r2, #16
 800985c:	801a      	strh	r2, [r3, #0]
 800985e:	f107 030e 	add.w	r3, r7, #14
 8009862:	f107 020e 	add.w	r2, r7, #14
 8009866:	8812      	ldrh	r2, [r2, #0]
 8009868:	f082 0220 	eor.w	r2, r2, #32
 800986c:	801a      	strh	r2, [r3, #0]
 800986e:	1d3b      	adds	r3, r7, #4
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	463b      	mov	r3, r7
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	441a      	add	r2, r3
 800987c:	f107 030e 	add.w	r3, r7, #14
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800988a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	b29b      	uxth	r3, r3
 8009894:	8013      	strh	r3, [r2, #0]
 8009896:	e3b5      	b.n	800a004 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009898:	463b      	mov	r3, r7
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	7b1b      	ldrb	r3, [r3, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f040 8090 	bne.w	80099c4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80098a4:	463b      	mov	r3, r7
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	699a      	ldr	r2, [r3, #24]
 80098aa:	463b      	mov	r3, r7
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d90e      	bls.n	80098d2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80098b4:	463b      	mov	r3, r7
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80098be:	463b      	mov	r3, r7
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098c8:	1ad2      	subs	r2, r2, r3
 80098ca:	463b      	mov	r3, r7
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	619a      	str	r2, [r3, #24]
 80098d0:	e008      	b.n	80098e4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80098d2:	463b      	mov	r3, r7
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80098dc:	463b      	mov	r3, r7
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2200      	movs	r2, #0
 80098e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80098e4:	1d3b      	adds	r3, r7, #4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098ec:	1d3b      	adds	r3, r7, #4
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	461a      	mov	r2, r3
 80098f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098fc:	4413      	add	r3, r2
 80098fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009902:	463b      	mov	r3, r7
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	011a      	lsls	r2, r3, #4
 800990a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800990e:	4413      	add	r3, r2
 8009910:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d116      	bne.n	800994e <USB_EPStartXfer+0xb7e>
 8009920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800992c:	b29a      	uxth	r2, r3
 800992e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009944:	b29a      	uxth	r2, r3
 8009946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800994a:	801a      	strh	r2, [r3, #0]
 800994c:	e32c      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
 800994e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009952:	2b3e      	cmp	r3, #62	; 0x3e
 8009954:	d818      	bhi.n	8009988 <USB_EPStartXfer+0xbb8>
 8009956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800995a:	085b      	lsrs	r3, r3, #1
 800995c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <USB_EPStartXfer+0xba6>
 800996c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009970:	3301      	adds	r3, #1
 8009972:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009976:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800997a:	b29b      	uxth	r3, r3
 800997c:	029b      	lsls	r3, r3, #10
 800997e:	b29a      	uxth	r2, r3
 8009980:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009984:	801a      	strh	r2, [r3, #0]
 8009986:	e30f      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
 8009988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800998c:	095b      	lsrs	r3, r3, #5
 800998e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009996:	f003 031f 	and.w	r3, r3, #31
 800999a:	2b00      	cmp	r3, #0
 800999c:	d104      	bne.n	80099a8 <USB_EPStartXfer+0xbd8>
 800999e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80099a2:	3b01      	subs	r3, #1
 80099a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	029b      	lsls	r3, r3, #10
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099c0:	801a      	strh	r2, [r3, #0]
 80099c2:	e2f1      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80099c4:	463b      	mov	r3, r7
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	78db      	ldrb	r3, [r3, #3]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	f040 818f 	bne.w	8009cee <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80099d0:	463b      	mov	r3, r7
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	785b      	ldrb	r3, [r3, #1]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d175      	bne.n	8009ac6 <USB_EPStartXfer+0xcf6>
 80099da:	1d3b      	adds	r3, r7, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099e2:	1d3b      	adds	r3, r7, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80099f2:	4413      	add	r3, r2
 80099f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099f8:	463b      	mov	r3, r7
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	011a      	lsls	r2, r3, #4
 8009a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a04:	4413      	add	r3, r2
 8009a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a0e:	463b      	mov	r3, r7
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d116      	bne.n	8009a46 <USB_EPStartXfer+0xc76>
 8009a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a2a:	801a      	strh	r2, [r3, #0]
 8009a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a42:	801a      	strh	r2, [r3, #0]
 8009a44:	e065      	b.n	8009b12 <USB_EPStartXfer+0xd42>
 8009a46:	463b      	mov	r3, r7
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8009a4e:	d81a      	bhi.n	8009a86 <USB_EPStartXfer+0xcb6>
 8009a50:	463b      	mov	r3, r7
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	085b      	lsrs	r3, r3, #1
 8009a58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a5c:	463b      	mov	r3, r7
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d004      	beq.n	8009a74 <USB_EPStartXfer+0xca4>
 8009a6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a6e:	3301      	adds	r3, #1
 8009a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	029b      	lsls	r3, r3, #10
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e045      	b.n	8009b12 <USB_EPStartXfer+0xd42>
 8009a86:	463b      	mov	r3, r7
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	095b      	lsrs	r3, r3, #5
 8009a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a92:	463b      	mov	r3, r7
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 031f 	and.w	r3, r3, #31
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d104      	bne.n	8009aaa <USB_EPStartXfer+0xcda>
 8009aa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	029b      	lsls	r3, r3, #10
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e025      	b.n	8009b12 <USB_EPStartXfer+0xd42>
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d120      	bne.n	8009b12 <USB_EPStartXfer+0xd42>
 8009ad0:	1d3b      	adds	r3, r7, #4
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ad8:	1d3b      	adds	r3, r7, #4
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ae8:	4413      	add	r3, r2
 8009aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009aee:	463b      	mov	r3, r7
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	011a      	lsls	r2, r3, #4
 8009af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009afa:	4413      	add	r3, r2
 8009afc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b04:	463b      	mov	r3, r7
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	1d3b      	adds	r3, r7, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d175      	bne.n	8009c10 <USB_EPStartXfer+0xe40>
 8009b24:	1d3b      	adds	r3, r7, #4
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b2c:	1d3b      	adds	r3, r7, #4
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	461a      	mov	r2, r3
 8009b38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b42:	463b      	mov	r3, r7
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	011a      	lsls	r2, r3, #4
 8009b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b4e:	4413      	add	r3, r2
 8009b50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b58:	463b      	mov	r3, r7
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d116      	bne.n	8009b90 <USB_EPStartXfer+0xdc0>
 8009b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b74:	801a      	strh	r2, [r3, #0]
 8009b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	e061      	b.n	8009c54 <USB_EPStartXfer+0xe84>
 8009b90:	463b      	mov	r3, r7
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b3e      	cmp	r3, #62	; 0x3e
 8009b98:	d81a      	bhi.n	8009bd0 <USB_EPStartXfer+0xe00>
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	085b      	lsrs	r3, r3, #1
 8009ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <USB_EPStartXfer+0xdee>
 8009bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb8:	3301      	adds	r3, #1
 8009bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	029b      	lsls	r3, r3, #10
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	e041      	b.n	8009c54 <USB_EPStartXfer+0xe84>
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	095b      	lsrs	r3, r3, #5
 8009bd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bdc:	463b      	mov	r3, r7
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	f003 031f 	and.w	r3, r3, #31
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d104      	bne.n	8009bf4 <USB_EPStartXfer+0xe24>
 8009bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	029b      	lsls	r3, r3, #10
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c0c:	801a      	strh	r2, [r3, #0]
 8009c0e:	e021      	b.n	8009c54 <USB_EPStartXfer+0xe84>
 8009c10:	463b      	mov	r3, r7
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d11c      	bne.n	8009c54 <USB_EPStartXfer+0xe84>
 8009c1a:	1d3b      	adds	r3, r7, #4
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c30:	463b      	mov	r3, r7
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	011a      	lsls	r2, r3, #4
 8009c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c46:	463b      	mov	r3, r7
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c52:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009c54:	463b      	mov	r3, r7
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 81a4 	beq.w	8009fa8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009c60:	1d3b      	adds	r3, r7, #4
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	463b      	mov	r3, r7
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c74:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d005      	beq.n	8009c8c <USB_EPStartXfer+0xebc>
 8009c80:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10d      	bne.n	8009ca8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c8c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 8187 	bne.w	8009fa8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c9a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f040 8180 	bne.w	8009fa8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009ca8:	1d3b      	adds	r3, r7, #4
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	463b      	mov	r3, r7
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009cc6:	1d3b      	adds	r3, r7, #4
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	463b      	mov	r3, r7
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	441a      	add	r2, r3
 8009cd4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	8013      	strh	r3, [r2, #0]
 8009cec:	e15c      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009cee:	463b      	mov	r3, r7
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	78db      	ldrb	r3, [r3, #3]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	f040 8155 	bne.w	8009fa4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699a      	ldr	r2, [r3, #24]
 8009d00:	463b      	mov	r3, r7
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d90e      	bls.n	8009d28 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8009d0a:	463b      	mov	r3, r7
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009d14:	463b      	mov	r3, r7
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	463b      	mov	r3, r7
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	619a      	str	r2, [r3, #24]
 8009d26:	e008      	b.n	8009d3a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8009d28:	463b      	mov	r3, r7
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009d32:	463b      	mov	r3, r7
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d16f      	bne.n	8009e24 <USB_EPStartXfer+0x1054>
 8009d44:	1d3b      	adds	r3, r7, #4
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d4c:	1d3b      	adds	r3, r7, #4
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	461a      	mov	r2, r3
 8009d58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d62:	463b      	mov	r3, r7
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	011a      	lsls	r2, r3, #4
 8009d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d6e:	4413      	add	r3, r2
 8009d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d116      	bne.n	8009dae <USB_EPStartXfer+0xfde>
 8009d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d92:	801a      	strh	r2, [r3, #0]
 8009d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009daa:	801a      	strh	r2, [r3, #0]
 8009dac:	e05f      	b.n	8009e6e <USB_EPStartXfer+0x109e>
 8009dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009db2:	2b3e      	cmp	r3, #62	; 0x3e
 8009db4:	d818      	bhi.n	8009de8 <USB_EPStartXfer+0x1018>
 8009db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d004      	beq.n	8009dd6 <USB_EPStartXfer+0x1006>
 8009dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	029b      	lsls	r3, r3, #10
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	e042      	b.n	8009e6e <USB_EPStartXfer+0x109e>
 8009de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dec:	095b      	lsrs	r3, r3, #5
 8009dee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009df6:	f003 031f 	and.w	r3, r3, #31
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d104      	bne.n	8009e08 <USB_EPStartXfer+0x1038>
 8009dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e02:	3b01      	subs	r3, #1
 8009e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	029b      	lsls	r3, r3, #10
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e20:	801a      	strh	r2, [r3, #0]
 8009e22:	e024      	b.n	8009e6e <USB_EPStartXfer+0x109e>
 8009e24:	463b      	mov	r3, r7
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d11f      	bne.n	8009e6e <USB_EPStartXfer+0x109e>
 8009e2e:	1d3b      	adds	r3, r7, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e36:	1d3b      	adds	r3, r7, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	461a      	mov	r2, r3
 8009e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e46:	4413      	add	r3, r2
 8009e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e4c:	463b      	mov	r3, r7
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	011a      	lsls	r2, r3, #4
 8009e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e58:	4413      	add	r3, r2
 8009e5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	1d3b      	adds	r3, r7, #4
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e76:	463b      	mov	r3, r7
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d16f      	bne.n	8009f60 <USB_EPStartXfer+0x1190>
 8009e80:	1d3b      	adds	r3, r7, #4
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e88:	1d3b      	adds	r3, r7, #4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e98:	4413      	add	r3, r2
 8009e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	011a      	lsls	r2, r3, #4
 8009ea6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009eaa:	4413      	add	r3, r2
 8009eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d116      	bne.n	8009eea <USB_EPStartXfer+0x111a>
 8009ebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ece:	801a      	strh	r2, [r3, #0]
 8009ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ee6:	801a      	strh	r2, [r3, #0]
 8009ee8:	e05e      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
 8009eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eee:	2b3e      	cmp	r3, #62	; 0x3e
 8009ef0:	d818      	bhi.n	8009f24 <USB_EPStartXfer+0x1154>
 8009ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ef6:	085b      	lsrs	r3, r3, #1
 8009ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <USB_EPStartXfer+0x1142>
 8009f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	029b      	lsls	r3, r3, #10
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	e041      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
 8009f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f28:	095b      	lsrs	r3, r3, #5
 8009f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f32:	f003 031f 	and.w	r3, r3, #31
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d104      	bne.n	8009f44 <USB_EPStartXfer+0x1174>
 8009f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	029b      	lsls	r3, r3, #10
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	e023      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
 8009f60:	463b      	mov	r3, r7
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d11e      	bne.n	8009fa8 <USB_EPStartXfer+0x11d8>
 8009f6a:	1d3b      	adds	r3, r7, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	461a      	mov	r2, r3
 8009f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f80:	463b      	mov	r3, r7
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	011a      	lsls	r2, r3, #4
 8009f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	e001      	b.n	8009fa8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e02e      	b.n	800a006 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009fa8:	1d3b      	adds	r3, r7, #4
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	463b      	mov	r3, r7
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009fc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009fca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009fce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009fd2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009fd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009fda:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009fde:	1d3b      	adds	r3, r7, #4
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	441a      	add	r2, r3
 8009fec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a000:	b29b      	uxth	r3, r3
 800a002:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	785b      	ldrb	r3, [r3, #1]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d020      	beq.n	800a064 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a038:	81bb      	strh	r3, [r7, #12]
 800a03a:	89bb      	ldrh	r3, [r7, #12]
 800a03c:	f083 0310 	eor.w	r3, r3, #16
 800a040:	81bb      	strh	r3, [r7, #12]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	441a      	add	r2, r3
 800a04c:	89bb      	ldrh	r3, [r7, #12]
 800a04e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a05e:	b29b      	uxth	r3, r3
 800a060:	8013      	strh	r3, [r2, #0]
 800a062:	e01f      	b.n	800a0a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b29b      	uxth	r3, r3
 800a072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07a:	81fb      	strh	r3, [r7, #14]
 800a07c:	89fb      	ldrh	r3, [r7, #14]
 800a07e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a082:	81fb      	strh	r3, [r7, #14]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	441a      	add	r2, r3
 800a08e:	89fb      	ldrh	r3, [r7, #14]
 800a090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bc80      	pop	{r7}
 800a0ae:	4770      	bx	lr

0800a0b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	7b1b      	ldrb	r3, [r3, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f040 809d 	bne.w	800a1fe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d04c      	beq.n	800a166 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	823b      	strh	r3, [r7, #16]
 800a0da:	8a3b      	ldrh	r3, [r7, #16]
 800a0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01b      	beq.n	800a11c <USB_EPClearStall+0x6c>
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fa:	81fb      	strh	r3, [r7, #14]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	441a      	add	r2, r3
 800a106:	89fb      	ldrh	r3, [r7, #14]
 800a108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a10c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a118:	b29b      	uxth	r3, r3
 800a11a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	78db      	ldrb	r3, [r3, #3]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d06c      	beq.n	800a1fe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	b29b      	uxth	r3, r3
 800a132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a13a:	81bb      	strh	r3, [r7, #12]
 800a13c:	89bb      	ldrh	r3, [r7, #12]
 800a13e:	f083 0320 	eor.w	r3, r3, #32
 800a142:	81bb      	strh	r3, [r7, #12]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	441a      	add	r2, r3
 800a14e:	89bb      	ldrh	r3, [r7, #12]
 800a150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a160:	b29b      	uxth	r3, r3
 800a162:	8013      	strh	r3, [r2, #0]
 800a164:	e04b      	b.n	800a1fe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	82fb      	strh	r3, [r7, #22]
 800a174:	8afb      	ldrh	r3, [r7, #22]
 800a176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01b      	beq.n	800a1b6 <USB_EPClearStall+0x106>
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a194:	82bb      	strh	r3, [r7, #20]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	441a      	add	r2, r3
 800a1a0:	8abb      	ldrh	r3, [r7, #20]
 800a1a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1cc:	827b      	strh	r3, [r7, #18]
 800a1ce:	8a7b      	ldrh	r3, [r7, #18]
 800a1d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1d4:	827b      	strh	r3, [r7, #18]
 800a1d6:	8a7b      	ldrh	r3, [r7, #18]
 800a1d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1dc:	827b      	strh	r3, [r7, #18]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	441a      	add	r2, r3
 800a1e8:	8a7b      	ldrh	r3, [r7, #18]
 800a1ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	bc80      	pop	{r7}
 800a208:	4770      	bx	lr

0800a20a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	460b      	mov	r3, r1
 800a214:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2280      	movs	r2, #128	; 0x80
 800a220:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bc80      	pop	{r7}
 800a22e:	4770      	bx	lr

0800a230 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr

0800a244 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	bc80      	pop	{r7}
 800a256:	4770      	bx	lr

0800a258 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a266:	b29b      	uxth	r3, r3
 800a268:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a26a:	68fb      	ldr	r3, [r7, #12]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr

0800a276 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b08d      	sub	sp, #52	; 0x34
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	460b      	mov	r3, r1
 800a29c:	80fb      	strh	r3, [r7, #6]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a2a2:	88bb      	ldrh	r3, [r7, #4]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	085b      	lsrs	r3, r3, #1
 800a2a8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	005a      	lsls	r2, r3, #1
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2be:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2c4:	e01e      	b.n	800a304 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	3302      	adds	r3, #2
 800a2f6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	3b01      	subs	r3, #1
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1dd      	bne.n	800a2c6 <USB_WritePMA+0x3a>
  }
}
 800a30a:	bf00      	nop
 800a30c:	3734      	adds	r7, #52	; 0x34
 800a30e:	46bd      	mov	sp, r7
 800a310:	bc80      	pop	{r7}
 800a312:	4770      	bx	lr

0800a314 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a314:	b480      	push	{r7}
 800a316:	b08b      	sub	sp, #44	; 0x2c
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	4611      	mov	r1, r2
 800a320:	461a      	mov	r2, r3
 800a322:	460b      	mov	r3, r1
 800a324:	80fb      	strh	r3, [r7, #6]
 800a326:	4613      	mov	r3, r2
 800a328:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a32a:	88bb      	ldrh	r3, [r7, #4]
 800a32c:	085b      	lsrs	r3, r3, #1
 800a32e:	b29b      	uxth	r3, r3
 800a330:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a33a:	88fb      	ldrh	r3, [r7, #6]
 800a33c:	005a      	lsls	r2, r3, #1
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a346:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
 800a34c:	e01b      	b.n	800a386 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	b29b      	uxth	r3, r3
 800a354:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	3302      	adds	r3, #2
 800a35a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	3301      	adds	r3, #1
 800a368:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	0a1b      	lsrs	r3, r3, #8
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	3301      	adds	r3, #1
 800a378:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	3302      	adds	r3, #2
 800a37e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	3b01      	subs	r3, #1
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e0      	bne.n	800a34e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a38c:	88bb      	ldrh	r3, [r7, #4]
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	b29b      	uxth	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	d007      	beq.n	800a3a8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	701a      	strb	r2, [r3, #0]
  }
}
 800a3a8:	bf00      	nop
 800a3aa:	372c      	adds	r7, #44	; 0x2c
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr

0800a3b2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	7c1b      	ldrb	r3, [r3, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d115      	bne.n	800a3f6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	2181      	movs	r1, #129	; 0x81
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f001 fe89 	bl	800c0ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f001 fe7f 	bl	800c0ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a3f4:	e012      	b.n	800a41c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3f6:	2340      	movs	r3, #64	; 0x40
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	2181      	movs	r1, #129	; 0x81
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f001 fe74 	bl	800c0ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a408:	2340      	movs	r3, #64	; 0x40
 800a40a:	2202      	movs	r2, #2
 800a40c:	2101      	movs	r1, #1
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 fe6b 	bl	800c0ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a41c:	2308      	movs	r3, #8
 800a41e:	2203      	movs	r2, #3
 800a420:	2182      	movs	r1, #130	; 0x82
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 fe61 	bl	800c0ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a42e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a432:	f001 ff81 	bl	800c338 <USBD_static_malloc>
 800a436:	4602      	mov	r2, r0
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a444:	2b00      	cmp	r3, #0
 800a446:	d102      	bne.n	800a44e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a448:	2301      	movs	r3, #1
 800a44a:	73fb      	strb	r3, [r7, #15]
 800a44c:	e026      	b.n	800a49c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a454:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	7c1b      	ldrb	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d109      	bne.n	800a48c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a47e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a482:	2101      	movs	r1, #1
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 ff21 	bl	800c2cc <USBD_LL_PrepareReceive>
 800a48a:	e007      	b.n	800a49c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a492:	2340      	movs	r3, #64	; 0x40
 800a494:	2101      	movs	r1, #1
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f001 ff18 	bl	800c2cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a4b6:	2181      	movs	r1, #129	; 0x81
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fe3c 	bl	800c136 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 fe35 	bl	800c136 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a4d4:	2182      	movs	r1, #130	; 0x82
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 fe2d 	bl	800c136 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00e      	beq.n	800a50a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 ff27 	bl	800c350 <USBD_static_free>
    pdev->pClassData = NULL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a524:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a52a:	2300      	movs	r3, #0
 800a52c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d039      	beq.n	800a5b2 <USBD_CDC_Setup+0x9e>
 800a53e:	2b20      	cmp	r3, #32
 800a540:	d17c      	bne.n	800a63c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	88db      	ldrh	r3, [r3, #6]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d029      	beq.n	800a59e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	da11      	bge.n	800a578 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a560:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	88d2      	ldrh	r2, [r2, #6]
 800a566:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a568:	6939      	ldr	r1, [r7, #16]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	88db      	ldrh	r3, [r3, #6]
 800a56e:	461a      	mov	r2, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 f9f9 	bl	800b968 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a576:	e068      	b.n	800a64a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	785a      	ldrb	r2, [r3, #1]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	88db      	ldrh	r3, [r3, #6]
 800a586:	b2da      	uxtb	r2, r3
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a58e:	6939      	ldr	r1, [r7, #16]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	88db      	ldrh	r3, [r3, #6]
 800a594:	461a      	mov	r2, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f001 fa14 	bl	800b9c4 <USBD_CtlPrepareRx>
      break;
 800a59c:	e055      	b.n	800a64a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	7850      	ldrb	r0, [r2, #1]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	4798      	blx	r3
      break;
 800a5b0:	e04b      	b.n	800a64a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	2b0a      	cmp	r3, #10
 800a5b8:	d017      	beq.n	800a5ea <USBD_CDC_Setup+0xd6>
 800a5ba:	2b0b      	cmp	r3, #11
 800a5bc:	d029      	beq.n	800a612 <USBD_CDC_Setup+0xfe>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d133      	bne.n	800a62a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d107      	bne.n	800a5dc <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a5cc:	f107 030c 	add.w	r3, r7, #12
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f001 f9c7 	bl	800b968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5da:	e02e      	b.n	800a63a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 f958 	bl	800b894 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	75fb      	strb	r3, [r7, #23]
          break;
 800a5e8:	e027      	b.n	800a63a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d107      	bne.n	800a604 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5f4:	f107 030f 	add.w	r3, r7, #15
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 f9b3 	bl	800b968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a602:	e01a      	b.n	800a63a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 f944 	bl	800b894 <USBD_CtlError>
            ret = USBD_FAIL;
 800a60c:	2302      	movs	r3, #2
 800a60e:	75fb      	strb	r3, [r7, #23]
          break;
 800a610:	e013      	b.n	800a63a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d00d      	beq.n	800a638 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 f938 	bl	800b894 <USBD_CtlError>
            ret = USBD_FAIL;
 800a624:	2302      	movs	r3, #2
 800a626:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a628:	e006      	b.n	800a638 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f001 f931 	bl	800b894 <USBD_CtlError>
          ret = USBD_FAIL;
 800a632:	2302      	movs	r3, #2
 800a634:	75fb      	strb	r3, [r7, #23]
          break;
 800a636:	e000      	b.n	800a63a <USBD_CDC_Setup+0x126>
          break;
 800a638:	bf00      	nop
      }
      break;
 800a63a:	e006      	b.n	800a64a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 f928 	bl	800b894 <USBD_CtlError>
      ret = USBD_FAIL;
 800a644:	2302      	movs	r3, #2
 800a646:	75fb      	strb	r3, [r7, #23]
      break;
 800a648:	bf00      	nop
  }

  return ret;
 800a64a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a666:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a66e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a676:	2b00      	cmp	r3, #0
 800a678:	d03a      	beq.n	800a6f0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	440b      	add	r3, r1
 800a688:	331c      	adds	r3, #28
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d029      	beq.n	800a6e4 <USBD_CDC_DataIn+0x90>
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	440b      	add	r3, r1
 800a69e:	331c      	adds	r3, #28
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	78f9      	ldrb	r1, [r7, #3]
 800a6a4:	68b8      	ldr	r0, [r7, #8]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	4403      	add	r3, r0
 800a6b0:	3338      	adds	r3, #56	; 0x38
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6b8:	fb03 f301 	mul.w	r3, r3, r1
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d110      	bne.n	800a6e4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	6879      	ldr	r1, [r7, #4]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	331c      	adds	r3, #28
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6d6:	78f9      	ldrb	r1, [r7, #3]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 fdd2 	bl	800c286 <USBD_LL_Transmit>
 800a6e2:	e003      	b.n	800a6ec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	e000      	b.n	800a6f2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a6f0:	2302      	movs	r3, #2
  }
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a70c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a70e:	78fb      	ldrb	r3, [r7, #3]
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 fdfd 	bl	800c312 <USBD_LL_GetRxDataSize>
 800a718:	4602      	mov	r2, r0
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00d      	beq.n	800a746 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a73e:	4611      	mov	r1, r2
 800a740:	4798      	blx	r3

    return USBD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	e000      	b.n	800a748 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a746:	2302      	movs	r3, #2
  }
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a766:	2b00      	cmp	r3, #0
 800a768:	d015      	beq.n	800a796 <USBD_CDC_EP0_RxReady+0x46>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a770:	2bff      	cmp	r3, #255	; 0xff
 800a772:	d010      	beq.n	800a796 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a782:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a78a:	b292      	uxth	r2, r2
 800a78c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	22ff      	movs	r2, #255	; 0xff
 800a792:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2243      	movs	r2, #67	; 0x43
 800a7ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a7ae:	4b03      	ldr	r3, [pc, #12]	; (800a7bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bc80      	pop	{r7}
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	2000009c 	.word	0x2000009c

0800a7c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2243      	movs	r2, #67	; 0x43
 800a7cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a7ce:	4b03      	ldr	r3, [pc, #12]	; (800a7dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000058 	.word	0x20000058

0800a7e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2243      	movs	r2, #67	; 0x43
 800a7ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a7ee:	4b03      	ldr	r3, [pc, #12]	; (800a7fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bc80      	pop	{r7}
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	200000e0 	.word	0x200000e0

0800a800 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	220a      	movs	r2, #10
 800a80c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a80e:	4b03      	ldr	r3, [pc, #12]	; (800a81c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	bc80      	pop	{r7}
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	20000014 	.word	0x20000014

0800a820 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a82a:	2302      	movs	r3, #2
 800a82c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d005      	beq.n	800a840 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a840:	7bfb      	ldrb	r3, [r7, #15]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	bc80      	pop	{r7}
 800a84a:	4770      	bx	lr

0800a84c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a860:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a86a:	88fa      	ldrh	r2, [r7, #6]
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	bc80      	pop	{r7}
 800a87c:	4770      	bx	lr

0800a87e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a87e:	b480      	push	{r7}
 800a880:	b085      	sub	sp, #20
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a88e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d01c      	beq.n	800a8f8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d115      	bne.n	800a8f4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2181      	movs	r1, #129	; 0x81
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 fccb 	bl	800c286 <USBD_LL_Transmit>

      return USBD_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	e002      	b.n	800a8fa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e000      	b.n	800a8fa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a8f8:	2302      	movs	r3, #2
  }
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a910:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d017      	beq.n	800a94c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	7c1b      	ldrb	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d109      	bne.n	800a938 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a92a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a92e:	2101      	movs	r1, #1
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f001 fccb 	bl	800c2cc <USBD_LL_PrepareReceive>
 800a936:	e007      	b.n	800a948 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a93e:	2340      	movs	r3, #64	; 0x40
 800a940:	2101      	movs	r1, #1
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f001 fcc2 	bl	800c2cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	e000      	b.n	800a94e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a94c:	2302      	movs	r3, #2
  }
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	60f8      	str	r0, [r7, #12]
 800a95e:	60b9      	str	r1, [r7, #8]
 800a960:	4613      	mov	r3, r2
 800a962:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a96a:	2302      	movs	r3, #2
 800a96c:	e01a      	b.n	800a9a4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d003      	beq.n	800a980 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	79fa      	ldrb	r2, [r7, #7]
 800a99a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f001 fb2f 	bl	800c000 <USBD_LL_Init>

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d006      	beq.n	800a9ce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
 800a9cc:	e001      	b.n	800a9d2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bc80      	pop	{r7}
 800a9dc:	4770      	bx	lr

0800a9de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f001 fb64 	bl	800c0b4 <USBD_LL_Start>

  return USBD_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr

0800aa0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa16:	2302      	movs	r3, #2
 800aa18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00c      	beq.n	800aa3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	4611      	mov	r1, r2
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	4798      	blx	r3
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	78fa      	ldrb	r2, [r7, #3]
 800aa5e:	4611      	mov	r1, r2
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3

  return USBD_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 fecb 	bl	800b81c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa94:	461a      	mov	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aaa2:	f003 031f 	and.w	r3, r3, #31
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d00c      	beq.n	800aac4 <USBD_LL_SetupStage+0x56>
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d302      	bcc.n	800aab4 <USBD_LL_SetupStage+0x46>
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d010      	beq.n	800aad4 <USBD_LL_SetupStage+0x66>
 800aab2:	e017      	b.n	800aae4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f9cb 	bl	800ae58 <USBD_StdDevReq>
      break;
 800aac2:	e01a      	b.n	800aafa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fa2d 	bl	800af2c <USBD_StdItfReq>
      break;
 800aad2:	e012      	b.n	800aafa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fa6b 	bl	800afb8 <USBD_StdEPReq>
      break;
 800aae2:	e00a      	b.n	800aafa <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aaea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 fb3e 	bl	800c174 <USBD_LL_StallEP>
      break;
 800aaf8:	bf00      	nop
  }

  return USBD_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d14b      	bne.n	800abb0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab1e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d134      	bne.n	800ab94 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	68da      	ldr	r2, [r3, #12]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d919      	bls.n	800ab6a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	68da      	ldr	r2, [r3, #12]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d203      	bcs.n	800ab58 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	e002      	b.n	800ab5e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 ff4c 	bl	800ba00 <USBD_CtlContinueRx>
 800ab68:	e038      	b.n	800abdc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d105      	bne.n	800ab8c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 ff49 	bl	800ba24 <USBD_CtlSendStatus>
 800ab92:	e023      	b.n	800abdc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab9a:	2b05      	cmp	r3, #5
 800ab9c:	d11e      	bne.n	800abdc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800aba6:	2100      	movs	r1, #0
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f001 fae3 	bl	800c174 <USBD_LL_StallEP>
 800abae:	e015      	b.n	800abdc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00d      	beq.n	800abd8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d108      	bne.n	800abd8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	7afa      	ldrb	r2, [r7, #11]
 800abd0:	4611      	mov	r1, r2
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	4798      	blx	r3
 800abd6:	e001      	b.n	800abdc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800abd8:	2302      	movs	r3, #2
 800abda:	e000      	b.n	800abde <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	460b      	mov	r3, r1
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800abf4:	7afb      	ldrb	r3, [r7, #11]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d17f      	bne.n	800acfa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3314      	adds	r3, #20
 800abfe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d15c      	bne.n	800acc4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d915      	bls.n	800ac42 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	68da      	ldr	r2, [r3, #12]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	1ad2      	subs	r2, r2, r3
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 feb6 	bl	800b9a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac34:	2300      	movs	r3, #0
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f001 fb46 	bl	800c2cc <USBD_LL_PrepareReceive>
 800ac40:	e04e      	b.n	800ace0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	6912      	ldr	r2, [r2, #16]
 800ac4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac4e:	fb02 f201 	mul.w	r2, r2, r1
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11c      	bne.n	800ac92 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d316      	bcc.n	800ac92 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	689a      	ldr	r2, [r3, #8]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d20f      	bcs.n	800ac92 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac72:	2200      	movs	r2, #0
 800ac74:	2100      	movs	r1, #0
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 fe92 	bl	800b9a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac84:	2300      	movs	r3, #0
 800ac86:	2200      	movs	r2, #0
 800ac88:	2100      	movs	r1, #0
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f001 fb1e 	bl	800c2cc <USBD_LL_PrepareReceive>
 800ac90:	e026      	b.n	800ace0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d105      	bne.n	800acb4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800acb4:	2180      	movs	r1, #128	; 0x80
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f001 fa5c 	bl	800c174 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 fec4 	bl	800ba4a <USBD_CtlReceiveStatus>
 800acc2:	e00d      	b.n	800ace0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acca:	2b04      	cmp	r3, #4
 800accc:	d004      	beq.n	800acd8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800acd8:	2180      	movs	r1, #128	; 0x80
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f001 fa4a 	bl	800c174 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d11d      	bne.n	800ad26 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7ff fe83 	bl	800a9f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800acf8:	e015      	b.n	800ad26 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00d      	beq.n	800ad22 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad0c:	2b03      	cmp	r3, #3
 800ad0e:	d108      	bne.n	800ad22 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	7afa      	ldrb	r2, [r7, #11]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	4798      	blx	r3
 800ad20:	e001      	b.n	800ad26 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad22:	2302      	movs	r3, #2
 800ad24:	e000      	b.n	800ad28 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad38:	2340      	movs	r3, #64	; 0x40
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f9d3 	bl	800c0ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2240      	movs	r2, #64	; 0x40
 800ad50:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad54:	2340      	movs	r3, #64	; 0x40
 800ad56:	2200      	movs	r2, #0
 800ad58:	2180      	movs	r1, #128	; 0x80
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f001 f9c5 	bl	800c0ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2240      	movs	r2, #64	; 0x40
 800ad6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d009      	beq.n	800ada8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	6852      	ldr	r2, [r2, #4]
 800ada0:	b2d2      	uxtb	r2, r2
 800ada2:	4611      	mov	r1, r2
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	4798      	blx	r3
  }

  return USBD_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b083      	sub	sp, #12
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	78fa      	ldrb	r2, [r7, #3]
 800adc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	bc80      	pop	{r7}
 800adce:	4770      	bx	lr

0800add0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2204      	movs	r2, #4
 800ade8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr

0800adf8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d105      	bne.n	800ae16 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bc80      	pop	{r7}
 800ae20:	4770      	bx	lr

0800ae22 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b082      	sub	sp, #8
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d10b      	bne.n	800ae4c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae6e:	2b20      	cmp	r3, #32
 800ae70:	d004      	beq.n	800ae7c <USBD_StdDevReq+0x24>
 800ae72:	2b40      	cmp	r3, #64	; 0x40
 800ae74:	d002      	beq.n	800ae7c <USBD_StdDevReq+0x24>
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d008      	beq.n	800ae8c <USBD_StdDevReq+0x34>
 800ae7a:	e04c      	b.n	800af16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	4798      	blx	r3
      break;
 800ae8a:	e049      	b.n	800af20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	785b      	ldrb	r3, [r3, #1]
 800ae90:	2b09      	cmp	r3, #9
 800ae92:	d83a      	bhi.n	800af0a <USBD_StdDevReq+0xb2>
 800ae94:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <USBD_StdDevReq+0x44>)
 800ae96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9a:	bf00      	nop
 800ae9c:	0800aeed 	.word	0x0800aeed
 800aea0:	0800af01 	.word	0x0800af01
 800aea4:	0800af0b 	.word	0x0800af0b
 800aea8:	0800aef7 	.word	0x0800aef7
 800aeac:	0800af0b 	.word	0x0800af0b
 800aeb0:	0800aecf 	.word	0x0800aecf
 800aeb4:	0800aec5 	.word	0x0800aec5
 800aeb8:	0800af0b 	.word	0x0800af0b
 800aebc:	0800aee3 	.word	0x0800aee3
 800aec0:	0800aed9 	.word	0x0800aed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f9d4 	bl	800b274 <USBD_GetDescriptor>
          break;
 800aecc:	e022      	b.n	800af14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fb37 	bl	800b544 <USBD_SetAddress>
          break;
 800aed6:	e01d      	b.n	800af14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fb74 	bl	800b5c8 <USBD_SetConfig>
          break;
 800aee0:	e018      	b.n	800af14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fbfd 	bl	800b6e4 <USBD_GetConfig>
          break;
 800aeea:	e013      	b.n	800af14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fc2c 	bl	800b74c <USBD_GetStatus>
          break;
 800aef4:	e00e      	b.n	800af14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fc5a 	bl	800b7b2 <USBD_SetFeature>
          break;
 800aefe:	e009      	b.n	800af14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fc69 	bl	800b7da <USBD_ClrFeature>
          break;
 800af08:	e004      	b.n	800af14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fcc1 	bl	800b894 <USBD_CtlError>
          break;
 800af12:	bf00      	nop
      }
      break;
 800af14:	e004      	b.n	800af20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fcbb 	bl	800b894 <USBD_CtlError>
      break;
 800af1e:	bf00      	nop
  }

  return ret;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop

0800af2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af42:	2b20      	cmp	r3, #32
 800af44:	d003      	beq.n	800af4e <USBD_StdItfReq+0x22>
 800af46:	2b40      	cmp	r3, #64	; 0x40
 800af48:	d001      	beq.n	800af4e <USBD_StdItfReq+0x22>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d12a      	bne.n	800afa4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af54:	3b01      	subs	r3, #1
 800af56:	2b02      	cmp	r3, #2
 800af58:	d81d      	bhi.n	800af96 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	889b      	ldrh	r3, [r3, #4]
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b01      	cmp	r3, #1
 800af62:	d813      	bhi.n	800af8c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	4798      	blx	r3
 800af72:	4603      	mov	r3, r0
 800af74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	88db      	ldrh	r3, [r3, #6]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d110      	bne.n	800afa0 <USBD_StdItfReq+0x74>
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10d      	bne.n	800afa0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fd4d 	bl	800ba24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af8a:	e009      	b.n	800afa0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fc80 	bl	800b894 <USBD_CtlError>
          break;
 800af94:	e004      	b.n	800afa0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fc7b 	bl	800b894 <USBD_CtlError>
          break;
 800af9e:	e000      	b.n	800afa2 <USBD_StdItfReq+0x76>
          break;
 800afa0:	bf00      	nop
      }
      break;
 800afa2:	e004      	b.n	800afae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fc74 	bl	800b894 <USBD_CtlError>
      break;
 800afac:	bf00      	nop
  }

  return USBD_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	889b      	ldrh	r3, [r3, #4]
 800afca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	d004      	beq.n	800afe2 <USBD_StdEPReq+0x2a>
 800afd8:	2b40      	cmp	r3, #64	; 0x40
 800afda:	d002      	beq.n	800afe2 <USBD_StdEPReq+0x2a>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d008      	beq.n	800aff2 <USBD_StdEPReq+0x3a>
 800afe0:	e13d      	b.n	800b25e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	4798      	blx	r3
      break;
 800aff0:	e13a      	b.n	800b268 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800affa:	2b20      	cmp	r3, #32
 800affc:	d10a      	bne.n	800b014 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	4798      	blx	r3
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	e12a      	b.n	800b26a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	785b      	ldrb	r3, [r3, #1]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d03e      	beq.n	800b09a <USBD_StdEPReq+0xe2>
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d002      	beq.n	800b026 <USBD_StdEPReq+0x6e>
 800b020:	2b00      	cmp	r3, #0
 800b022:	d070      	beq.n	800b106 <USBD_StdEPReq+0x14e>
 800b024:	e115      	b.n	800b252 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d002      	beq.n	800b036 <USBD_StdEPReq+0x7e>
 800b030:	2b03      	cmp	r3, #3
 800b032:	d015      	beq.n	800b060 <USBD_StdEPReq+0xa8>
 800b034:	e02b      	b.n	800b08e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00c      	beq.n	800b056 <USBD_StdEPReq+0x9e>
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b80      	cmp	r3, #128	; 0x80
 800b040:	d009      	beq.n	800b056 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 f894 	bl	800c174 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b04c:	2180      	movs	r1, #128	; 0x80
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f001 f890 	bl	800c174 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b054:	e020      	b.n	800b098 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fc1b 	bl	800b894 <USBD_CtlError>
              break;
 800b05e:	e01b      	b.n	800b098 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	885b      	ldrh	r3, [r3, #2]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10e      	bne.n	800b086 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <USBD_StdEPReq+0xce>
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	2b80      	cmp	r3, #128	; 0x80
 800b072:	d008      	beq.n	800b086 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	88db      	ldrh	r3, [r3, #6]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f001 f877 	bl	800c174 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fccc 	bl	800ba24 <USBD_CtlSendStatus>

              break;
 800b08c:	e004      	b.n	800b098 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fbff 	bl	800b894 <USBD_CtlError>
              break;
 800b096:	bf00      	nop
          }
          break;
 800b098:	e0e0      	b.n	800b25c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d002      	beq.n	800b0aa <USBD_StdEPReq+0xf2>
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d015      	beq.n	800b0d4 <USBD_StdEPReq+0x11c>
 800b0a8:	e026      	b.n	800b0f8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00c      	beq.n	800b0ca <USBD_StdEPReq+0x112>
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	2b80      	cmp	r3, #128	; 0x80
 800b0b4:	d009      	beq.n	800b0ca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f001 f85a 	bl	800c174 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b0c0:	2180      	movs	r1, #128	; 0x80
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 f856 	bl	800c174 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0c8:	e01c      	b.n	800b104 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fbe1 	bl	800b894 <USBD_CtlError>
              break;
 800b0d2:	e017      	b.n	800b104 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	885b      	ldrh	r3, [r3, #2]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d112      	bne.n	800b102 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d004      	beq.n	800b0f0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f001 f861 	bl	800c1b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fc97 	bl	800ba24 <USBD_CtlSendStatus>
              }
              break;
 800b0f6:	e004      	b.n	800b102 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fbca 	bl	800b894 <USBD_CtlError>
              break;
 800b100:	e000      	b.n	800b104 <USBD_StdEPReq+0x14c>
              break;
 800b102:	bf00      	nop
          }
          break;
 800b104:	e0aa      	b.n	800b25c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d002      	beq.n	800b116 <USBD_StdEPReq+0x15e>
 800b110:	2b03      	cmp	r3, #3
 800b112:	d032      	beq.n	800b17a <USBD_StdEPReq+0x1c2>
 800b114:	e097      	b.n	800b246 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d007      	beq.n	800b12c <USBD_StdEPReq+0x174>
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	2b80      	cmp	r3, #128	; 0x80
 800b120:	d004      	beq.n	800b12c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fbb5 	bl	800b894 <USBD_CtlError>
                break;
 800b12a:	e091      	b.n	800b250 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b12c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b130:	2b00      	cmp	r3, #0
 800b132:	da0b      	bge.n	800b14c <USBD_StdEPReq+0x194>
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b13a:	4613      	mov	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	3310      	adds	r3, #16
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	4413      	add	r3, r2
 800b148:	3304      	adds	r3, #4
 800b14a:	e00b      	b.n	800b164 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	4413      	add	r3, r2
 800b162:	3304      	adds	r3, #4
 800b164:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2202      	movs	r2, #2
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fbf8 	bl	800b968 <USBD_CtlSendData>
              break;
 800b178:	e06a      	b.n	800b250 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b17a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	da11      	bge.n	800b1a6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	f003 020f 	and.w	r2, r3, #15
 800b188:	6879      	ldr	r1, [r7, #4]
 800b18a:	4613      	mov	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	440b      	add	r3, r1
 800b194:	3318      	adds	r3, #24
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d117      	bne.n	800b1cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fb78 	bl	800b894 <USBD_CtlError>
                  break;
 800b1a4:	e054      	b.n	800b250 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	f003 020f 	and.w	r2, r3, #15
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	440b      	add	r3, r1
 800b1b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d104      	bne.n	800b1cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fb65 	bl	800b894 <USBD_CtlError>
                  break;
 800b1ca:	e041      	b.n	800b250 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	da0b      	bge.n	800b1ec <USBD_StdEPReq+0x234>
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	3310      	adds	r3, #16
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	e00b      	b.n	800b204 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	4413      	add	r3, r2
 800b202:	3304      	adds	r3, #4
 800b204:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <USBD_StdEPReq+0x25a>
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	2b80      	cmp	r3, #128	; 0x80
 800b210:	d103      	bne.n	800b21a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	e00e      	b.n	800b238 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b21a:	7bbb      	ldrb	r3, [r7, #14]
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 ffe6 	bl	800c1f0 <USBD_LL_IsStallEP>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	e002      	b.n	800b238 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	2202      	movs	r2, #2
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fb92 	bl	800b968 <USBD_CtlSendData>
              break;
 800b244:	e004      	b.n	800b250 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fb23 	bl	800b894 <USBD_CtlError>
              break;
 800b24e:	bf00      	nop
          }
          break;
 800b250:	e004      	b.n	800b25c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fb1d 	bl	800b894 <USBD_CtlError>
          break;
 800b25a:	bf00      	nop
      }
      break;
 800b25c:	e004      	b.n	800b268 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fb17 	bl	800b894 <USBD_CtlError>
      break;
 800b266:	bf00      	nop
  }

  return ret;
 800b268:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b286:	2300      	movs	r3, #0
 800b288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	885b      	ldrh	r3, [r3, #2]
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b29b      	uxth	r3, r3
 800b292:	3b01      	subs	r3, #1
 800b294:	2b06      	cmp	r3, #6
 800b296:	f200 8128 	bhi.w	800b4ea <USBD_GetDescriptor+0x276>
 800b29a:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <USBD_GetDescriptor+0x2c>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b2bd 	.word	0x0800b2bd
 800b2a4:	0800b2d5 	.word	0x0800b2d5
 800b2a8:	0800b315 	.word	0x0800b315
 800b2ac:	0800b4eb 	.word	0x0800b4eb
 800b2b0:	0800b4eb 	.word	0x0800b4eb
 800b2b4:	0800b48b 	.word	0x0800b48b
 800b2b8:	0800b4b7 	.word	0x0800b4b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	7c12      	ldrb	r2, [r2, #16]
 800b2c8:	f107 0108 	add.w	r1, r7, #8
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4798      	blx	r3
 800b2d0:	60f8      	str	r0, [r7, #12]
      break;
 800b2d2:	e112      	b.n	800b4fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	7c1b      	ldrb	r3, [r3, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10d      	bne.n	800b2f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e4:	f107 0208 	add.w	r2, r7, #8
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2f6:	e100      	b.n	800b4fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	f107 0208 	add.w	r2, r7, #8
 800b304:	4610      	mov	r0, r2
 800b306:	4798      	blx	r3
 800b308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	2202      	movs	r2, #2
 800b310:	701a      	strb	r2, [r3, #0]
      break;
 800b312:	e0f2      	b.n	800b4fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	885b      	ldrh	r3, [r3, #2]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	f200 80ac 	bhi.w	800b478 <USBD_GetDescriptor+0x204>
 800b320:	a201      	add	r2, pc, #4	; (adr r2, 800b328 <USBD_GetDescriptor+0xb4>)
 800b322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b326:	bf00      	nop
 800b328:	0800b341 	.word	0x0800b341
 800b32c:	0800b375 	.word	0x0800b375
 800b330:	0800b3a9 	.word	0x0800b3a9
 800b334:	0800b3dd 	.word	0x0800b3dd
 800b338:	0800b411 	.word	0x0800b411
 800b33c:	0800b445 	.word	0x0800b445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00b      	beq.n	800b364 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	7c12      	ldrb	r2, [r2, #16]
 800b358:	f107 0108 	add.w	r1, r7, #8
 800b35c:	4610      	mov	r0, r2
 800b35e:	4798      	blx	r3
 800b360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b362:	e091      	b.n	800b488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fa94 	bl	800b894 <USBD_CtlError>
            err++;
 800b36c:	7afb      	ldrb	r3, [r7, #11]
 800b36e:	3301      	adds	r3, #1
 800b370:	72fb      	strb	r3, [r7, #11]
          break;
 800b372:	e089      	b.n	800b488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	7c12      	ldrb	r2, [r2, #16]
 800b38c:	f107 0108 	add.w	r1, r7, #8
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
 800b394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b396:	e077      	b.n	800b488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fa7a 	bl	800b894 <USBD_CtlError>
            err++;
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3a6:	e06f      	b.n	800b488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7c12      	ldrb	r2, [r2, #16]
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
 800b3c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ca:	e05d      	b.n	800b488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa60 	bl	800b894 <USBD_CtlError>
            err++;
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3da:	e055      	b.n	800b488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7c12      	ldrb	r2, [r2, #16]
 800b3f4:	f107 0108 	add.w	r1, r7, #8
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4798      	blx	r3
 800b3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3fe:	e043      	b.n	800b488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa46 	bl	800b894 <USBD_CtlError>
            err++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
          break;
 800b40e:	e03b      	b.n	800b488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00b      	beq.n	800b434 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	7c12      	ldrb	r2, [r2, #16]
 800b428:	f107 0108 	add.w	r1, r7, #8
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
 800b430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b432:	e029      	b.n	800b488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fa2c 	bl	800b894 <USBD_CtlError>
            err++;
 800b43c:	7afb      	ldrb	r3, [r7, #11]
 800b43e:	3301      	adds	r3, #1
 800b440:	72fb      	strb	r3, [r7, #11]
          break;
 800b442:	e021      	b.n	800b488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	7c12      	ldrb	r2, [r2, #16]
 800b45c:	f107 0108 	add.w	r1, r7, #8
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b466:	e00f      	b.n	800b488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa12 	bl	800b894 <USBD_CtlError>
            err++;
 800b470:	7afb      	ldrb	r3, [r7, #11]
 800b472:	3301      	adds	r3, #1
 800b474:	72fb      	strb	r3, [r7, #11]
          break;
 800b476:	e007      	b.n	800b488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa0a 	bl	800b894 <USBD_CtlError>
          err++;
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	3301      	adds	r3, #1
 800b484:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b486:	e038      	b.n	800b4fa <USBD_GetDescriptor+0x286>
 800b488:	e037      	b.n	800b4fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	7c1b      	ldrb	r3, [r3, #16]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d109      	bne.n	800b4a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49a:	f107 0208 	add.w	r2, r7, #8
 800b49e:	4610      	mov	r0, r2
 800b4a0:	4798      	blx	r3
 800b4a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4a4:	e029      	b.n	800b4fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f9f3 	bl	800b894 <USBD_CtlError>
        err++;
 800b4ae:	7afb      	ldrb	r3, [r7, #11]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b4b4:	e021      	b.n	800b4fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	7c1b      	ldrb	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10d      	bne.n	800b4da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c6:	f107 0208 	add.w	r2, r7, #8
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	4798      	blx	r3
 800b4ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	2207      	movs	r2, #7
 800b4d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4d8:	e00f      	b.n	800b4fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f9d9 	bl	800b894 <USBD_CtlError>
        err++;
 800b4e2:	7afb      	ldrb	r3, [r7, #11]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b4e8:	e007      	b.n	800b4fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9d1 	bl	800b894 <USBD_CtlError>
      err++;
 800b4f2:	7afb      	ldrb	r3, [r7, #11]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b4f8:	bf00      	nop
  }

  if (err != 0U)
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d11c      	bne.n	800b53a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b500:	893b      	ldrh	r3, [r7, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d011      	beq.n	800b52a <USBD_GetDescriptor+0x2b6>
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	88db      	ldrh	r3, [r3, #6]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00d      	beq.n	800b52a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	88da      	ldrh	r2, [r3, #6]
 800b512:	893b      	ldrh	r3, [r7, #8]
 800b514:	4293      	cmp	r3, r2
 800b516:	bf28      	it	cs
 800b518:	4613      	movcs	r3, r2
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b51e:	893b      	ldrh	r3, [r7, #8]
 800b520:	461a      	mov	r2, r3
 800b522:	68f9      	ldr	r1, [r7, #12]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fa1f 	bl	800b968 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	88db      	ldrh	r3, [r3, #6]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fa76 	bl	800ba24 <USBD_CtlSendStatus>
 800b538:	e000      	b.n	800b53c <USBD_GetDescriptor+0x2c8>
    return;
 800b53a:	bf00      	nop
    }
  }
}
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop

0800b544 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	889b      	ldrh	r3, [r3, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d130      	bne.n	800b5b8 <USBD_SetAddress+0x74>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	88db      	ldrh	r3, [r3, #6]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d12c      	bne.n	800b5b8 <USBD_SetAddress+0x74>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	885b      	ldrh	r3, [r3, #2]
 800b562:	2b7f      	cmp	r3, #127	; 0x7f
 800b564:	d828      	bhi.n	800b5b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b570:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d104      	bne.n	800b586 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f988 	bl	800b894 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b584:	e01c      	b.n	800b5c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	7bfa      	ldrb	r2, [r7, #15]
 800b58a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fe58 	bl	800c248 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fa43 	bl	800ba24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d004      	beq.n	800b5ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ac:	e008      	b.n	800b5c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b6:	e003      	b.n	800b5c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f96a 	bl	800b894 <USBD_CtlError>
  }
}
 800b5c0:	bf00      	nop
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	885b      	ldrh	r3, [r3, #2]
 800b5d6:	b2da      	uxtb	r2, r3
 800b5d8:	4b41      	ldr	r3, [pc, #260]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b5da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5dc:	4b40      	ldr	r3, [pc, #256]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d904      	bls.n	800b5ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f954 	bl	800b894 <USBD_CtlError>
 800b5ec:	e075      	b.n	800b6da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d002      	beq.n	800b5fe <USBD_SetConfig+0x36>
 800b5f8:	2b03      	cmp	r3, #3
 800b5fa:	d023      	beq.n	800b644 <USBD_SetConfig+0x7c>
 800b5fc:	e062      	b.n	800b6c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b5fe:	4b38      	ldr	r3, [pc, #224]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d01a      	beq.n	800b63c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b606:	4b36      	ldr	r3, [pc, #216]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2203      	movs	r2, #3
 800b614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b618:	4b31      	ldr	r3, [pc, #196]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff f9f3 	bl	800aa0a <USBD_SetClassConfig>
 800b624:	4603      	mov	r3, r0
 800b626:	2b02      	cmp	r3, #2
 800b628:	d104      	bne.n	800b634 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f931 	bl	800b894 <USBD_CtlError>
            return;
 800b632:	e052      	b.n	800b6da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f9f5 	bl	800ba24 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b63a:	e04e      	b.n	800b6da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f9f1 	bl	800ba24 <USBD_CtlSendStatus>
        break;
 800b642:	e04a      	b.n	800b6da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b644:	4b26      	ldr	r3, [pc, #152]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d112      	bne.n	800b672 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b654:	4b22      	ldr	r3, [pc, #136]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	461a      	mov	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b65e:	4b20      	ldr	r3, [pc, #128]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff f9ef 	bl	800aa48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f9da 	bl	800ba24 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b670:	e033      	b.n	800b6da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b672:	4b1b      	ldr	r3, [pc, #108]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d01d      	beq.n	800b6bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	b2db      	uxtb	r3, r3
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff f9dd 	bl	800aa48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b68e:	4b14      	ldr	r3, [pc, #80]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b698:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff f9b3 	bl	800aa0a <USBD_SetClassConfig>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d104      	bne.n	800b6b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f8f1 	bl	800b894 <USBD_CtlError>
            return;
 800b6b2:	e012      	b.n	800b6da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f9b5 	bl	800ba24 <USBD_CtlSendStatus>
        break;
 800b6ba:	e00e      	b.n	800b6da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f9b1 	bl	800ba24 <USBD_CtlSendStatus>
        break;
 800b6c2:	e00a      	b.n	800b6da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f8e4 	bl	800b894 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b6cc:	4b04      	ldr	r3, [pc, #16]	; (800b6e0 <USBD_SetConfig+0x118>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff f9b8 	bl	800aa48 <USBD_ClrClassConfig>
        break;
 800b6d8:	bf00      	nop
    }
  }
}
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	20000378 	.word	0x20000378

0800b6e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	88db      	ldrh	r3, [r3, #6]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d004      	beq.n	800b700 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f8cb 	bl	800b894 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6fe:	e021      	b.n	800b744 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b706:	2b01      	cmp	r3, #1
 800b708:	db17      	blt.n	800b73a <USBD_GetConfig+0x56>
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	dd02      	ble.n	800b714 <USBD_GetConfig+0x30>
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d00b      	beq.n	800b72a <USBD_GetConfig+0x46>
 800b712:	e012      	b.n	800b73a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3308      	adds	r3, #8
 800b71e:	2201      	movs	r2, #1
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f920 	bl	800b968 <USBD_CtlSendData>
        break;
 800b728:	e00c      	b.n	800b744 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3304      	adds	r3, #4
 800b72e:	2201      	movs	r2, #1
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f918 	bl	800b968 <USBD_CtlSendData>
        break;
 800b738:	e004      	b.n	800b744 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f8a9 	bl	800b894 <USBD_CtlError>
        break;
 800b742:	bf00      	nop
}
 800b744:	bf00      	nop
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b75c:	3b01      	subs	r3, #1
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d81e      	bhi.n	800b7a0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	88db      	ldrh	r3, [r3, #6]
 800b766:	2b02      	cmp	r3, #2
 800b768:	d004      	beq.n	800b774 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f891 	bl	800b894 <USBD_CtlError>
        break;
 800b772:	e01a      	b.n	800b7aa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b780:	2b00      	cmp	r3, #0
 800b782:	d005      	beq.n	800b790 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f043 0202 	orr.w	r2, r3, #2
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	330c      	adds	r3, #12
 800b794:	2202      	movs	r2, #2
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f8e5 	bl	800b968 <USBD_CtlSendData>
      break;
 800b79e:	e004      	b.n	800b7aa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f876 	bl	800b894 <USBD_CtlError>
      break;
 800b7a8:	bf00      	nop
  }
}
 800b7aa:	bf00      	nop
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	885b      	ldrh	r3, [r3, #2]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d106      	bne.n	800b7d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f929 	bl	800ba24 <USBD_CtlSendStatus>
  }
}
 800b7d2:	bf00      	nop
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b082      	sub	sp, #8
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d80b      	bhi.n	800b808 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	885b      	ldrh	r3, [r3, #2]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d10c      	bne.n	800b812 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f90f 	bl	800ba24 <USBD_CtlSendStatus>
      }
      break;
 800b806:	e004      	b.n	800b812 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f842 	bl	800b894 <USBD_CtlError>
      break;
 800b810:	e000      	b.n	800b814 <USBD_ClrFeature+0x3a>
      break;
 800b812:	bf00      	nop
  }
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	781a      	ldrb	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	785a      	ldrb	r2, [r3, #1]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	3302      	adds	r3, #2
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	3303      	adds	r3, #3
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	b29b      	uxth	r3, r3
 800b846:	021b      	lsls	r3, r3, #8
 800b848:	b29b      	uxth	r3, r3
 800b84a:	4413      	add	r3, r2
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	3304      	adds	r3, #4
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	b29a      	uxth	r2, r3
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	3305      	adds	r3, #5
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	b29b      	uxth	r3, r3
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	b29b      	uxth	r3, r3
 800b866:	4413      	add	r3, r2
 800b868:	b29a      	uxth	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	3306      	adds	r3, #6
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	b29a      	uxth	r2, r3
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	3307      	adds	r3, #7
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	021b      	lsls	r3, r3, #8
 800b880:	b29b      	uxth	r3, r3
 800b882:	4413      	add	r3, r2
 800b884:	b29a      	uxth	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	80da      	strh	r2, [r3, #6]

}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	bc80      	pop	{r7}
 800b892:	4770      	bx	lr

0800b894 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b89e:	2180      	movs	r1, #128	; 0x80
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fc67 	bl	800c174 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fc63 	bl	800c174 <USBD_LL_StallEP>
}
 800b8ae:	bf00      	nop
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b086      	sub	sp, #24
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	60f8      	str	r0, [r7, #12]
 800b8be:	60b9      	str	r1, [r7, #8]
 800b8c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d032      	beq.n	800b932 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f000 f834 	bl	800b93a <USBD_GetLen>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	75fa      	strb	r2, [r7, #23]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	7812      	ldrb	r2, [r2, #0]
 800b8f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	75fa      	strb	r2, [r7, #23]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	2203      	movs	r2, #3
 800b900:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b902:	e012      	b.n	800b92a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	60fa      	str	r2, [r7, #12]
 800b90a:	7dfa      	ldrb	r2, [r7, #23]
 800b90c:	1c51      	adds	r1, r2, #1
 800b90e:	75f9      	strb	r1, [r7, #23]
 800b910:	4611      	mov	r1, r2
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	440a      	add	r2, r1
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	75fa      	strb	r2, [r7, #23]
 800b920:	461a      	mov	r2, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	4413      	add	r3, r2
 800b926:	2200      	movs	r2, #0
 800b928:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1e8      	bne.n	800b904 <USBD_GetString+0x4e>
    }
  }
}
 800b932:	bf00      	nop
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b946:	e005      	b.n	800b954 <USBD_GetLen+0x1a>
  {
    len++;
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	3301      	adds	r3, #1
 800b94c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3301      	adds	r3, #1
 800b952:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1f5      	bne.n	800b948 <USBD_GetLen+0xe>
  }

  return len;
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	bc80      	pop	{r7}
 800b966:	4770      	bx	lr

0800b968 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	4613      	mov	r3, r2
 800b974:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2202      	movs	r2, #2
 800b97a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b984:	88fa      	ldrh	r2, [r7, #6]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b98a:	88fb      	ldrh	r3, [r7, #6]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	2100      	movs	r1, #0
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fc78 	bl	800c286 <USBD_LL_Transmit>

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9ae:	88fb      	ldrh	r3, [r7, #6]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 fc66 	bl	800c286 <USBD_LL_Transmit>

  return USBD_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2203      	movs	r2, #3
 800b9d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9da:	88fa      	ldrh	r2, [r7, #6]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b9e2:	88fa      	ldrh	r2, [r7, #6]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9ea:	88fb      	ldrh	r3, [r7, #6]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 fc6b 	bl	800c2cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba0e:	88fb      	ldrh	r3, [r7, #6]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	2100      	movs	r1, #0
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 fc59 	bl	800c2cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2204      	movs	r2, #4
 800ba30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba34:	2300      	movs	r3, #0
 800ba36:	2200      	movs	r2, #0
 800ba38:	2100      	movs	r1, #0
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fc23 	bl	800c286 <USBD_LL_Transmit>

  return USBD_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b082      	sub	sp, #8
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2205      	movs	r2, #5
 800ba56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2100      	movs	r1, #0
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fc33 	bl	800c2cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba74:	2200      	movs	r2, #0
 800ba76:	4912      	ldr	r1, [pc, #72]	; (800bac0 <MX_USB_DEVICE_Init+0x50>)
 800ba78:	4812      	ldr	r0, [pc, #72]	; (800bac4 <MX_USB_DEVICE_Init+0x54>)
 800ba7a:	f7fe ff6c 	bl	800a956 <USBD_Init>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba84:	f7f7 fd24 	bl	80034d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba88:	490f      	ldr	r1, [pc, #60]	; (800bac8 <MX_USB_DEVICE_Init+0x58>)
 800ba8a:	480e      	ldr	r0, [pc, #56]	; (800bac4 <MX_USB_DEVICE_Init+0x54>)
 800ba8c:	f7fe ff8e 	bl	800a9ac <USBD_RegisterClass>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba96:	f7f7 fd1b 	bl	80034d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba9a:	490c      	ldr	r1, [pc, #48]	; (800bacc <MX_USB_DEVICE_Init+0x5c>)
 800ba9c:	4809      	ldr	r0, [pc, #36]	; (800bac4 <MX_USB_DEVICE_Init+0x54>)
 800ba9e:	f7fe febf 	bl	800a820 <USBD_CDC_RegisterInterface>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800baa8:	f7f7 fd12 	bl	80034d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800baac:	4805      	ldr	r0, [pc, #20]	; (800bac4 <MX_USB_DEVICE_Init+0x54>)
 800baae:	f7fe ff96 	bl	800a9de <USBD_Start>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bab8:	f7f7 fd0a 	bl	80034d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800babc:	bf00      	nop
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20000134 	.word	0x20000134
 800bac4:	200006f0 	.word	0x200006f0
 800bac8:	20000020 	.word	0x20000020
 800bacc:	20000124 	.word	0x20000124

0800bad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bad4:	2200      	movs	r2, #0
 800bad6:	4905      	ldr	r1, [pc, #20]	; (800baec <CDC_Init_FS+0x1c>)
 800bad8:	4805      	ldr	r0, [pc, #20]	; (800baf0 <CDC_Init_FS+0x20>)
 800bada:	f7fe feb7 	bl	800a84c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bade:	4905      	ldr	r1, [pc, #20]	; (800baf4 <CDC_Init_FS+0x24>)
 800bae0:	4803      	ldr	r0, [pc, #12]	; (800baf0 <CDC_Init_FS+0x20>)
 800bae2:	f7fe fecc 	bl	800a87e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bae8:	4618      	mov	r0, r3
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000e08 	.word	0x20000e08
 800baf0:	200006f0 	.word	0x200006f0
 800baf4:	20000a20 	.word	0x20000a20

0800baf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bafc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bc80      	pop	{r7}
 800bb04:	4770      	bx	lr
	...

0800bb08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	6039      	str	r1, [r7, #0]
 800bb12:	71fb      	strb	r3, [r7, #7]
 800bb14:	4613      	mov	r3, r2
 800bb16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	2b23      	cmp	r3, #35	; 0x23
 800bb1c:	d84a      	bhi.n	800bbb4 <CDC_Control_FS+0xac>
 800bb1e:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <CDC_Control_FS+0x1c>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bbb5 	.word	0x0800bbb5
 800bb28:	0800bbb5 	.word	0x0800bbb5
 800bb2c:	0800bbb5 	.word	0x0800bbb5
 800bb30:	0800bbb5 	.word	0x0800bbb5
 800bb34:	0800bbb5 	.word	0x0800bbb5
 800bb38:	0800bbb5 	.word	0x0800bbb5
 800bb3c:	0800bbb5 	.word	0x0800bbb5
 800bb40:	0800bbb5 	.word	0x0800bbb5
 800bb44:	0800bbb5 	.word	0x0800bbb5
 800bb48:	0800bbb5 	.word	0x0800bbb5
 800bb4c:	0800bbb5 	.word	0x0800bbb5
 800bb50:	0800bbb5 	.word	0x0800bbb5
 800bb54:	0800bbb5 	.word	0x0800bbb5
 800bb58:	0800bbb5 	.word	0x0800bbb5
 800bb5c:	0800bbb5 	.word	0x0800bbb5
 800bb60:	0800bbb5 	.word	0x0800bbb5
 800bb64:	0800bbb5 	.word	0x0800bbb5
 800bb68:	0800bbb5 	.word	0x0800bbb5
 800bb6c:	0800bbb5 	.word	0x0800bbb5
 800bb70:	0800bbb5 	.word	0x0800bbb5
 800bb74:	0800bbb5 	.word	0x0800bbb5
 800bb78:	0800bbb5 	.word	0x0800bbb5
 800bb7c:	0800bbb5 	.word	0x0800bbb5
 800bb80:	0800bbb5 	.word	0x0800bbb5
 800bb84:	0800bbb5 	.word	0x0800bbb5
 800bb88:	0800bbb5 	.word	0x0800bbb5
 800bb8c:	0800bbb5 	.word	0x0800bbb5
 800bb90:	0800bbb5 	.word	0x0800bbb5
 800bb94:	0800bbb5 	.word	0x0800bbb5
 800bb98:	0800bbb5 	.word	0x0800bbb5
 800bb9c:	0800bbb5 	.word	0x0800bbb5
 800bba0:	0800bbb5 	.word	0x0800bbb5
 800bba4:	0800bbb5 	.word	0x0800bbb5
 800bba8:	0800bbb5 	.word	0x0800bbb5
 800bbac:	0800bbb5 	.word	0x0800bbb5
 800bbb0:	0800bbb5 	.word	0x0800bbb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbb4:	bf00      	nop
  }

  return (USBD_OK);
 800bbb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bc80      	pop	{r7}
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop

0800bbc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
//  return (USBD_OK);
	flag2=1;
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <CDC_Receive_FS+0x40>)
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	701a      	strb	r2, [r3, #0]
	memcpy(my_RxBuf,Buf,*Len);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	6879      	ldr	r1, [r7, #4]
 800bbdc:	480a      	ldr	r0, [pc, #40]	; (800bc08 <CDC_Receive_FS+0x44>)
 800bbde:	f000 fc29 	bl	800c434 <memcpy>
      my_RxLength=*Len;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a09      	ldr	r2, [pc, #36]	; (800bc0c <CDC_Receive_FS+0x48>)
 800bbe8:	6013      	str	r3, [r2, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	4808      	ldr	r0, [pc, #32]	; (800bc10 <CDC_Receive_FS+0x4c>)
 800bbee:	f7fe fe46 	bl	800a87e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbf2:	4807      	ldr	r0, [pc, #28]	; (800bc10 <CDC_Receive_FS+0x4c>)
 800bbf4:	f7fe fe85 	bl	800a902 <USBD_CDC_ReceivePacket>
	return 1;
 800bbf8:	2301      	movs	r3, #1
  /* USER CODE END 6 */
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	200009b4 	.word	0x200009b4
 800bc08:	200009bc 	.word	0x200009bc
 800bc0c:	200009b8 	.word	0x200009b8
 800bc10:	200006f0 	.word	0x200006f0

0800bc14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc24:	4b0d      	ldr	r3, [pc, #52]	; (800bc5c <CDC_Transmit_FS+0x48>)
 800bc26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e00b      	b.n	800bc52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc3a:	887b      	ldrh	r3, [r7, #2]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	6879      	ldr	r1, [r7, #4]
 800bc40:	4806      	ldr	r0, [pc, #24]	; (800bc5c <CDC_Transmit_FS+0x48>)
 800bc42:	f7fe fe03 	bl	800a84c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc46:	4805      	ldr	r0, [pc, #20]	; (800bc5c <CDC_Transmit_FS+0x48>)
 800bc48:	f7fe fe2c 	bl	800a8a4 <USBD_CDC_TransmitPacket>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	200006f0 	.word	0x200006f0

0800bc60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	6039      	str	r1, [r7, #0]
 800bc6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2212      	movs	r2, #18
 800bc70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc72:	4b03      	ldr	r3, [pc, #12]	; (800bc80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bc80      	pop	{r7}
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	20000150 	.word	0x20000150

0800bc84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	2204      	movs	r2, #4
 800bc94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc96:	4b03      	ldr	r3, [pc, #12]	; (800bca4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bc80      	pop	{r7}
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	20000164 	.word	0x20000164

0800bca8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	6039      	str	r1, [r7, #0]
 800bcb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	4907      	ldr	r1, [pc, #28]	; (800bcdc <USBD_FS_ProductStrDescriptor+0x34>)
 800bcbe:	4808      	ldr	r0, [pc, #32]	; (800bce0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcc0:	f7ff fdf9 	bl	800b8b6 <USBD_GetString>
 800bcc4:	e004      	b.n	800bcd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	4904      	ldr	r1, [pc, #16]	; (800bcdc <USBD_FS_ProductStrDescriptor+0x34>)
 800bcca:	4805      	ldr	r0, [pc, #20]	; (800bce0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bccc:	f7ff fdf3 	bl	800b8b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd0:	4b02      	ldr	r3, [pc, #8]	; (800bcdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	200011f0 	.word	0x200011f0
 800bce0:	0800eadc 	.word	0x0800eadc

0800bce4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	4904      	ldr	r1, [pc, #16]	; (800bd04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bcf4:	4804      	ldr	r0, [pc, #16]	; (800bd08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcf6:	f7ff fdde 	bl	800b8b6 <USBD_GetString>
  return USBD_StrDesc;
 800bcfa:	4b02      	ldr	r3, [pc, #8]	; (800bd04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	200011f0 	.word	0x200011f0
 800bd08:	0800eaf4 	.word	0x0800eaf4

0800bd0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	6039      	str	r1, [r7, #0]
 800bd16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	221a      	movs	r2, #26
 800bd1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd1e:	f000 f843 	bl	800bda8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd22:	4b02      	ldr	r3, [pc, #8]	; (800bd2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20000168 	.word	0x20000168

0800bd30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d105      	bne.n	800bd4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4907      	ldr	r1, [pc, #28]	; (800bd64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd46:	4808      	ldr	r0, [pc, #32]	; (800bd68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd48:	f7ff fdb5 	bl	800b8b6 <USBD_GetString>
 800bd4c:	e004      	b.n	800bd58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	4904      	ldr	r1, [pc, #16]	; (800bd64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd52:	4805      	ldr	r0, [pc, #20]	; (800bd68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd54:	f7ff fdaf 	bl	800b8b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd58:	4b02      	ldr	r3, [pc, #8]	; (800bd64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200011f0 	.word	0x200011f0
 800bd68:	0800eb08 	.word	0x0800eb08

0800bd6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d105      	bne.n	800bd8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4907      	ldr	r1, [pc, #28]	; (800bda0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd82:	4808      	ldr	r0, [pc, #32]	; (800bda4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd84:	f7ff fd97 	bl	800b8b6 <USBD_GetString>
 800bd88:	e004      	b.n	800bd94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4904      	ldr	r1, [pc, #16]	; (800bda0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd8e:	4805      	ldr	r0, [pc, #20]	; (800bda4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd90:	f7ff fd91 	bl	800b8b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd94:	4b02      	ldr	r3, [pc, #8]	; (800bda0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	200011f0 	.word	0x200011f0
 800bda4:	0800eb14 	.word	0x0800eb14

0800bda8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdae:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <Get_SerialNum+0x44>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdb4:	4b0e      	ldr	r3, [pc, #56]	; (800bdf0 <Get_SerialNum+0x48>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdba:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <Get_SerialNum+0x4c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d009      	beq.n	800bde2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdce:	2208      	movs	r2, #8
 800bdd0:	4909      	ldr	r1, [pc, #36]	; (800bdf8 <Get_SerialNum+0x50>)
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 f814 	bl	800be00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdd8:	2204      	movs	r2, #4
 800bdda:	4908      	ldr	r1, [pc, #32]	; (800bdfc <Get_SerialNum+0x54>)
 800bddc:	68b8      	ldr	r0, [r7, #8]
 800bdde:	f000 f80f 	bl	800be00 <IntToUnicode>
  }
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	1ffff7e8 	.word	0x1ffff7e8
 800bdf0:	1ffff7ec 	.word	0x1ffff7ec
 800bdf4:	1ffff7f0 	.word	0x1ffff7f0
 800bdf8:	2000016a 	.word	0x2000016a
 800bdfc:	2000017a 	.word	0x2000017a

0800be00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	4613      	mov	r3, r2
 800be0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]
 800be16:	e027      	b.n	800be68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	0f1b      	lsrs	r3, r3, #28
 800be1c:	2b09      	cmp	r3, #9
 800be1e:	d80b      	bhi.n	800be38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	0f1b      	lsrs	r3, r3, #28
 800be24:	b2da      	uxtb	r2, r3
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	4619      	mov	r1, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	440b      	add	r3, r1
 800be30:	3230      	adds	r2, #48	; 0x30
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	e00a      	b.n	800be4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	0f1b      	lsrs	r3, r3, #28
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	4619      	mov	r1, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	440b      	add	r3, r1
 800be48:	3237      	adds	r2, #55	; 0x37
 800be4a:	b2d2      	uxtb	r2, r2
 800be4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	3301      	adds	r3, #1
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	4413      	add	r3, r2
 800be5e:	2200      	movs	r2, #0
 800be60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	3301      	adds	r3, #1
 800be66:	75fb      	strb	r3, [r7, #23]
 800be68:	7dfa      	ldrb	r2, [r7, #23]
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3d3      	bcc.n	800be18 <IntToUnicode+0x18>
  }
}
 800be70:	bf00      	nop
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	bc80      	pop	{r7}
 800be78:	4770      	bx	lr
	...

0800be7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a0d      	ldr	r2, [pc, #52]	; (800bec0 <HAL_PCD_MspInit+0x44>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d113      	bne.n	800beb6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800be8e:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <HAL_PCD_MspInit+0x48>)
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <HAL_PCD_MspInit+0x48>)
 800be94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800be98:	61d3      	str	r3, [r2, #28]
 800be9a:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <HAL_PCD_MspInit+0x48>)
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bea6:	2200      	movs	r2, #0
 800bea8:	2100      	movs	r1, #0
 800beaa:	2014      	movs	r0, #20
 800beac:	f7f7 fe67 	bl	8003b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800beb0:	2014      	movs	r0, #20
 800beb2:	f7f7 fe80 	bl	8003bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800beb6:	bf00      	nop
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	40005c00 	.word	0x40005c00
 800bec4:	40021000 	.word	0x40021000

0800bec8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bedc:	4619      	mov	r1, r3
 800bede:	4610      	mov	r0, r2
 800bee0:	f7fe fdc5 	bl	800aa6e <USBD_LL_SetupStage>
}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800befe:	78fa      	ldrb	r2, [r7, #3]
 800bf00:	6879      	ldr	r1, [r7, #4]
 800bf02:	4613      	mov	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4413      	add	r3, r2
 800bf08:	00db      	lsls	r3, r3, #3
 800bf0a:	440b      	add	r3, r1
 800bf0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	78fb      	ldrb	r3, [r7, #3]
 800bf14:	4619      	mov	r1, r3
 800bf16:	f7fe fdf5 	bl	800ab04 <USBD_LL_DataOutStage>
}
 800bf1a:	bf00      	nop
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bf34:	78fa      	ldrb	r2, [r7, #3]
 800bf36:	6879      	ldr	r1, [r7, #4]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	440b      	add	r3, r1
 800bf42:	333c      	adds	r3, #60	; 0x3c
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	78fb      	ldrb	r3, [r7, #3]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f7fe fe4c 	bl	800abe6 <USBD_LL_DataInStage>
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b082      	sub	sp, #8
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe ff5c 	bl	800ae22 <USBD_LL_SOF>
}
 800bf6a:	bf00      	nop
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d001      	beq.n	800bf8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bf86:	f7f7 faa3 	bl	80034d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf90:	7bfa      	ldrb	r2, [r7, #15]
 800bf92:	4611      	mov	r1, r2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fe ff0c 	bl	800adb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fe fec5 	bl	800ad30 <USBD_LL_Reset>
}
 800bfa6:	bf00      	nop
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
	...

0800bfb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe ff06 	bl	800add0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d005      	beq.n	800bfd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfcc:	4b04      	ldr	r3, [pc, #16]	; (800bfe0 <HAL_PCD_SuspendCallback+0x30>)
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	4a03      	ldr	r2, [pc, #12]	; (800bfe0 <HAL_PCD_SuspendCallback+0x30>)
 800bfd2:	f043 0306 	orr.w	r3, r3, #6
 800bfd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	e000ed00 	.word	0xe000ed00

0800bfe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe ff00 	bl	800adf8 <USBD_LL_Resume>
}
 800bff8:	bf00      	nop
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c008:	4a28      	ldr	r2, [pc, #160]	; (800c0ac <USBD_LL_Init+0xac>)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a26      	ldr	r2, [pc, #152]	; (800c0ac <USBD_LL_Init+0xac>)
 800c014:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c018:	4b24      	ldr	r3, [pc, #144]	; (800c0ac <USBD_LL_Init+0xac>)
 800c01a:	4a25      	ldr	r2, [pc, #148]	; (800c0b0 <USBD_LL_Init+0xb0>)
 800c01c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c01e:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <USBD_LL_Init+0xac>)
 800c020:	2208      	movs	r2, #8
 800c022:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c024:	4b21      	ldr	r3, [pc, #132]	; (800c0ac <USBD_LL_Init+0xac>)
 800c026:	2202      	movs	r2, #2
 800c028:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c02a:	4b20      	ldr	r3, [pc, #128]	; (800c0ac <USBD_LL_Init+0xac>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c030:	4b1e      	ldr	r3, [pc, #120]	; (800c0ac <USBD_LL_Init+0xac>)
 800c032:	2200      	movs	r2, #0
 800c034:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c036:	4b1d      	ldr	r3, [pc, #116]	; (800c0ac <USBD_LL_Init+0xac>)
 800c038:	2200      	movs	r2, #0
 800c03a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c03c:	481b      	ldr	r0, [pc, #108]	; (800c0ac <USBD_LL_Init+0xac>)
 800c03e:	f7f9 f81b 	bl	8005078 <HAL_PCD_Init>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c048:	f7f7 fa42 	bl	80034d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c052:	2318      	movs	r3, #24
 800c054:	2200      	movs	r2, #0
 800c056:	2100      	movs	r1, #0
 800c058:	f7fa fb4f 	bl	80066fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c062:	2358      	movs	r3, #88	; 0x58
 800c064:	2200      	movs	r2, #0
 800c066:	2180      	movs	r1, #128	; 0x80
 800c068:	f7fa fb47 	bl	80066fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c072:	23c0      	movs	r3, #192	; 0xc0
 800c074:	2200      	movs	r2, #0
 800c076:	2181      	movs	r1, #129	; 0x81
 800c078:	f7fa fb3f 	bl	80066fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c082:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c086:	2200      	movs	r2, #0
 800c088:	2101      	movs	r1, #1
 800c08a:	f7fa fb36 	bl	80066fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c094:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c098:	2200      	movs	r2, #0
 800c09a:	2182      	movs	r1, #130	; 0x82
 800c09c:	f7fa fb2d 	bl	80066fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	200013f0 	.word	0x200013f0
 800c0b0:	40005c00 	.word	0x40005c00

0800c0b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7f9 f8df 	bl	800528e <HAL_PCD_Start>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 f94e 	bl	800c378 <USBD_Get_USB_Status>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	4608      	mov	r0, r1
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	70fb      	strb	r3, [r7, #3]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70bb      	strb	r3, [r7, #2]
 800c100:	4613      	mov	r3, r2
 800c102:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c112:	78bb      	ldrb	r3, [r7, #2]
 800c114:	883a      	ldrh	r2, [r7, #0]
 800c116:	78f9      	ldrb	r1, [r7, #3]
 800c118:	f7f9 fa59 	bl	80055ce <HAL_PCD_EP_Open>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c120:	7bfb      	ldrb	r3, [r7, #15]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f928 	bl	800c378 <USBD_Get_USB_Status>
 800c128:	4603      	mov	r3, r0
 800c12a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b084      	sub	sp, #16
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	460b      	mov	r3, r1
 800c140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c150:	78fa      	ldrb	r2, [r7, #3]
 800c152:	4611      	mov	r1, r2
 800c154:	4618      	mov	r0, r3
 800c156:	f7f9 faa0 	bl	800569a <HAL_PCD_EP_Close>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	4618      	mov	r0, r3
 800c162:	f000 f909 	bl	800c378 <USBD_Get_USB_Status>
 800c166:	4603      	mov	r3, r0
 800c168:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c18e:	78fa      	ldrb	r2, [r7, #3]
 800c190:	4611      	mov	r1, r2
 800c192:	4618      	mov	r0, r3
 800c194:	f7f9 fb60 	bl	8005858 <HAL_PCD_EP_SetStall>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 f8ea 	bl	800c378 <USBD_Get_USB_Status>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1cc:	78fa      	ldrb	r2, [r7, #3]
 800c1ce:	4611      	mov	r1, r2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7f9 fba1 	bl	8005918 <HAL_PCD_EP_ClrStall>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 f8cb 	bl	800c378 <USBD_Get_USB_Status>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c202:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	da0c      	bge.n	800c226 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c212:	68f9      	ldr	r1, [r7, #12]
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	4613      	mov	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	440b      	add	r3, r1
 800c220:	3302      	adds	r3, #2
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	e00b      	b.n	800c23e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c226:	78fb      	ldrb	r3, [r7, #3]
 800c228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c22c:	68f9      	ldr	r1, [r7, #12]
 800c22e:	4613      	mov	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	440b      	add	r3, r1
 800c238:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c23c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	bc80      	pop	{r7}
 800c246:	4770      	bx	lr

0800c248 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c262:	78fa      	ldrb	r2, [r7, #3]
 800c264:	4611      	mov	r1, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f7f9 f98c 	bl	8005584 <HAL_PCD_SetAddress>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f880 	bl	800c378 <USBD_Get_USB_Status>
 800c278:	4603      	mov	r3, r0
 800c27a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b086      	sub	sp, #24
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	461a      	mov	r2, r3
 800c292:	460b      	mov	r3, r1
 800c294:	72fb      	strb	r3, [r7, #11]
 800c296:	4613      	mov	r3, r2
 800c298:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2a8:	893b      	ldrh	r3, [r7, #8]
 800c2aa:	7af9      	ldrb	r1, [r7, #11]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	f7f9 fa90 	bl	80057d2 <HAL_PCD_EP_Transmit>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 f85d 	bl	800c378 <USBD_Get_USB_Status>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800c2c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	607a      	str	r2, [r7, #4]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	460b      	mov	r3, r1
 800c2da:	72fb      	strb	r3, [r7, #11]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2ee:	893b      	ldrh	r3, [r7, #8]
 800c2f0:	7af9      	ldrb	r1, [r7, #11]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	f7f9 fa19 	bl	800572a <HAL_PCD_EP_Receive>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 f83a 	bl	800c378 <USBD_Get_USB_Status>
 800c304:	4603      	mov	r3, r0
 800c306:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800c308:	7dbb      	ldrb	r3, [r7, #22]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	460b      	mov	r3, r1
 800c31c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c324:	78fa      	ldrb	r2, [r7, #3]
 800c326:	4611      	mov	r1, r2
 800c328:	4618      	mov	r0, r3
 800c32a:	f7f9 fa3b 	bl	80057a4 <HAL_PCD_EP_GetRxCount>
 800c32e:	4603      	mov	r3, r0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <USBD_static_malloc+0x14>)
}
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	bc80      	pop	{r7}
 800c34a:	4770      	bx	lr
 800c34c:	2000037c 	.word	0x2000037c

0800c350 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]

}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bc80      	pop	{r7}
 800c360:	4770      	bx	lr

0800c362 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c362:	b480      	push	{r7}
 800c364:	b083      	sub	sp, #12
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	460b      	mov	r3, r1
 800c36c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c36e:	bf00      	nop
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	bc80      	pop	{r7}
 800c376:	4770      	bx	lr

0800c378 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d817      	bhi.n	800c3bc <USBD_Get_USB_Status+0x44>
 800c38c:	a201      	add	r2, pc, #4	; (adr r2, 800c394 <USBD_Get_USB_Status+0x1c>)
 800c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c392:	bf00      	nop
 800c394:	0800c3a5 	.word	0x0800c3a5
 800c398:	0800c3ab 	.word	0x0800c3ab
 800c39c:	0800c3b1 	.word	0x0800c3b1
 800c3a0:	0800c3b7 	.word	0x0800c3b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3a8:	e00b      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ae:	e008      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b4:	e005      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ba:	e002      	b.n	800c3c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c3bc:	2302      	movs	r3, #2
 800c3be:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c0:	bf00      	nop
  }
  return usb_status;
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bc80      	pop	{r7}
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop

0800c3d0 <__errno>:
 800c3d0:	4b01      	ldr	r3, [pc, #4]	; (800c3d8 <__errno+0x8>)
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	20000184 	.word	0x20000184

0800c3dc <__libc_init_array>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	2500      	movs	r5, #0
 800c3e0:	4e0c      	ldr	r6, [pc, #48]	; (800c414 <__libc_init_array+0x38>)
 800c3e2:	4c0d      	ldr	r4, [pc, #52]	; (800c418 <__libc_init_array+0x3c>)
 800c3e4:	1ba4      	subs	r4, r4, r6
 800c3e6:	10a4      	asrs	r4, r4, #2
 800c3e8:	42a5      	cmp	r5, r4
 800c3ea:	d109      	bne.n	800c400 <__libc_init_array+0x24>
 800c3ec:	f002 fb46 	bl	800ea7c <_init>
 800c3f0:	2500      	movs	r5, #0
 800c3f2:	4e0a      	ldr	r6, [pc, #40]	; (800c41c <__libc_init_array+0x40>)
 800c3f4:	4c0a      	ldr	r4, [pc, #40]	; (800c420 <__libc_init_array+0x44>)
 800c3f6:	1ba4      	subs	r4, r4, r6
 800c3f8:	10a4      	asrs	r4, r4, #2
 800c3fa:	42a5      	cmp	r5, r4
 800c3fc:	d105      	bne.n	800c40a <__libc_init_array+0x2e>
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}
 800c400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c404:	4798      	blx	r3
 800c406:	3501      	adds	r5, #1
 800c408:	e7ee      	b.n	800c3e8 <__libc_init_array+0xc>
 800c40a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c40e:	4798      	blx	r3
 800c410:	3501      	adds	r5, #1
 800c412:	e7f2      	b.n	800c3fa <__libc_init_array+0x1e>
 800c414:	0800ee10 	.word	0x0800ee10
 800c418:	0800ee10 	.word	0x0800ee10
 800c41c:	0800ee10 	.word	0x0800ee10
 800c420:	0800ee14 	.word	0x0800ee14

0800c424 <malloc>:
 800c424:	4b02      	ldr	r3, [pc, #8]	; (800c430 <malloc+0xc>)
 800c426:	4601      	mov	r1, r0
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	f000 b863 	b.w	800c4f4 <_malloc_r>
 800c42e:	bf00      	nop
 800c430:	20000184 	.word	0x20000184

0800c434 <memcpy>:
 800c434:	b510      	push	{r4, lr}
 800c436:	1e43      	subs	r3, r0, #1
 800c438:	440a      	add	r2, r1
 800c43a:	4291      	cmp	r1, r2
 800c43c:	d100      	bne.n	800c440 <memcpy+0xc>
 800c43e:	bd10      	pop	{r4, pc}
 800c440:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c444:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c448:	e7f7      	b.n	800c43a <memcpy+0x6>

0800c44a <memset>:
 800c44a:	4603      	mov	r3, r0
 800c44c:	4402      	add	r2, r0
 800c44e:	4293      	cmp	r3, r2
 800c450:	d100      	bne.n	800c454 <memset+0xa>
 800c452:	4770      	bx	lr
 800c454:	f803 1b01 	strb.w	r1, [r3], #1
 800c458:	e7f9      	b.n	800c44e <memset+0x4>
	...

0800c45c <_free_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4605      	mov	r5, r0
 800c460:	2900      	cmp	r1, #0
 800c462:	d043      	beq.n	800c4ec <_free_r+0x90>
 800c464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c468:	1f0c      	subs	r4, r1, #4
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bfb8      	it	lt
 800c46e:	18e4      	addlt	r4, r4, r3
 800c470:	f001 fc3c 	bl	800dcec <__malloc_lock>
 800c474:	4a1e      	ldr	r2, [pc, #120]	; (800c4f0 <_free_r+0x94>)
 800c476:	6813      	ldr	r3, [r2, #0]
 800c478:	4610      	mov	r0, r2
 800c47a:	b933      	cbnz	r3, 800c48a <_free_r+0x2e>
 800c47c:	6063      	str	r3, [r4, #4]
 800c47e:	6014      	str	r4, [r2, #0]
 800c480:	4628      	mov	r0, r5
 800c482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c486:	f001 bc32 	b.w	800dcee <__malloc_unlock>
 800c48a:	42a3      	cmp	r3, r4
 800c48c:	d90b      	bls.n	800c4a6 <_free_r+0x4a>
 800c48e:	6821      	ldr	r1, [r4, #0]
 800c490:	1862      	adds	r2, r4, r1
 800c492:	4293      	cmp	r3, r2
 800c494:	bf01      	itttt	eq
 800c496:	681a      	ldreq	r2, [r3, #0]
 800c498:	685b      	ldreq	r3, [r3, #4]
 800c49a:	1852      	addeq	r2, r2, r1
 800c49c:	6022      	streq	r2, [r4, #0]
 800c49e:	6063      	str	r3, [r4, #4]
 800c4a0:	6004      	str	r4, [r0, #0]
 800c4a2:	e7ed      	b.n	800c480 <_free_r+0x24>
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	b10a      	cbz	r2, 800c4ae <_free_r+0x52>
 800c4aa:	42a2      	cmp	r2, r4
 800c4ac:	d9fa      	bls.n	800c4a4 <_free_r+0x48>
 800c4ae:	6819      	ldr	r1, [r3, #0]
 800c4b0:	1858      	adds	r0, r3, r1
 800c4b2:	42a0      	cmp	r0, r4
 800c4b4:	d10b      	bne.n	800c4ce <_free_r+0x72>
 800c4b6:	6820      	ldr	r0, [r4, #0]
 800c4b8:	4401      	add	r1, r0
 800c4ba:	1858      	adds	r0, r3, r1
 800c4bc:	4282      	cmp	r2, r0
 800c4be:	6019      	str	r1, [r3, #0]
 800c4c0:	d1de      	bne.n	800c480 <_free_r+0x24>
 800c4c2:	6810      	ldr	r0, [r2, #0]
 800c4c4:	6852      	ldr	r2, [r2, #4]
 800c4c6:	4401      	add	r1, r0
 800c4c8:	6019      	str	r1, [r3, #0]
 800c4ca:	605a      	str	r2, [r3, #4]
 800c4cc:	e7d8      	b.n	800c480 <_free_r+0x24>
 800c4ce:	d902      	bls.n	800c4d6 <_free_r+0x7a>
 800c4d0:	230c      	movs	r3, #12
 800c4d2:	602b      	str	r3, [r5, #0]
 800c4d4:	e7d4      	b.n	800c480 <_free_r+0x24>
 800c4d6:	6820      	ldr	r0, [r4, #0]
 800c4d8:	1821      	adds	r1, r4, r0
 800c4da:	428a      	cmp	r2, r1
 800c4dc:	bf01      	itttt	eq
 800c4de:	6811      	ldreq	r1, [r2, #0]
 800c4e0:	6852      	ldreq	r2, [r2, #4]
 800c4e2:	1809      	addeq	r1, r1, r0
 800c4e4:	6021      	streq	r1, [r4, #0]
 800c4e6:	6062      	str	r2, [r4, #4]
 800c4e8:	605c      	str	r4, [r3, #4]
 800c4ea:	e7c9      	b.n	800c480 <_free_r+0x24>
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}
 800c4ee:	bf00      	nop
 800c4f0:	2000059c 	.word	0x2000059c

0800c4f4 <_malloc_r>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	1ccd      	adds	r5, r1, #3
 800c4f8:	f025 0503 	bic.w	r5, r5, #3
 800c4fc:	3508      	adds	r5, #8
 800c4fe:	2d0c      	cmp	r5, #12
 800c500:	bf38      	it	cc
 800c502:	250c      	movcc	r5, #12
 800c504:	2d00      	cmp	r5, #0
 800c506:	4606      	mov	r6, r0
 800c508:	db01      	blt.n	800c50e <_malloc_r+0x1a>
 800c50a:	42a9      	cmp	r1, r5
 800c50c:	d903      	bls.n	800c516 <_malloc_r+0x22>
 800c50e:	230c      	movs	r3, #12
 800c510:	6033      	str	r3, [r6, #0]
 800c512:	2000      	movs	r0, #0
 800c514:	bd70      	pop	{r4, r5, r6, pc}
 800c516:	f001 fbe9 	bl	800dcec <__malloc_lock>
 800c51a:	4a21      	ldr	r2, [pc, #132]	; (800c5a0 <_malloc_r+0xac>)
 800c51c:	6814      	ldr	r4, [r2, #0]
 800c51e:	4621      	mov	r1, r4
 800c520:	b991      	cbnz	r1, 800c548 <_malloc_r+0x54>
 800c522:	4c20      	ldr	r4, [pc, #128]	; (800c5a4 <_malloc_r+0xb0>)
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	b91b      	cbnz	r3, 800c530 <_malloc_r+0x3c>
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 fca5 	bl	800ce78 <_sbrk_r>
 800c52e:	6020      	str	r0, [r4, #0]
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f000 fca0 	bl	800ce78 <_sbrk_r>
 800c538:	1c43      	adds	r3, r0, #1
 800c53a:	d124      	bne.n	800c586 <_malloc_r+0x92>
 800c53c:	230c      	movs	r3, #12
 800c53e:	4630      	mov	r0, r6
 800c540:	6033      	str	r3, [r6, #0]
 800c542:	f001 fbd4 	bl	800dcee <__malloc_unlock>
 800c546:	e7e4      	b.n	800c512 <_malloc_r+0x1e>
 800c548:	680b      	ldr	r3, [r1, #0]
 800c54a:	1b5b      	subs	r3, r3, r5
 800c54c:	d418      	bmi.n	800c580 <_malloc_r+0x8c>
 800c54e:	2b0b      	cmp	r3, #11
 800c550:	d90f      	bls.n	800c572 <_malloc_r+0x7e>
 800c552:	600b      	str	r3, [r1, #0]
 800c554:	18cc      	adds	r4, r1, r3
 800c556:	50cd      	str	r5, [r1, r3]
 800c558:	4630      	mov	r0, r6
 800c55a:	f001 fbc8 	bl	800dcee <__malloc_unlock>
 800c55e:	f104 000b 	add.w	r0, r4, #11
 800c562:	1d23      	adds	r3, r4, #4
 800c564:	f020 0007 	bic.w	r0, r0, #7
 800c568:	1ac3      	subs	r3, r0, r3
 800c56a:	d0d3      	beq.n	800c514 <_malloc_r+0x20>
 800c56c:	425a      	negs	r2, r3
 800c56e:	50e2      	str	r2, [r4, r3]
 800c570:	e7d0      	b.n	800c514 <_malloc_r+0x20>
 800c572:	684b      	ldr	r3, [r1, #4]
 800c574:	428c      	cmp	r4, r1
 800c576:	bf16      	itet	ne
 800c578:	6063      	strne	r3, [r4, #4]
 800c57a:	6013      	streq	r3, [r2, #0]
 800c57c:	460c      	movne	r4, r1
 800c57e:	e7eb      	b.n	800c558 <_malloc_r+0x64>
 800c580:	460c      	mov	r4, r1
 800c582:	6849      	ldr	r1, [r1, #4]
 800c584:	e7cc      	b.n	800c520 <_malloc_r+0x2c>
 800c586:	1cc4      	adds	r4, r0, #3
 800c588:	f024 0403 	bic.w	r4, r4, #3
 800c58c:	42a0      	cmp	r0, r4
 800c58e:	d005      	beq.n	800c59c <_malloc_r+0xa8>
 800c590:	1a21      	subs	r1, r4, r0
 800c592:	4630      	mov	r0, r6
 800c594:	f000 fc70 	bl	800ce78 <_sbrk_r>
 800c598:	3001      	adds	r0, #1
 800c59a:	d0cf      	beq.n	800c53c <_malloc_r+0x48>
 800c59c:	6025      	str	r5, [r4, #0]
 800c59e:	e7db      	b.n	800c558 <_malloc_r+0x64>
 800c5a0:	2000059c 	.word	0x2000059c
 800c5a4:	200005a0 	.word	0x200005a0

0800c5a8 <__cvt>:
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ae:	461e      	mov	r6, r3
 800c5b0:	bfbb      	ittet	lt
 800c5b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c5b6:	461e      	movlt	r6, r3
 800c5b8:	2300      	movge	r3, #0
 800c5ba:	232d      	movlt	r3, #45	; 0x2d
 800c5bc:	b088      	sub	sp, #32
 800c5be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c5c0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800c5c4:	f027 0720 	bic.w	r7, r7, #32
 800c5c8:	2f46      	cmp	r7, #70	; 0x46
 800c5ca:	4614      	mov	r4, r2
 800c5cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c5ce:	700b      	strb	r3, [r1, #0]
 800c5d0:	d004      	beq.n	800c5dc <__cvt+0x34>
 800c5d2:	2f45      	cmp	r7, #69	; 0x45
 800c5d4:	d100      	bne.n	800c5d8 <__cvt+0x30>
 800c5d6:	3501      	adds	r5, #1
 800c5d8:	2302      	movs	r3, #2
 800c5da:	e000      	b.n	800c5de <__cvt+0x36>
 800c5dc:	2303      	movs	r3, #3
 800c5de:	aa07      	add	r2, sp, #28
 800c5e0:	9204      	str	r2, [sp, #16]
 800c5e2:	aa06      	add	r2, sp, #24
 800c5e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c5e8:	e9cd 3500 	strd	r3, r5, [sp]
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	4633      	mov	r3, r6
 800c5f0:	f000 fce2 	bl	800cfb8 <_dtoa_r>
 800c5f4:	2f47      	cmp	r7, #71	; 0x47
 800c5f6:	4680      	mov	r8, r0
 800c5f8:	d102      	bne.n	800c600 <__cvt+0x58>
 800c5fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5fc:	07db      	lsls	r3, r3, #31
 800c5fe:	d526      	bpl.n	800c64e <__cvt+0xa6>
 800c600:	2f46      	cmp	r7, #70	; 0x46
 800c602:	eb08 0905 	add.w	r9, r8, r5
 800c606:	d111      	bne.n	800c62c <__cvt+0x84>
 800c608:	f898 3000 	ldrb.w	r3, [r8]
 800c60c:	2b30      	cmp	r3, #48	; 0x30
 800c60e:	d10a      	bne.n	800c626 <__cvt+0x7e>
 800c610:	2200      	movs	r2, #0
 800c612:	2300      	movs	r3, #0
 800c614:	4620      	mov	r0, r4
 800c616:	4631      	mov	r1, r6
 800c618:	f7f4 fa32 	bl	8000a80 <__aeabi_dcmpeq>
 800c61c:	b918      	cbnz	r0, 800c626 <__cvt+0x7e>
 800c61e:	f1c5 0501 	rsb	r5, r5, #1
 800c622:	f8ca 5000 	str.w	r5, [sl]
 800c626:	f8da 3000 	ldr.w	r3, [sl]
 800c62a:	4499      	add	r9, r3
 800c62c:	2200      	movs	r2, #0
 800c62e:	2300      	movs	r3, #0
 800c630:	4620      	mov	r0, r4
 800c632:	4631      	mov	r1, r6
 800c634:	f7f4 fa24 	bl	8000a80 <__aeabi_dcmpeq>
 800c638:	b938      	cbnz	r0, 800c64a <__cvt+0xa2>
 800c63a:	2230      	movs	r2, #48	; 0x30
 800c63c:	9b07      	ldr	r3, [sp, #28]
 800c63e:	454b      	cmp	r3, r9
 800c640:	d205      	bcs.n	800c64e <__cvt+0xa6>
 800c642:	1c59      	adds	r1, r3, #1
 800c644:	9107      	str	r1, [sp, #28]
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	e7f8      	b.n	800c63c <__cvt+0x94>
 800c64a:	f8cd 901c 	str.w	r9, [sp, #28]
 800c64e:	4640      	mov	r0, r8
 800c650:	9b07      	ldr	r3, [sp, #28]
 800c652:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c654:	eba3 0308 	sub.w	r3, r3, r8
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	b008      	add	sp, #32
 800c65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c660 <__exponent>:
 800c660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c662:	2900      	cmp	r1, #0
 800c664:	bfb4      	ite	lt
 800c666:	232d      	movlt	r3, #45	; 0x2d
 800c668:	232b      	movge	r3, #43	; 0x2b
 800c66a:	4604      	mov	r4, r0
 800c66c:	bfb8      	it	lt
 800c66e:	4249      	neglt	r1, r1
 800c670:	2909      	cmp	r1, #9
 800c672:	f804 2b02 	strb.w	r2, [r4], #2
 800c676:	7043      	strb	r3, [r0, #1]
 800c678:	dd21      	ble.n	800c6be <__exponent+0x5e>
 800c67a:	f10d 0307 	add.w	r3, sp, #7
 800c67e:	461f      	mov	r7, r3
 800c680:	260a      	movs	r6, #10
 800c682:	fb91 f5f6 	sdiv	r5, r1, r6
 800c686:	fb06 1115 	mls	r1, r6, r5, r1
 800c68a:	2d09      	cmp	r5, #9
 800c68c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800c690:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c694:	f103 32ff 	add.w	r2, r3, #4294967295
 800c698:	4629      	mov	r1, r5
 800c69a:	dc09      	bgt.n	800c6b0 <__exponent+0x50>
 800c69c:	3130      	adds	r1, #48	; 0x30
 800c69e:	3b02      	subs	r3, #2
 800c6a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c6a4:	42bb      	cmp	r3, r7
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	d304      	bcc.n	800c6b4 <__exponent+0x54>
 800c6aa:	1a10      	subs	r0, r2, r0
 800c6ac:	b003      	add	sp, #12
 800c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	e7e6      	b.n	800c682 <__exponent+0x22>
 800c6b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6b8:	f804 2b01 	strb.w	r2, [r4], #1
 800c6bc:	e7f2      	b.n	800c6a4 <__exponent+0x44>
 800c6be:	2330      	movs	r3, #48	; 0x30
 800c6c0:	4419      	add	r1, r3
 800c6c2:	7083      	strb	r3, [r0, #2]
 800c6c4:	1d02      	adds	r2, r0, #4
 800c6c6:	70c1      	strb	r1, [r0, #3]
 800c6c8:	e7ef      	b.n	800c6aa <__exponent+0x4a>
	...

0800c6cc <_printf_float>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	b091      	sub	sp, #68	; 0x44
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c6d6:	4693      	mov	fp, r2
 800c6d8:	461e      	mov	r6, r3
 800c6da:	4605      	mov	r5, r0
 800c6dc:	f001 faea 	bl	800dcb4 <_localeconv_r>
 800c6e0:	6803      	ldr	r3, [r0, #0]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e6:	f7f3 fd9f 	bl	8000228 <strlen>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	930e      	str	r3, [sp, #56]	; 0x38
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	900a      	str	r0, [sp, #40]	; 0x28
 800c6f2:	3307      	adds	r3, #7
 800c6f4:	f023 0307 	bic.w	r3, r3, #7
 800c6f8:	f103 0208 	add.w	r2, r3, #8
 800c6fc:	f894 8018 	ldrb.w	r8, [r4, #24]
 800c700:	f8d4 a000 	ldr.w	sl, [r4]
 800c704:	603a      	str	r2, [r7, #0]
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c70e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800c712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c716:	930b      	str	r3, [sp, #44]	; 0x2c
 800c718:	f04f 32ff 	mov.w	r2, #4294967295
 800c71c:	4ba6      	ldr	r3, [pc, #664]	; (800c9b8 <_printf_float+0x2ec>)
 800c71e:	4638      	mov	r0, r7
 800c720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c722:	f7f4 f9df 	bl	8000ae4 <__aeabi_dcmpun>
 800c726:	bb68      	cbnz	r0, 800c784 <_printf_float+0xb8>
 800c728:	f04f 32ff 	mov.w	r2, #4294967295
 800c72c:	4ba2      	ldr	r3, [pc, #648]	; (800c9b8 <_printf_float+0x2ec>)
 800c72e:	4638      	mov	r0, r7
 800c730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c732:	f7f4 f9b9 	bl	8000aa8 <__aeabi_dcmple>
 800c736:	bb28      	cbnz	r0, 800c784 <_printf_float+0xb8>
 800c738:	2200      	movs	r2, #0
 800c73a:	2300      	movs	r3, #0
 800c73c:	4638      	mov	r0, r7
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f4 f9a8 	bl	8000a94 <__aeabi_dcmplt>
 800c744:	b110      	cbz	r0, 800c74c <_printf_float+0x80>
 800c746:	232d      	movs	r3, #45	; 0x2d
 800c748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c74c:	4f9b      	ldr	r7, [pc, #620]	; (800c9bc <_printf_float+0x2f0>)
 800c74e:	4b9c      	ldr	r3, [pc, #624]	; (800c9c0 <_printf_float+0x2f4>)
 800c750:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c754:	bf98      	it	ls
 800c756:	461f      	movls	r7, r3
 800c758:	2303      	movs	r3, #3
 800c75a:	f04f 0900 	mov.w	r9, #0
 800c75e:	6123      	str	r3, [r4, #16]
 800c760:	f02a 0304 	bic.w	r3, sl, #4
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	9600      	str	r6, [sp, #0]
 800c768:	465b      	mov	r3, fp
 800c76a:	aa0f      	add	r2, sp, #60	; 0x3c
 800c76c:	4621      	mov	r1, r4
 800c76e:	4628      	mov	r0, r5
 800c770:	f000 f9e2 	bl	800cb38 <_printf_common>
 800c774:	3001      	adds	r0, #1
 800c776:	f040 8090 	bne.w	800c89a <_printf_float+0x1ce>
 800c77a:	f04f 30ff 	mov.w	r0, #4294967295
 800c77e:	b011      	add	sp, #68	; 0x44
 800c780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c784:	463a      	mov	r2, r7
 800c786:	464b      	mov	r3, r9
 800c788:	4638      	mov	r0, r7
 800c78a:	4649      	mov	r1, r9
 800c78c:	f7f4 f9aa 	bl	8000ae4 <__aeabi_dcmpun>
 800c790:	b110      	cbz	r0, 800c798 <_printf_float+0xcc>
 800c792:	4f8c      	ldr	r7, [pc, #560]	; (800c9c4 <_printf_float+0x2f8>)
 800c794:	4b8c      	ldr	r3, [pc, #560]	; (800c9c8 <_printf_float+0x2fc>)
 800c796:	e7db      	b.n	800c750 <_printf_float+0x84>
 800c798:	6863      	ldr	r3, [r4, #4]
 800c79a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800c79e:	1c59      	adds	r1, r3, #1
 800c7a0:	a80d      	add	r0, sp, #52	; 0x34
 800c7a2:	a90e      	add	r1, sp, #56	; 0x38
 800c7a4:	d140      	bne.n	800c828 <_printf_float+0x15c>
 800c7a6:	2306      	movs	r3, #6
 800c7a8:	6063      	str	r3, [r4, #4]
 800c7aa:	f04f 0c00 	mov.w	ip, #0
 800c7ae:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800c7b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800c7b6:	6863      	ldr	r3, [r4, #4]
 800c7b8:	6022      	str	r2, [r4, #0]
 800c7ba:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	463a      	mov	r2, r7
 800c7c2:	464b      	mov	r3, r9
 800c7c4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f7ff feed 	bl	800c5a8 <__cvt>
 800c7ce:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800c7d2:	2b47      	cmp	r3, #71	; 0x47
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	d109      	bne.n	800c7ec <_printf_float+0x120>
 800c7d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7da:	1cd8      	adds	r0, r3, #3
 800c7dc:	db02      	blt.n	800c7e4 <_printf_float+0x118>
 800c7de:	6862      	ldr	r2, [r4, #4]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	dd47      	ble.n	800c874 <_printf_float+0x1a8>
 800c7e4:	f1a8 0802 	sub.w	r8, r8, #2
 800c7e8:	fa5f f888 	uxtb.w	r8, r8
 800c7ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800c7f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c7f2:	d824      	bhi.n	800c83e <_printf_float+0x172>
 800c7f4:	3901      	subs	r1, #1
 800c7f6:	4642      	mov	r2, r8
 800c7f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7fc:	910d      	str	r1, [sp, #52]	; 0x34
 800c7fe:	f7ff ff2f 	bl	800c660 <__exponent>
 800c802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c804:	4681      	mov	r9, r0
 800c806:	1813      	adds	r3, r2, r0
 800c808:	2a01      	cmp	r2, #1
 800c80a:	6123      	str	r3, [r4, #16]
 800c80c:	dc02      	bgt.n	800c814 <_printf_float+0x148>
 800c80e:	6822      	ldr	r2, [r4, #0]
 800c810:	07d1      	lsls	r1, r2, #31
 800c812:	d501      	bpl.n	800c818 <_printf_float+0x14c>
 800c814:	3301      	adds	r3, #1
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d0a2      	beq.n	800c766 <_printf_float+0x9a>
 800c820:	232d      	movs	r3, #45	; 0x2d
 800c822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c826:	e79e      	b.n	800c766 <_printf_float+0x9a>
 800c828:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800c82c:	f000 816e 	beq.w	800cb0c <_printf_float+0x440>
 800c830:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c834:	d1b9      	bne.n	800c7aa <_printf_float+0xde>
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1b7      	bne.n	800c7aa <_printf_float+0xde>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e7b4      	b.n	800c7a8 <_printf_float+0xdc>
 800c83e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800c842:	d119      	bne.n	800c878 <_printf_float+0x1ac>
 800c844:	2900      	cmp	r1, #0
 800c846:	6863      	ldr	r3, [r4, #4]
 800c848:	dd0c      	ble.n	800c864 <_printf_float+0x198>
 800c84a:	6121      	str	r1, [r4, #16]
 800c84c:	b913      	cbnz	r3, 800c854 <_printf_float+0x188>
 800c84e:	6822      	ldr	r2, [r4, #0]
 800c850:	07d2      	lsls	r2, r2, #31
 800c852:	d502      	bpl.n	800c85a <_printf_float+0x18e>
 800c854:	3301      	adds	r3, #1
 800c856:	440b      	add	r3, r1
 800c858:	6123      	str	r3, [r4, #16]
 800c85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c85c:	f04f 0900 	mov.w	r9, #0
 800c860:	65a3      	str	r3, [r4, #88]	; 0x58
 800c862:	e7d9      	b.n	800c818 <_printf_float+0x14c>
 800c864:	b913      	cbnz	r3, 800c86c <_printf_float+0x1a0>
 800c866:	6822      	ldr	r2, [r4, #0]
 800c868:	07d0      	lsls	r0, r2, #31
 800c86a:	d501      	bpl.n	800c870 <_printf_float+0x1a4>
 800c86c:	3302      	adds	r3, #2
 800c86e:	e7f3      	b.n	800c858 <_printf_float+0x18c>
 800c870:	2301      	movs	r3, #1
 800c872:	e7f1      	b.n	800c858 <_printf_float+0x18c>
 800c874:	f04f 0867 	mov.w	r8, #103	; 0x67
 800c878:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800c87c:	4293      	cmp	r3, r2
 800c87e:	db05      	blt.n	800c88c <_printf_float+0x1c0>
 800c880:	6822      	ldr	r2, [r4, #0]
 800c882:	6123      	str	r3, [r4, #16]
 800c884:	07d1      	lsls	r1, r2, #31
 800c886:	d5e8      	bpl.n	800c85a <_printf_float+0x18e>
 800c888:	3301      	adds	r3, #1
 800c88a:	e7e5      	b.n	800c858 <_printf_float+0x18c>
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bfcc      	ite	gt
 800c890:	2301      	movgt	r3, #1
 800c892:	f1c3 0302 	rsble	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	e7de      	b.n	800c858 <_printf_float+0x18c>
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	055a      	lsls	r2, r3, #21
 800c89e:	d407      	bmi.n	800c8b0 <_printf_float+0x1e4>
 800c8a0:	6923      	ldr	r3, [r4, #16]
 800c8a2:	463a      	mov	r2, r7
 800c8a4:	4659      	mov	r1, fp
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	47b0      	blx	r6
 800c8aa:	3001      	adds	r0, #1
 800c8ac:	d129      	bne.n	800c902 <_printf_float+0x236>
 800c8ae:	e764      	b.n	800c77a <_printf_float+0xae>
 800c8b0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800c8b4:	f240 80d7 	bls.w	800ca66 <_printf_float+0x39a>
 800c8b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f7f4 f8de 	bl	8000a80 <__aeabi_dcmpeq>
 800c8c4:	b388      	cbz	r0, 800c92a <_printf_float+0x25e>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	4a40      	ldr	r2, [pc, #256]	; (800c9cc <_printf_float+0x300>)
 800c8ca:	4659      	mov	r1, fp
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	47b0      	blx	r6
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	f43f af52 	beq.w	800c77a <_printf_float+0xae>
 800c8d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	db02      	blt.n	800c8e4 <_printf_float+0x218>
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	07d8      	lsls	r0, r3, #31
 800c8e2:	d50e      	bpl.n	800c902 <_printf_float+0x236>
 800c8e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8e8:	4659      	mov	r1, fp
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	47b0      	blx	r6
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	f43f af43 	beq.w	800c77a <_printf_float+0xae>
 800c8f4:	2700      	movs	r7, #0
 800c8f6:	f104 081a 	add.w	r8, r4, #26
 800c8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	42bb      	cmp	r3, r7
 800c900:	dc09      	bgt.n	800c916 <_printf_float+0x24a>
 800c902:	6823      	ldr	r3, [r4, #0]
 800c904:	079f      	lsls	r7, r3, #30
 800c906:	f100 80fd 	bmi.w	800cb04 <_printf_float+0x438>
 800c90a:	68e0      	ldr	r0, [r4, #12]
 800c90c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c90e:	4298      	cmp	r0, r3
 800c910:	bfb8      	it	lt
 800c912:	4618      	movlt	r0, r3
 800c914:	e733      	b.n	800c77e <_printf_float+0xb2>
 800c916:	2301      	movs	r3, #1
 800c918:	4642      	mov	r2, r8
 800c91a:	4659      	mov	r1, fp
 800c91c:	4628      	mov	r0, r5
 800c91e:	47b0      	blx	r6
 800c920:	3001      	adds	r0, #1
 800c922:	f43f af2a 	beq.w	800c77a <_printf_float+0xae>
 800c926:	3701      	adds	r7, #1
 800c928:	e7e7      	b.n	800c8fa <_printf_float+0x22e>
 800c92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dc2b      	bgt.n	800c988 <_printf_float+0x2bc>
 800c930:	2301      	movs	r3, #1
 800c932:	4a26      	ldr	r2, [pc, #152]	; (800c9cc <_printf_float+0x300>)
 800c934:	4659      	mov	r1, fp
 800c936:	4628      	mov	r0, r5
 800c938:	47b0      	blx	r6
 800c93a:	3001      	adds	r0, #1
 800c93c:	f43f af1d 	beq.w	800c77a <_printf_float+0xae>
 800c940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c942:	b923      	cbnz	r3, 800c94e <_printf_float+0x282>
 800c944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c946:	b913      	cbnz	r3, 800c94e <_printf_float+0x282>
 800c948:	6823      	ldr	r3, [r4, #0]
 800c94a:	07d9      	lsls	r1, r3, #31
 800c94c:	d5d9      	bpl.n	800c902 <_printf_float+0x236>
 800c94e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c952:	4659      	mov	r1, fp
 800c954:	4628      	mov	r0, r5
 800c956:	47b0      	blx	r6
 800c958:	3001      	adds	r0, #1
 800c95a:	f43f af0e 	beq.w	800c77a <_printf_float+0xae>
 800c95e:	f04f 0800 	mov.w	r8, #0
 800c962:	f104 091a 	add.w	r9, r4, #26
 800c966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c968:	425b      	negs	r3, r3
 800c96a:	4543      	cmp	r3, r8
 800c96c:	dc01      	bgt.n	800c972 <_printf_float+0x2a6>
 800c96e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c970:	e797      	b.n	800c8a2 <_printf_float+0x1d6>
 800c972:	2301      	movs	r3, #1
 800c974:	464a      	mov	r2, r9
 800c976:	4659      	mov	r1, fp
 800c978:	4628      	mov	r0, r5
 800c97a:	47b0      	blx	r6
 800c97c:	3001      	adds	r0, #1
 800c97e:	f43f aefc 	beq.w	800c77a <_printf_float+0xae>
 800c982:	f108 0801 	add.w	r8, r8, #1
 800c986:	e7ee      	b.n	800c966 <_printf_float+0x29a>
 800c988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c98a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c98c:	429a      	cmp	r2, r3
 800c98e:	bfa8      	it	ge
 800c990:	461a      	movge	r2, r3
 800c992:	2a00      	cmp	r2, #0
 800c994:	4690      	mov	r8, r2
 800c996:	dd07      	ble.n	800c9a8 <_printf_float+0x2dc>
 800c998:	4613      	mov	r3, r2
 800c99a:	4659      	mov	r1, fp
 800c99c:	463a      	mov	r2, r7
 800c99e:	4628      	mov	r0, r5
 800c9a0:	47b0      	blx	r6
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	f43f aee9 	beq.w	800c77a <_printf_float+0xae>
 800c9a8:	f104 031a 	add.w	r3, r4, #26
 800c9ac:	f04f 0a00 	mov.w	sl, #0
 800c9b0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800c9b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9b6:	e015      	b.n	800c9e4 <_printf_float+0x318>
 800c9b8:	7fefffff 	.word	0x7fefffff
 800c9bc:	0800eb54 	.word	0x0800eb54
 800c9c0:	0800eb50 	.word	0x0800eb50
 800c9c4:	0800eb5c 	.word	0x0800eb5c
 800c9c8:	0800eb58 	.word	0x0800eb58
 800c9cc:	0800eb60 	.word	0x0800eb60
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9d4:	4659      	mov	r1, fp
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	47b0      	blx	r6
 800c9da:	3001      	adds	r0, #1
 800c9dc:	f43f aecd 	beq.w	800c77a <_printf_float+0xae>
 800c9e0:	f10a 0a01 	add.w	sl, sl, #1
 800c9e4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800c9e8:	eba9 0308 	sub.w	r3, r9, r8
 800c9ec:	4553      	cmp	r3, sl
 800c9ee:	dcef      	bgt.n	800c9d0 <_printf_float+0x304>
 800c9f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	444f      	add	r7, r9
 800c9f8:	db14      	blt.n	800ca24 <_printf_float+0x358>
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	07da      	lsls	r2, r3, #31
 800c9fe:	d411      	bmi.n	800ca24 <_printf_float+0x358>
 800ca00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca02:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ca04:	eba3 0209 	sub.w	r2, r3, r9
 800ca08:	eba3 0901 	sub.w	r9, r3, r1
 800ca0c:	4591      	cmp	r9, r2
 800ca0e:	bfa8      	it	ge
 800ca10:	4691      	movge	r9, r2
 800ca12:	f1b9 0f00 	cmp.w	r9, #0
 800ca16:	dc0d      	bgt.n	800ca34 <_printf_float+0x368>
 800ca18:	2700      	movs	r7, #0
 800ca1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca1e:	f104 081a 	add.w	r8, r4, #26
 800ca22:	e018      	b.n	800ca56 <_printf_float+0x38a>
 800ca24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca28:	4659      	mov	r1, fp
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	47b0      	blx	r6
 800ca2e:	3001      	adds	r0, #1
 800ca30:	d1e6      	bne.n	800ca00 <_printf_float+0x334>
 800ca32:	e6a2      	b.n	800c77a <_printf_float+0xae>
 800ca34:	464b      	mov	r3, r9
 800ca36:	463a      	mov	r2, r7
 800ca38:	4659      	mov	r1, fp
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b0      	blx	r6
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d1ea      	bne.n	800ca18 <_printf_float+0x34c>
 800ca42:	e69a      	b.n	800c77a <_printf_float+0xae>
 800ca44:	2301      	movs	r3, #1
 800ca46:	4642      	mov	r2, r8
 800ca48:	4659      	mov	r1, fp
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	47b0      	blx	r6
 800ca4e:	3001      	adds	r0, #1
 800ca50:	f43f ae93 	beq.w	800c77a <_printf_float+0xae>
 800ca54:	3701      	adds	r7, #1
 800ca56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ca5a:	1a9b      	subs	r3, r3, r2
 800ca5c:	eba3 0309 	sub.w	r3, r3, r9
 800ca60:	42bb      	cmp	r3, r7
 800ca62:	dcef      	bgt.n	800ca44 <_printf_float+0x378>
 800ca64:	e74d      	b.n	800c902 <_printf_float+0x236>
 800ca66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca68:	2a01      	cmp	r2, #1
 800ca6a:	dc01      	bgt.n	800ca70 <_printf_float+0x3a4>
 800ca6c:	07db      	lsls	r3, r3, #31
 800ca6e:	d538      	bpl.n	800cae2 <_printf_float+0x416>
 800ca70:	2301      	movs	r3, #1
 800ca72:	463a      	mov	r2, r7
 800ca74:	4659      	mov	r1, fp
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b0      	blx	r6
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	f43f ae7d 	beq.w	800c77a <_printf_float+0xae>
 800ca80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca84:	4659      	mov	r1, fp
 800ca86:	4628      	mov	r0, r5
 800ca88:	47b0      	blx	r6
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	f107 0701 	add.w	r7, r7, #1
 800ca90:	f43f ae73 	beq.w	800c77a <_printf_float+0xae>
 800ca94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f103 38ff 	add.w	r8, r3, #4294967295
 800caa0:	2300      	movs	r3, #0
 800caa2:	f7f3 ffed 	bl	8000a80 <__aeabi_dcmpeq>
 800caa6:	b9c0      	cbnz	r0, 800cada <_printf_float+0x40e>
 800caa8:	4643      	mov	r3, r8
 800caaa:	463a      	mov	r2, r7
 800caac:	4659      	mov	r1, fp
 800caae:	4628      	mov	r0, r5
 800cab0:	47b0      	blx	r6
 800cab2:	3001      	adds	r0, #1
 800cab4:	d10d      	bne.n	800cad2 <_printf_float+0x406>
 800cab6:	e660      	b.n	800c77a <_printf_float+0xae>
 800cab8:	2301      	movs	r3, #1
 800caba:	4642      	mov	r2, r8
 800cabc:	4659      	mov	r1, fp
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b0      	blx	r6
 800cac2:	3001      	adds	r0, #1
 800cac4:	f43f ae59 	beq.w	800c77a <_printf_float+0xae>
 800cac8:	3701      	adds	r7, #1
 800caca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cacc:	3b01      	subs	r3, #1
 800cace:	42bb      	cmp	r3, r7
 800cad0:	dcf2      	bgt.n	800cab8 <_printf_float+0x3ec>
 800cad2:	464b      	mov	r3, r9
 800cad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cad8:	e6e4      	b.n	800c8a4 <_printf_float+0x1d8>
 800cada:	2700      	movs	r7, #0
 800cadc:	f104 081a 	add.w	r8, r4, #26
 800cae0:	e7f3      	b.n	800caca <_printf_float+0x3fe>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e7e1      	b.n	800caaa <_printf_float+0x3de>
 800cae6:	2301      	movs	r3, #1
 800cae8:	4642      	mov	r2, r8
 800caea:	4659      	mov	r1, fp
 800caec:	4628      	mov	r0, r5
 800caee:	47b0      	blx	r6
 800caf0:	3001      	adds	r0, #1
 800caf2:	f43f ae42 	beq.w	800c77a <_printf_float+0xae>
 800caf6:	3701      	adds	r7, #1
 800caf8:	68e3      	ldr	r3, [r4, #12]
 800cafa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	42bb      	cmp	r3, r7
 800cb00:	dcf1      	bgt.n	800cae6 <_printf_float+0x41a>
 800cb02:	e702      	b.n	800c90a <_printf_float+0x23e>
 800cb04:	2700      	movs	r7, #0
 800cb06:	f104 0819 	add.w	r8, r4, #25
 800cb0a:	e7f5      	b.n	800caf8 <_printf_float+0x42c>
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f43f ae94 	beq.w	800c83a <_printf_float+0x16e>
 800cb12:	f04f 0c00 	mov.w	ip, #0
 800cb16:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800cb1a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800cb1e:	6022      	str	r2, [r4, #0]
 800cb20:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800cb24:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	463a      	mov	r2, r7
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f7ff fd3a 	bl	800c5a8 <__cvt>
 800cb34:	4607      	mov	r7, r0
 800cb36:	e64f      	b.n	800c7d8 <_printf_float+0x10c>

0800cb38 <_printf_common>:
 800cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb3c:	4691      	mov	r9, r2
 800cb3e:	461f      	mov	r7, r3
 800cb40:	688a      	ldr	r2, [r1, #8]
 800cb42:	690b      	ldr	r3, [r1, #16]
 800cb44:	4606      	mov	r6, r0
 800cb46:	4293      	cmp	r3, r2
 800cb48:	bfb8      	it	lt
 800cb4a:	4613      	movlt	r3, r2
 800cb4c:	f8c9 3000 	str.w	r3, [r9]
 800cb50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb54:	460c      	mov	r4, r1
 800cb56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb5a:	b112      	cbz	r2, 800cb62 <_printf_common+0x2a>
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	f8c9 3000 	str.w	r3, [r9]
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	0699      	lsls	r1, r3, #26
 800cb66:	bf42      	ittt	mi
 800cb68:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb6c:	3302      	addmi	r3, #2
 800cb6e:	f8c9 3000 	strmi.w	r3, [r9]
 800cb72:	6825      	ldr	r5, [r4, #0]
 800cb74:	f015 0506 	ands.w	r5, r5, #6
 800cb78:	d107      	bne.n	800cb8a <_printf_common+0x52>
 800cb7a:	f104 0a19 	add.w	sl, r4, #25
 800cb7e:	68e3      	ldr	r3, [r4, #12]
 800cb80:	f8d9 2000 	ldr.w	r2, [r9]
 800cb84:	1a9b      	subs	r3, r3, r2
 800cb86:	42ab      	cmp	r3, r5
 800cb88:	dc29      	bgt.n	800cbde <_printf_common+0xa6>
 800cb8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb8e:	6822      	ldr	r2, [r4, #0]
 800cb90:	3300      	adds	r3, #0
 800cb92:	bf18      	it	ne
 800cb94:	2301      	movne	r3, #1
 800cb96:	0692      	lsls	r2, r2, #26
 800cb98:	d42e      	bmi.n	800cbf8 <_printf_common+0xc0>
 800cb9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb9e:	4639      	mov	r1, r7
 800cba0:	4630      	mov	r0, r6
 800cba2:	47c0      	blx	r8
 800cba4:	3001      	adds	r0, #1
 800cba6:	d021      	beq.n	800cbec <_printf_common+0xb4>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	68e5      	ldr	r5, [r4, #12]
 800cbac:	f003 0306 	and.w	r3, r3, #6
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	bf18      	it	ne
 800cbb4:	2500      	movne	r5, #0
 800cbb6:	f8d9 2000 	ldr.w	r2, [r9]
 800cbba:	f04f 0900 	mov.w	r9, #0
 800cbbe:	bf08      	it	eq
 800cbc0:	1aad      	subeq	r5, r5, r2
 800cbc2:	68a3      	ldr	r3, [r4, #8]
 800cbc4:	6922      	ldr	r2, [r4, #16]
 800cbc6:	bf08      	it	eq
 800cbc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	bfc4      	itt	gt
 800cbd0:	1a9b      	subgt	r3, r3, r2
 800cbd2:	18ed      	addgt	r5, r5, r3
 800cbd4:	341a      	adds	r4, #26
 800cbd6:	454d      	cmp	r5, r9
 800cbd8:	d11a      	bne.n	800cc10 <_printf_common+0xd8>
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e008      	b.n	800cbf0 <_printf_common+0xb8>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	4652      	mov	r2, sl
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	47c0      	blx	r8
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d103      	bne.n	800cbf4 <_printf_common+0xbc>
 800cbec:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf4:	3501      	adds	r5, #1
 800cbf6:	e7c2      	b.n	800cb7e <_printf_common+0x46>
 800cbf8:	2030      	movs	r0, #48	; 0x30
 800cbfa:	18e1      	adds	r1, r4, r3
 800cbfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc06:	4422      	add	r2, r4
 800cc08:	3302      	adds	r3, #2
 800cc0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc0e:	e7c4      	b.n	800cb9a <_printf_common+0x62>
 800cc10:	2301      	movs	r3, #1
 800cc12:	4622      	mov	r2, r4
 800cc14:	4639      	mov	r1, r7
 800cc16:	4630      	mov	r0, r6
 800cc18:	47c0      	blx	r8
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	d0e6      	beq.n	800cbec <_printf_common+0xb4>
 800cc1e:	f109 0901 	add.w	r9, r9, #1
 800cc22:	e7d8      	b.n	800cbd6 <_printf_common+0x9e>

0800cc24 <_printf_i>:
 800cc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	7e09      	ldrb	r1, [r1, #24]
 800cc30:	b085      	sub	sp, #20
 800cc32:	296e      	cmp	r1, #110	; 0x6e
 800cc34:	4617      	mov	r7, r2
 800cc36:	4606      	mov	r6, r0
 800cc38:	4698      	mov	r8, r3
 800cc3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc3c:	f000 80b3 	beq.w	800cda6 <_printf_i+0x182>
 800cc40:	d822      	bhi.n	800cc88 <_printf_i+0x64>
 800cc42:	2963      	cmp	r1, #99	; 0x63
 800cc44:	d036      	beq.n	800ccb4 <_printf_i+0x90>
 800cc46:	d80a      	bhi.n	800cc5e <_printf_i+0x3a>
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	f000 80b9 	beq.w	800cdc0 <_printf_i+0x19c>
 800cc4e:	2958      	cmp	r1, #88	; 0x58
 800cc50:	f000 8083 	beq.w	800cd5a <_printf_i+0x136>
 800cc54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc5c:	e032      	b.n	800ccc4 <_printf_i+0xa0>
 800cc5e:	2964      	cmp	r1, #100	; 0x64
 800cc60:	d001      	beq.n	800cc66 <_printf_i+0x42>
 800cc62:	2969      	cmp	r1, #105	; 0x69
 800cc64:	d1f6      	bne.n	800cc54 <_printf_i+0x30>
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	6813      	ldr	r3, [r2, #0]
 800cc6a:	0605      	lsls	r5, r0, #24
 800cc6c:	f103 0104 	add.w	r1, r3, #4
 800cc70:	d52a      	bpl.n	800ccc8 <_printf_i+0xa4>
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	6011      	str	r1, [r2, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	da03      	bge.n	800cc82 <_printf_i+0x5e>
 800cc7a:	222d      	movs	r2, #45	; 0x2d
 800cc7c:	425b      	negs	r3, r3
 800cc7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc82:	486f      	ldr	r0, [pc, #444]	; (800ce40 <_printf_i+0x21c>)
 800cc84:	220a      	movs	r2, #10
 800cc86:	e039      	b.n	800ccfc <_printf_i+0xd8>
 800cc88:	2973      	cmp	r1, #115	; 0x73
 800cc8a:	f000 809d 	beq.w	800cdc8 <_printf_i+0x1a4>
 800cc8e:	d808      	bhi.n	800cca2 <_printf_i+0x7e>
 800cc90:	296f      	cmp	r1, #111	; 0x6f
 800cc92:	d020      	beq.n	800ccd6 <_printf_i+0xb2>
 800cc94:	2970      	cmp	r1, #112	; 0x70
 800cc96:	d1dd      	bne.n	800cc54 <_printf_i+0x30>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	f043 0320 	orr.w	r3, r3, #32
 800cc9e:	6023      	str	r3, [r4, #0]
 800cca0:	e003      	b.n	800ccaa <_printf_i+0x86>
 800cca2:	2975      	cmp	r1, #117	; 0x75
 800cca4:	d017      	beq.n	800ccd6 <_printf_i+0xb2>
 800cca6:	2978      	cmp	r1, #120	; 0x78
 800cca8:	d1d4      	bne.n	800cc54 <_printf_i+0x30>
 800ccaa:	2378      	movs	r3, #120	; 0x78
 800ccac:	4865      	ldr	r0, [pc, #404]	; (800ce44 <_printf_i+0x220>)
 800ccae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccb2:	e055      	b.n	800cd60 <_printf_i+0x13c>
 800ccb4:	6813      	ldr	r3, [r2, #0]
 800ccb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccba:	1d19      	adds	r1, r3, #4
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	6011      	str	r1, [r2, #0]
 800ccc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e08c      	b.n	800cde2 <_printf_i+0x1be>
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccce:	6011      	str	r1, [r2, #0]
 800ccd0:	bf18      	it	ne
 800ccd2:	b21b      	sxthne	r3, r3
 800ccd4:	e7cf      	b.n	800cc76 <_printf_i+0x52>
 800ccd6:	6813      	ldr	r3, [r2, #0]
 800ccd8:	6825      	ldr	r5, [r4, #0]
 800ccda:	1d18      	adds	r0, r3, #4
 800ccdc:	6010      	str	r0, [r2, #0]
 800ccde:	0628      	lsls	r0, r5, #24
 800cce0:	d501      	bpl.n	800cce6 <_printf_i+0xc2>
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	e002      	b.n	800ccec <_printf_i+0xc8>
 800cce6:	0668      	lsls	r0, r5, #25
 800cce8:	d5fb      	bpl.n	800cce2 <_printf_i+0xbe>
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	296f      	cmp	r1, #111	; 0x6f
 800ccee:	bf14      	ite	ne
 800ccf0:	220a      	movne	r2, #10
 800ccf2:	2208      	moveq	r2, #8
 800ccf4:	4852      	ldr	r0, [pc, #328]	; (800ce40 <_printf_i+0x21c>)
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccfc:	6865      	ldr	r5, [r4, #4]
 800ccfe:	2d00      	cmp	r5, #0
 800cd00:	60a5      	str	r5, [r4, #8]
 800cd02:	f2c0 8095 	blt.w	800ce30 <_printf_i+0x20c>
 800cd06:	6821      	ldr	r1, [r4, #0]
 800cd08:	f021 0104 	bic.w	r1, r1, #4
 800cd0c:	6021      	str	r1, [r4, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d13d      	bne.n	800cd8e <_printf_i+0x16a>
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	f040 808e 	bne.w	800ce34 <_printf_i+0x210>
 800cd18:	4665      	mov	r5, ip
 800cd1a:	2a08      	cmp	r2, #8
 800cd1c:	d10b      	bne.n	800cd36 <_printf_i+0x112>
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	07db      	lsls	r3, r3, #31
 800cd22:	d508      	bpl.n	800cd36 <_printf_i+0x112>
 800cd24:	6923      	ldr	r3, [r4, #16]
 800cd26:	6862      	ldr	r2, [r4, #4]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	bfde      	ittt	le
 800cd2c:	2330      	movle	r3, #48	; 0x30
 800cd2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd36:	ebac 0305 	sub.w	r3, ip, r5
 800cd3a:	6123      	str	r3, [r4, #16]
 800cd3c:	f8cd 8000 	str.w	r8, [sp]
 800cd40:	463b      	mov	r3, r7
 800cd42:	aa03      	add	r2, sp, #12
 800cd44:	4621      	mov	r1, r4
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7ff fef6 	bl	800cb38 <_printf_common>
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d14d      	bne.n	800cdec <_printf_i+0x1c8>
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	b005      	add	sp, #20
 800cd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	4839      	ldr	r0, [pc, #228]	; (800ce40 <_printf_i+0x21c>)
 800cd5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd60:	6813      	ldr	r3, [r2, #0]
 800cd62:	6821      	ldr	r1, [r4, #0]
 800cd64:	1d1d      	adds	r5, r3, #4
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6015      	str	r5, [r2, #0]
 800cd6a:	060a      	lsls	r2, r1, #24
 800cd6c:	d50b      	bpl.n	800cd86 <_printf_i+0x162>
 800cd6e:	07ca      	lsls	r2, r1, #31
 800cd70:	bf44      	itt	mi
 800cd72:	f041 0120 	orrmi.w	r1, r1, #32
 800cd76:	6021      	strmi	r1, [r4, #0]
 800cd78:	b91b      	cbnz	r3, 800cd82 <_printf_i+0x15e>
 800cd7a:	6822      	ldr	r2, [r4, #0]
 800cd7c:	f022 0220 	bic.w	r2, r2, #32
 800cd80:	6022      	str	r2, [r4, #0]
 800cd82:	2210      	movs	r2, #16
 800cd84:	e7b7      	b.n	800ccf6 <_printf_i+0xd2>
 800cd86:	064d      	lsls	r5, r1, #25
 800cd88:	bf48      	it	mi
 800cd8a:	b29b      	uxthmi	r3, r3
 800cd8c:	e7ef      	b.n	800cd6e <_printf_i+0x14a>
 800cd8e:	4665      	mov	r5, ip
 800cd90:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd94:	fb02 3311 	mls	r3, r2, r1, r3
 800cd98:	5cc3      	ldrb	r3, [r0, r3]
 800cd9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cd9e:	460b      	mov	r3, r1
 800cda0:	2900      	cmp	r1, #0
 800cda2:	d1f5      	bne.n	800cd90 <_printf_i+0x16c>
 800cda4:	e7b9      	b.n	800cd1a <_printf_i+0xf6>
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	6825      	ldr	r5, [r4, #0]
 800cdaa:	1d18      	adds	r0, r3, #4
 800cdac:	6961      	ldr	r1, [r4, #20]
 800cdae:	6010      	str	r0, [r2, #0]
 800cdb0:	0628      	lsls	r0, r5, #24
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	d501      	bpl.n	800cdba <_printf_i+0x196>
 800cdb6:	6019      	str	r1, [r3, #0]
 800cdb8:	e002      	b.n	800cdc0 <_printf_i+0x19c>
 800cdba:	066a      	lsls	r2, r5, #25
 800cdbc:	d5fb      	bpl.n	800cdb6 <_printf_i+0x192>
 800cdbe:	8019      	strh	r1, [r3, #0]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4665      	mov	r5, ip
 800cdc4:	6123      	str	r3, [r4, #16]
 800cdc6:	e7b9      	b.n	800cd3c <_printf_i+0x118>
 800cdc8:	6813      	ldr	r3, [r2, #0]
 800cdca:	1d19      	adds	r1, r3, #4
 800cdcc:	6011      	str	r1, [r2, #0]
 800cdce:	681d      	ldr	r5, [r3, #0]
 800cdd0:	6862      	ldr	r2, [r4, #4]
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f000 ff7b 	bl	800dcd0 <memchr>
 800cdda:	b108      	cbz	r0, 800cde0 <_printf_i+0x1bc>
 800cddc:	1b40      	subs	r0, r0, r5
 800cdde:	6060      	str	r0, [r4, #4]
 800cde0:	6863      	ldr	r3, [r4, #4]
 800cde2:	6123      	str	r3, [r4, #16]
 800cde4:	2300      	movs	r3, #0
 800cde6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdea:	e7a7      	b.n	800cd3c <_printf_i+0x118>
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	462a      	mov	r2, r5
 800cdf0:	4639      	mov	r1, r7
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	47c0      	blx	r8
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	d0aa      	beq.n	800cd50 <_printf_i+0x12c>
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	079b      	lsls	r3, r3, #30
 800cdfe:	d413      	bmi.n	800ce28 <_printf_i+0x204>
 800ce00:	68e0      	ldr	r0, [r4, #12]
 800ce02:	9b03      	ldr	r3, [sp, #12]
 800ce04:	4298      	cmp	r0, r3
 800ce06:	bfb8      	it	lt
 800ce08:	4618      	movlt	r0, r3
 800ce0a:	e7a3      	b.n	800cd54 <_printf_i+0x130>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	464a      	mov	r2, r9
 800ce10:	4639      	mov	r1, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	47c0      	blx	r8
 800ce16:	3001      	adds	r0, #1
 800ce18:	d09a      	beq.n	800cd50 <_printf_i+0x12c>
 800ce1a:	3501      	adds	r5, #1
 800ce1c:	68e3      	ldr	r3, [r4, #12]
 800ce1e:	9a03      	ldr	r2, [sp, #12]
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	42ab      	cmp	r3, r5
 800ce24:	dcf2      	bgt.n	800ce0c <_printf_i+0x1e8>
 800ce26:	e7eb      	b.n	800ce00 <_printf_i+0x1dc>
 800ce28:	2500      	movs	r5, #0
 800ce2a:	f104 0919 	add.w	r9, r4, #25
 800ce2e:	e7f5      	b.n	800ce1c <_printf_i+0x1f8>
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1ac      	bne.n	800cd8e <_printf_i+0x16a>
 800ce34:	7803      	ldrb	r3, [r0, #0]
 800ce36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce3e:	e76c      	b.n	800cd1a <_printf_i+0xf6>
 800ce40:	0800eb62 	.word	0x0800eb62
 800ce44:	0800eb73 	.word	0x0800eb73

0800ce48 <iprintf>:
 800ce48:	b40f      	push	{r0, r1, r2, r3}
 800ce4a:	4b0a      	ldr	r3, [pc, #40]	; (800ce74 <iprintf+0x2c>)
 800ce4c:	b513      	push	{r0, r1, r4, lr}
 800ce4e:	681c      	ldr	r4, [r3, #0]
 800ce50:	b124      	cbz	r4, 800ce5c <iprintf+0x14>
 800ce52:	69a3      	ldr	r3, [r4, #24]
 800ce54:	b913      	cbnz	r3, 800ce5c <iprintf+0x14>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 fea2 	bl	800dba0 <__sinit>
 800ce5c:	ab05      	add	r3, sp, #20
 800ce5e:	9a04      	ldr	r2, [sp, #16]
 800ce60:	68a1      	ldr	r1, [r4, #8]
 800ce62:	4620      	mov	r0, r4
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	f001 fa53 	bl	800e310 <_vfiprintf_r>
 800ce6a:	b002      	add	sp, #8
 800ce6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce70:	b004      	add	sp, #16
 800ce72:	4770      	bx	lr
 800ce74:	20000184 	.word	0x20000184

0800ce78 <_sbrk_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4c05      	ldr	r4, [pc, #20]	; (800ce94 <_sbrk_r+0x1c>)
 800ce7e:	4605      	mov	r5, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	6023      	str	r3, [r4, #0]
 800ce84:	f7f6 fcc8 	bl	8003818 <_sbrk>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_sbrk_r+0x1a>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_sbrk_r+0x1a>
 800ce90:	602b      	str	r3, [r5, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	200016dc 	.word	0x200016dc

0800ce98 <quorem>:
 800ce98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	6903      	ldr	r3, [r0, #16]
 800ce9e:	690c      	ldr	r4, [r1, #16]
 800cea0:	4680      	mov	r8, r0
 800cea2:	42a3      	cmp	r3, r4
 800cea4:	f2c0 8084 	blt.w	800cfb0 <quorem+0x118>
 800cea8:	3c01      	subs	r4, #1
 800ceaa:	f101 0714 	add.w	r7, r1, #20
 800ceae:	f100 0614 	add.w	r6, r0, #20
 800ceb2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ceb6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ceba:	3501      	adds	r5, #1
 800cebc:	fbb0 f5f5 	udiv	r5, r0, r5
 800cec0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cec4:	eb06 030c 	add.w	r3, r6, ip
 800cec8:	eb07 090c 	add.w	r9, r7, ip
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	b39d      	cbz	r5, 800cf38 <quorem+0xa0>
 800ced0:	f04f 0a00 	mov.w	sl, #0
 800ced4:	4638      	mov	r0, r7
 800ced6:	46b6      	mov	lr, r6
 800ced8:	46d3      	mov	fp, sl
 800ceda:	f850 2b04 	ldr.w	r2, [r0], #4
 800cede:	b293      	uxth	r3, r2
 800cee0:	fb05 a303 	mla	r3, r5, r3, sl
 800cee4:	0c12      	lsrs	r2, r2, #16
 800cee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ceea:	fb05 a202 	mla	r2, r5, r2, sl
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	ebab 0303 	sub.w	r3, fp, r3
 800cef4:	f8de b000 	ldr.w	fp, [lr]
 800cef8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cefc:	fa1f fb8b 	uxth.w	fp, fp
 800cf00:	445b      	add	r3, fp
 800cf02:	fa1f fb82 	uxth.w	fp, r2
 800cf06:	f8de 2000 	ldr.w	r2, [lr]
 800cf0a:	4581      	cmp	r9, r0
 800cf0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cf10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf1a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cf1e:	f84e 3b04 	str.w	r3, [lr], #4
 800cf22:	d2da      	bcs.n	800ceda <quorem+0x42>
 800cf24:	f856 300c 	ldr.w	r3, [r6, ip]
 800cf28:	b933      	cbnz	r3, 800cf38 <quorem+0xa0>
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	3b04      	subs	r3, #4
 800cf2e:	429e      	cmp	r6, r3
 800cf30:	461a      	mov	r2, r3
 800cf32:	d331      	bcc.n	800cf98 <quorem+0x100>
 800cf34:	f8c8 4010 	str.w	r4, [r8, #16]
 800cf38:	4640      	mov	r0, r8
 800cf3a:	f001 f8ed 	bl	800e118 <__mcmp>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	db26      	blt.n	800cf90 <quorem+0xf8>
 800cf42:	4630      	mov	r0, r6
 800cf44:	f04f 0c00 	mov.w	ip, #0
 800cf48:	3501      	adds	r5, #1
 800cf4a:	f857 1b04 	ldr.w	r1, [r7], #4
 800cf4e:	f8d0 e000 	ldr.w	lr, [r0]
 800cf52:	b28b      	uxth	r3, r1
 800cf54:	ebac 0303 	sub.w	r3, ip, r3
 800cf58:	fa1f f28e 	uxth.w	r2, lr
 800cf5c:	4413      	add	r3, r2
 800cf5e:	0c0a      	lsrs	r2, r1, #16
 800cf60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf6e:	45b9      	cmp	r9, r7
 800cf70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf74:	f840 3b04 	str.w	r3, [r0], #4
 800cf78:	d2e7      	bcs.n	800cf4a <quorem+0xb2>
 800cf7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cf7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cf82:	b92a      	cbnz	r2, 800cf90 <quorem+0xf8>
 800cf84:	3b04      	subs	r3, #4
 800cf86:	429e      	cmp	r6, r3
 800cf88:	461a      	mov	r2, r3
 800cf8a:	d30b      	bcc.n	800cfa4 <quorem+0x10c>
 800cf8c:	f8c8 4010 	str.w	r4, [r8, #16]
 800cf90:	4628      	mov	r0, r5
 800cf92:	b003      	add	sp, #12
 800cf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf98:	6812      	ldr	r2, [r2, #0]
 800cf9a:	3b04      	subs	r3, #4
 800cf9c:	2a00      	cmp	r2, #0
 800cf9e:	d1c9      	bne.n	800cf34 <quorem+0x9c>
 800cfa0:	3c01      	subs	r4, #1
 800cfa2:	e7c4      	b.n	800cf2e <quorem+0x96>
 800cfa4:	6812      	ldr	r2, [r2, #0]
 800cfa6:	3b04      	subs	r3, #4
 800cfa8:	2a00      	cmp	r2, #0
 800cfaa:	d1ef      	bne.n	800cf8c <quorem+0xf4>
 800cfac:	3c01      	subs	r4, #1
 800cfae:	e7ea      	b.n	800cf86 <quorem+0xee>
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	e7ee      	b.n	800cf92 <quorem+0xfa>
 800cfb4:	0000      	movs	r0, r0
	...

0800cfb8 <_dtoa_r>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	4616      	mov	r6, r2
 800cfbe:	461f      	mov	r7, r3
 800cfc0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cfc2:	b095      	sub	sp, #84	; 0x54
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800cfca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cfce:	b93d      	cbnz	r5, 800cfe0 <_dtoa_r+0x28>
 800cfd0:	2010      	movs	r0, #16
 800cfd2:	f7ff fa27 	bl	800c424 <malloc>
 800cfd6:	6260      	str	r0, [r4, #36]	; 0x24
 800cfd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfdc:	6005      	str	r5, [r0, #0]
 800cfde:	60c5      	str	r5, [r0, #12]
 800cfe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfe2:	6819      	ldr	r1, [r3, #0]
 800cfe4:	b151      	cbz	r1, 800cffc <_dtoa_r+0x44>
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4093      	lsls	r3, r2
 800cfec:	604a      	str	r2, [r1, #4]
 800cfee:	608b      	str	r3, [r1, #8]
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 feb1 	bl	800dd58 <_Bfree>
 800cff6:	2200      	movs	r2, #0
 800cff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	1e3b      	subs	r3, r7, #0
 800cffe:	bfaf      	iteee	ge
 800d000:	2300      	movge	r3, #0
 800d002:	2201      	movlt	r2, #1
 800d004:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d008:	9303      	strlt	r3, [sp, #12]
 800d00a:	bfac      	ite	ge
 800d00c:	f8c8 3000 	strge.w	r3, [r8]
 800d010:	f8c8 2000 	strlt.w	r2, [r8]
 800d014:	4bae      	ldr	r3, [pc, #696]	; (800d2d0 <_dtoa_r+0x318>)
 800d016:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d01a:	ea33 0308 	bics.w	r3, r3, r8
 800d01e:	d11b      	bne.n	800d058 <_dtoa_r+0xa0>
 800d020:	f242 730f 	movw	r3, #9999	; 0x270f
 800d024:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d026:	6013      	str	r3, [r2, #0]
 800d028:	9b02      	ldr	r3, [sp, #8]
 800d02a:	b923      	cbnz	r3, 800d036 <_dtoa_r+0x7e>
 800d02c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d030:	2800      	cmp	r0, #0
 800d032:	f000 8545 	beq.w	800dac0 <_dtoa_r+0xb08>
 800d036:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d038:	b953      	cbnz	r3, 800d050 <_dtoa_r+0x98>
 800d03a:	4ba6      	ldr	r3, [pc, #664]	; (800d2d4 <_dtoa_r+0x31c>)
 800d03c:	e021      	b.n	800d082 <_dtoa_r+0xca>
 800d03e:	4ba6      	ldr	r3, [pc, #664]	; (800d2d8 <_dtoa_r+0x320>)
 800d040:	9306      	str	r3, [sp, #24]
 800d042:	3308      	adds	r3, #8
 800d044:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	9806      	ldr	r0, [sp, #24]
 800d04a:	b015      	add	sp, #84	; 0x54
 800d04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d050:	4ba0      	ldr	r3, [pc, #640]	; (800d2d4 <_dtoa_r+0x31c>)
 800d052:	9306      	str	r3, [sp, #24]
 800d054:	3303      	adds	r3, #3
 800d056:	e7f5      	b.n	800d044 <_dtoa_r+0x8c>
 800d058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d05c:	2200      	movs	r2, #0
 800d05e:	2300      	movs	r3, #0
 800d060:	4630      	mov	r0, r6
 800d062:	4639      	mov	r1, r7
 800d064:	f7f3 fd0c 	bl	8000a80 <__aeabi_dcmpeq>
 800d068:	4682      	mov	sl, r0
 800d06a:	b160      	cbz	r0, 800d086 <_dtoa_r+0xce>
 800d06c:	2301      	movs	r3, #1
 800d06e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d070:	6013      	str	r3, [r2, #0]
 800d072:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 8520 	beq.w	800daba <_dtoa_r+0xb02>
 800d07a:	4b98      	ldr	r3, [pc, #608]	; (800d2dc <_dtoa_r+0x324>)
 800d07c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d07e:	6013      	str	r3, [r2, #0]
 800d080:	3b01      	subs	r3, #1
 800d082:	9306      	str	r3, [sp, #24]
 800d084:	e7e0      	b.n	800d048 <_dtoa_r+0x90>
 800d086:	ab12      	add	r3, sp, #72	; 0x48
 800d088:	9301      	str	r3, [sp, #4]
 800d08a:	ab13      	add	r3, sp, #76	; 0x4c
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	4632      	mov	r2, r6
 800d090:	463b      	mov	r3, r7
 800d092:	4620      	mov	r0, r4
 800d094:	f001 f8b8 	bl	800e208 <__d2b>
 800d098:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d09c:	4683      	mov	fp, r0
 800d09e:	2d00      	cmp	r5, #0
 800d0a0:	d07d      	beq.n	800d19e <_dtoa_r+0x1e6>
 800d0a2:	46b0      	mov	r8, r6
 800d0a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0a8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800d0ac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800d0b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0b4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	4b89      	ldr	r3, [pc, #548]	; (800d2e0 <_dtoa_r+0x328>)
 800d0bc:	4640      	mov	r0, r8
 800d0be:	4649      	mov	r1, r9
 800d0c0:	f7f3 f8be 	bl	8000240 <__aeabi_dsub>
 800d0c4:	a37c      	add	r3, pc, #496	; (adr r3, 800d2b8 <_dtoa_r+0x300>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 fa71 	bl	80005b0 <__aeabi_dmul>
 800d0ce:	a37c      	add	r3, pc, #496	; (adr r3, 800d2c0 <_dtoa_r+0x308>)
 800d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d4:	f7f3 f8b6 	bl	8000244 <__adddf3>
 800d0d8:	4606      	mov	r6, r0
 800d0da:	4628      	mov	r0, r5
 800d0dc:	460f      	mov	r7, r1
 800d0de:	f7f3 f9fd 	bl	80004dc <__aeabi_i2d>
 800d0e2:	a379      	add	r3, pc, #484	; (adr r3, 800d2c8 <_dtoa_r+0x310>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	f7f3 fa62 	bl	80005b0 <__aeabi_dmul>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 f8a6 	bl	8000244 <__adddf3>
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	460f      	mov	r7, r1
 800d0fc:	f7f3 fd08 	bl	8000b10 <__aeabi_d2iz>
 800d100:	2200      	movs	r2, #0
 800d102:	4682      	mov	sl, r0
 800d104:	2300      	movs	r3, #0
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 fcc3 	bl	8000a94 <__aeabi_dcmplt>
 800d10e:	b148      	cbz	r0, 800d124 <_dtoa_r+0x16c>
 800d110:	4650      	mov	r0, sl
 800d112:	f7f3 f9e3 	bl	80004dc <__aeabi_i2d>
 800d116:	4632      	mov	r2, r6
 800d118:	463b      	mov	r3, r7
 800d11a:	f7f3 fcb1 	bl	8000a80 <__aeabi_dcmpeq>
 800d11e:	b908      	cbnz	r0, 800d124 <_dtoa_r+0x16c>
 800d120:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d124:	f1ba 0f16 	cmp.w	sl, #22
 800d128:	d85a      	bhi.n	800d1e0 <_dtoa_r+0x228>
 800d12a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d12e:	496d      	ldr	r1, [pc, #436]	; (800d2e4 <_dtoa_r+0x32c>)
 800d130:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d134:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d138:	f7f3 fcca 	bl	8000ad0 <__aeabi_dcmpgt>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d051      	beq.n	800d1e4 <_dtoa_r+0x22c>
 800d140:	2300      	movs	r3, #0
 800d142:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d146:	930d      	str	r3, [sp, #52]	; 0x34
 800d148:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d14a:	1b5d      	subs	r5, r3, r5
 800d14c:	1e6b      	subs	r3, r5, #1
 800d14e:	9307      	str	r3, [sp, #28]
 800d150:	bf43      	ittte	mi
 800d152:	2300      	movmi	r3, #0
 800d154:	f1c5 0901 	rsbmi	r9, r5, #1
 800d158:	9307      	strmi	r3, [sp, #28]
 800d15a:	f04f 0900 	movpl.w	r9, #0
 800d15e:	f1ba 0f00 	cmp.w	sl, #0
 800d162:	db41      	blt.n	800d1e8 <_dtoa_r+0x230>
 800d164:	9b07      	ldr	r3, [sp, #28]
 800d166:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800d16a:	4453      	add	r3, sl
 800d16c:	9307      	str	r3, [sp, #28]
 800d16e:	2300      	movs	r3, #0
 800d170:	9308      	str	r3, [sp, #32]
 800d172:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d174:	2b09      	cmp	r3, #9
 800d176:	f200 808f 	bhi.w	800d298 <_dtoa_r+0x2e0>
 800d17a:	2b05      	cmp	r3, #5
 800d17c:	bfc4      	itt	gt
 800d17e:	3b04      	subgt	r3, #4
 800d180:	931e      	strgt	r3, [sp, #120]	; 0x78
 800d182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d184:	bfc8      	it	gt
 800d186:	2500      	movgt	r5, #0
 800d188:	f1a3 0302 	sub.w	r3, r3, #2
 800d18c:	bfd8      	it	le
 800d18e:	2501      	movle	r5, #1
 800d190:	2b03      	cmp	r3, #3
 800d192:	f200 808d 	bhi.w	800d2b0 <_dtoa_r+0x2f8>
 800d196:	e8df f003 	tbb	[pc, r3]
 800d19a:	7d7b      	.short	0x7d7b
 800d19c:	6f2f      	.short	0x6f2f
 800d19e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d1a2:	441d      	add	r5, r3
 800d1a4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d1a8:	2820      	cmp	r0, #32
 800d1aa:	dd13      	ble.n	800d1d4 <_dtoa_r+0x21c>
 800d1ac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d1b0:	9b02      	ldr	r3, [sp, #8]
 800d1b2:	fa08 f800 	lsl.w	r8, r8, r0
 800d1b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d1ba:	fa23 f000 	lsr.w	r0, r3, r0
 800d1be:	ea48 0000 	orr.w	r0, r8, r0
 800d1c2:	f7f3 f97b 	bl	80004bc <__aeabi_ui2d>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4680      	mov	r8, r0
 800d1ca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800d1ce:	3d01      	subs	r5, #1
 800d1d0:	9310      	str	r3, [sp, #64]	; 0x40
 800d1d2:	e771      	b.n	800d0b8 <_dtoa_r+0x100>
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	f1c0 0020 	rsb	r0, r0, #32
 800d1da:	fa03 f000 	lsl.w	r0, r3, r0
 800d1de:	e7f0      	b.n	800d1c2 <_dtoa_r+0x20a>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e7b0      	b.n	800d146 <_dtoa_r+0x18e>
 800d1e4:	900d      	str	r0, [sp, #52]	; 0x34
 800d1e6:	e7af      	b.n	800d148 <_dtoa_r+0x190>
 800d1e8:	f1ca 0300 	rsb	r3, sl, #0
 800d1ec:	9308      	str	r3, [sp, #32]
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	eba9 090a 	sub.w	r9, r9, sl
 800d1f4:	930c      	str	r3, [sp, #48]	; 0x30
 800d1f6:	e7bc      	b.n	800d172 <_dtoa_r+0x1ba>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	dd74      	ble.n	800d2ec <_dtoa_r+0x334>
 800d202:	4698      	mov	r8, r3
 800d204:	9304      	str	r3, [sp, #16]
 800d206:	2200      	movs	r2, #0
 800d208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d20a:	6072      	str	r2, [r6, #4]
 800d20c:	2204      	movs	r2, #4
 800d20e:	f102 0014 	add.w	r0, r2, #20
 800d212:	4298      	cmp	r0, r3
 800d214:	6871      	ldr	r1, [r6, #4]
 800d216:	d96e      	bls.n	800d2f6 <_dtoa_r+0x33e>
 800d218:	4620      	mov	r0, r4
 800d21a:	f000 fd69 	bl	800dcf0 <_Balloc>
 800d21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d220:	6030      	str	r0, [r6, #0]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f1b8 0f0e 	cmp.w	r8, #14
 800d228:	9306      	str	r3, [sp, #24]
 800d22a:	f200 80ed 	bhi.w	800d408 <_dtoa_r+0x450>
 800d22e:	2d00      	cmp	r5, #0
 800d230:	f000 80ea 	beq.w	800d408 <_dtoa_r+0x450>
 800d234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d238:	f1ba 0f00 	cmp.w	sl, #0
 800d23c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d240:	dd77      	ble.n	800d332 <_dtoa_r+0x37a>
 800d242:	4a28      	ldr	r2, [pc, #160]	; (800d2e4 <_dtoa_r+0x32c>)
 800d244:	f00a 030f 	and.w	r3, sl, #15
 800d248:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d24c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d250:	06f0      	lsls	r0, r6, #27
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d25a:	d568      	bpl.n	800d32e <_dtoa_r+0x376>
 800d25c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d260:	4b21      	ldr	r3, [pc, #132]	; (800d2e8 <_dtoa_r+0x330>)
 800d262:	2503      	movs	r5, #3
 800d264:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d268:	f7f3 facc 	bl	8000804 <__aeabi_ddiv>
 800d26c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d270:	f006 060f 	and.w	r6, r6, #15
 800d274:	4f1c      	ldr	r7, [pc, #112]	; (800d2e8 <_dtoa_r+0x330>)
 800d276:	e04f      	b.n	800d318 <_dtoa_r+0x360>
 800d278:	2301      	movs	r3, #1
 800d27a:	9309      	str	r3, [sp, #36]	; 0x24
 800d27c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d27e:	4453      	add	r3, sl
 800d280:	f103 0801 	add.w	r8, r3, #1
 800d284:	9304      	str	r3, [sp, #16]
 800d286:	4643      	mov	r3, r8
 800d288:	2b01      	cmp	r3, #1
 800d28a:	bfb8      	it	lt
 800d28c:	2301      	movlt	r3, #1
 800d28e:	e7ba      	b.n	800d206 <_dtoa_r+0x24e>
 800d290:	2300      	movs	r3, #0
 800d292:	e7b2      	b.n	800d1fa <_dtoa_r+0x242>
 800d294:	2300      	movs	r3, #0
 800d296:	e7f0      	b.n	800d27a <_dtoa_r+0x2c2>
 800d298:	2501      	movs	r5, #1
 800d29a:	2300      	movs	r3, #0
 800d29c:	9509      	str	r5, [sp, #36]	; 0x24
 800d29e:	931e      	str	r3, [sp, #120]	; 0x78
 800d2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	4698      	mov	r8, r3
 800d2aa:	2312      	movs	r3, #18
 800d2ac:	921f      	str	r2, [sp, #124]	; 0x7c
 800d2ae:	e7aa      	b.n	800d206 <_dtoa_r+0x24e>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b4:	e7f4      	b.n	800d2a0 <_dtoa_r+0x2e8>
 800d2b6:	bf00      	nop
 800d2b8:	636f4361 	.word	0x636f4361
 800d2bc:	3fd287a7 	.word	0x3fd287a7
 800d2c0:	8b60c8b3 	.word	0x8b60c8b3
 800d2c4:	3fc68a28 	.word	0x3fc68a28
 800d2c8:	509f79fb 	.word	0x509f79fb
 800d2cc:	3fd34413 	.word	0x3fd34413
 800d2d0:	7ff00000 	.word	0x7ff00000
 800d2d4:	0800eb8d 	.word	0x0800eb8d
 800d2d8:	0800eb84 	.word	0x0800eb84
 800d2dc:	0800eb61 	.word	0x0800eb61
 800d2e0:	3ff80000 	.word	0x3ff80000
 800d2e4:	0800ec20 	.word	0x0800ec20
 800d2e8:	0800ebf8 	.word	0x0800ebf8
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	9304      	str	r3, [sp, #16]
 800d2f0:	4698      	mov	r8, r3
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	e7da      	b.n	800d2ac <_dtoa_r+0x2f4>
 800d2f6:	3101      	adds	r1, #1
 800d2f8:	6071      	str	r1, [r6, #4]
 800d2fa:	0052      	lsls	r2, r2, #1
 800d2fc:	e787      	b.n	800d20e <_dtoa_r+0x256>
 800d2fe:	07f1      	lsls	r1, r6, #31
 800d300:	d508      	bpl.n	800d314 <_dtoa_r+0x35c>
 800d302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d30a:	f7f3 f951 	bl	80005b0 <__aeabi_dmul>
 800d30e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d312:	3501      	adds	r5, #1
 800d314:	1076      	asrs	r6, r6, #1
 800d316:	3708      	adds	r7, #8
 800d318:	2e00      	cmp	r6, #0
 800d31a:	d1f0      	bne.n	800d2fe <_dtoa_r+0x346>
 800d31c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d324:	f7f3 fa6e 	bl	8000804 <__aeabi_ddiv>
 800d328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d32c:	e01b      	b.n	800d366 <_dtoa_r+0x3ae>
 800d32e:	2502      	movs	r5, #2
 800d330:	e7a0      	b.n	800d274 <_dtoa_r+0x2bc>
 800d332:	f000 80a4 	beq.w	800d47e <_dtoa_r+0x4c6>
 800d336:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d33a:	f1ca 0600 	rsb	r6, sl, #0
 800d33e:	4ba0      	ldr	r3, [pc, #640]	; (800d5c0 <_dtoa_r+0x608>)
 800d340:	f006 020f 	and.w	r2, r6, #15
 800d344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f7f3 f930 	bl	80005b0 <__aeabi_dmul>
 800d350:	2502      	movs	r5, #2
 800d352:	2300      	movs	r3, #0
 800d354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d358:	4f9a      	ldr	r7, [pc, #616]	; (800d5c4 <_dtoa_r+0x60c>)
 800d35a:	1136      	asrs	r6, r6, #4
 800d35c:	2e00      	cmp	r6, #0
 800d35e:	f040 8083 	bne.w	800d468 <_dtoa_r+0x4b0>
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1e0      	bne.n	800d328 <_dtoa_r+0x370>
 800d366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 808a 	beq.w	800d482 <_dtoa_r+0x4ca>
 800d36e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d372:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d37a:	2200      	movs	r2, #0
 800d37c:	4b92      	ldr	r3, [pc, #584]	; (800d5c8 <_dtoa_r+0x610>)
 800d37e:	f7f3 fb89 	bl	8000a94 <__aeabi_dcmplt>
 800d382:	2800      	cmp	r0, #0
 800d384:	d07d      	beq.n	800d482 <_dtoa_r+0x4ca>
 800d386:	f1b8 0f00 	cmp.w	r8, #0
 800d38a:	d07a      	beq.n	800d482 <_dtoa_r+0x4ca>
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	dd36      	ble.n	800d400 <_dtoa_r+0x448>
 800d392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d396:	2200      	movs	r2, #0
 800d398:	4b8c      	ldr	r3, [pc, #560]	; (800d5cc <_dtoa_r+0x614>)
 800d39a:	f7f3 f909 	bl	80005b0 <__aeabi_dmul>
 800d39e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3a2:	9e04      	ldr	r6, [sp, #16]
 800d3a4:	f10a 37ff 	add.w	r7, sl, #4294967295
 800d3a8:	3501      	adds	r5, #1
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	f7f3 f896 	bl	80004dc <__aeabi_i2d>
 800d3b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3b4:	f7f3 f8fc 	bl	80005b0 <__aeabi_dmul>
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4b85      	ldr	r3, [pc, #532]	; (800d5d0 <_dtoa_r+0x618>)
 800d3bc:	f7f2 ff42 	bl	8000244 <__adddf3>
 800d3c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d3c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d3c8:	950b      	str	r5, [sp, #44]	; 0x2c
 800d3ca:	2e00      	cmp	r6, #0
 800d3cc:	d15c      	bne.n	800d488 <_dtoa_r+0x4d0>
 800d3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	4b7f      	ldr	r3, [pc, #508]	; (800d5d4 <_dtoa_r+0x61c>)
 800d3d6:	f7f2 ff33 	bl	8000240 <__aeabi_dsub>
 800d3da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3dc:	462b      	mov	r3, r5
 800d3de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3e2:	f7f3 fb75 	bl	8000ad0 <__aeabi_dcmpgt>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	f040 8281 	bne.w	800d8ee <_dtoa_r+0x936>
 800d3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3f2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d3f6:	f7f3 fb4d 	bl	8000a94 <__aeabi_dcmplt>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	f040 8275 	bne.w	800d8ea <_dtoa_r+0x932>
 800d400:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d404:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f2c0 814b 	blt.w	800d6a6 <_dtoa_r+0x6ee>
 800d410:	f1ba 0f0e 	cmp.w	sl, #14
 800d414:	f300 8147 	bgt.w	800d6a6 <_dtoa_r+0x6ee>
 800d418:	4b69      	ldr	r3, [pc, #420]	; (800d5c0 <_dtoa_r+0x608>)
 800d41a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d426:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f280 80d7 	bge.w	800d5dc <_dtoa_r+0x624>
 800d42e:	f1b8 0f00 	cmp.w	r8, #0
 800d432:	f300 80d3 	bgt.w	800d5dc <_dtoa_r+0x624>
 800d436:	f040 8257 	bne.w	800d8e8 <_dtoa_r+0x930>
 800d43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d43e:	2200      	movs	r2, #0
 800d440:	4b64      	ldr	r3, [pc, #400]	; (800d5d4 <_dtoa_r+0x61c>)
 800d442:	f7f3 f8b5 	bl	80005b0 <__aeabi_dmul>
 800d446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d44a:	f7f3 fb37 	bl	8000abc <__aeabi_dcmpge>
 800d44e:	4646      	mov	r6, r8
 800d450:	4647      	mov	r7, r8
 800d452:	2800      	cmp	r0, #0
 800d454:	f040 822d 	bne.w	800d8b2 <_dtoa_r+0x8fa>
 800d458:	9b06      	ldr	r3, [sp, #24]
 800d45a:	9a06      	ldr	r2, [sp, #24]
 800d45c:	1c5d      	adds	r5, r3, #1
 800d45e:	2331      	movs	r3, #49	; 0x31
 800d460:	f10a 0a01 	add.w	sl, sl, #1
 800d464:	7013      	strb	r3, [r2, #0]
 800d466:	e228      	b.n	800d8ba <_dtoa_r+0x902>
 800d468:	07f2      	lsls	r2, r6, #31
 800d46a:	d505      	bpl.n	800d478 <_dtoa_r+0x4c0>
 800d46c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d470:	f7f3 f89e 	bl	80005b0 <__aeabi_dmul>
 800d474:	2301      	movs	r3, #1
 800d476:	3501      	adds	r5, #1
 800d478:	1076      	asrs	r6, r6, #1
 800d47a:	3708      	adds	r7, #8
 800d47c:	e76e      	b.n	800d35c <_dtoa_r+0x3a4>
 800d47e:	2502      	movs	r5, #2
 800d480:	e771      	b.n	800d366 <_dtoa_r+0x3ae>
 800d482:	4657      	mov	r7, sl
 800d484:	4646      	mov	r6, r8
 800d486:	e790      	b.n	800d3aa <_dtoa_r+0x3f2>
 800d488:	4b4d      	ldr	r3, [pc, #308]	; (800d5c0 <_dtoa_r+0x608>)
 800d48a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d48e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d494:	2b00      	cmp	r3, #0
 800d496:	d048      	beq.n	800d52a <_dtoa_r+0x572>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	2000      	movs	r0, #0
 800d49e:	494e      	ldr	r1, [pc, #312]	; (800d5d8 <_dtoa_r+0x620>)
 800d4a0:	f7f3 f9b0 	bl	8000804 <__aeabi_ddiv>
 800d4a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d4a8:	f7f2 feca 	bl	8000240 <__aeabi_dsub>
 800d4ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d4b0:	9d06      	ldr	r5, [sp, #24]
 800d4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4b6:	f7f3 fb2b 	bl	8000b10 <__aeabi_d2iz>
 800d4ba:	9011      	str	r0, [sp, #68]	; 0x44
 800d4bc:	f7f3 f80e 	bl	80004dc <__aeabi_i2d>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4c8:	f7f2 feba 	bl	8000240 <__aeabi_dsub>
 800d4cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4d2:	3330      	adds	r3, #48	; 0x30
 800d4d4:	f805 3b01 	strb.w	r3, [r5], #1
 800d4d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d4dc:	f7f3 fada 	bl	8000a94 <__aeabi_dcmplt>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d163      	bne.n	800d5ac <_dtoa_r+0x5f4>
 800d4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	4937      	ldr	r1, [pc, #220]	; (800d5c8 <_dtoa_r+0x610>)
 800d4ec:	f7f2 fea8 	bl	8000240 <__aeabi_dsub>
 800d4f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d4f4:	f7f3 face 	bl	8000a94 <__aeabi_dcmplt>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	f040 80b5 	bne.w	800d668 <_dtoa_r+0x6b0>
 800d4fe:	9b06      	ldr	r3, [sp, #24]
 800d500:	1aeb      	subs	r3, r5, r3
 800d502:	429e      	cmp	r6, r3
 800d504:	f77f af7c 	ble.w	800d400 <_dtoa_r+0x448>
 800d508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d50c:	2200      	movs	r2, #0
 800d50e:	4b2f      	ldr	r3, [pc, #188]	; (800d5cc <_dtoa_r+0x614>)
 800d510:	f7f3 f84e 	bl	80005b0 <__aeabi_dmul>
 800d514:	2200      	movs	r2, #0
 800d516:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d51a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d51e:	4b2b      	ldr	r3, [pc, #172]	; (800d5cc <_dtoa_r+0x614>)
 800d520:	f7f3 f846 	bl	80005b0 <__aeabi_dmul>
 800d524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d528:	e7c3      	b.n	800d4b2 <_dtoa_r+0x4fa>
 800d52a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d52e:	f7f3 f83f 	bl	80005b0 <__aeabi_dmul>
 800d532:	9b06      	ldr	r3, [sp, #24]
 800d534:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d538:	199d      	adds	r5, r3, r6
 800d53a:	461e      	mov	r6, r3
 800d53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d540:	f7f3 fae6 	bl	8000b10 <__aeabi_d2iz>
 800d544:	9011      	str	r0, [sp, #68]	; 0x44
 800d546:	f7f2 ffc9 	bl	80004dc <__aeabi_i2d>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d552:	f7f2 fe75 	bl	8000240 <__aeabi_dsub>
 800d556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d55c:	3330      	adds	r3, #48	; 0x30
 800d55e:	f806 3b01 	strb.w	r3, [r6], #1
 800d562:	42ae      	cmp	r6, r5
 800d564:	f04f 0200 	mov.w	r2, #0
 800d568:	d124      	bne.n	800d5b4 <_dtoa_r+0x5fc>
 800d56a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d56e:	4b1a      	ldr	r3, [pc, #104]	; (800d5d8 <_dtoa_r+0x620>)
 800d570:	f7f2 fe68 	bl	8000244 <__adddf3>
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d57c:	f7f3 faa8 	bl	8000ad0 <__aeabi_dcmpgt>
 800d580:	2800      	cmp	r0, #0
 800d582:	d171      	bne.n	800d668 <_dtoa_r+0x6b0>
 800d584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d588:	2000      	movs	r0, #0
 800d58a:	4913      	ldr	r1, [pc, #76]	; (800d5d8 <_dtoa_r+0x620>)
 800d58c:	f7f2 fe58 	bl	8000240 <__aeabi_dsub>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d598:	f7f3 fa7c 	bl	8000a94 <__aeabi_dcmplt>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	f43f af2f 	beq.w	800d400 <_dtoa_r+0x448>
 800d5a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5a6:	1e6a      	subs	r2, r5, #1
 800d5a8:	2b30      	cmp	r3, #48	; 0x30
 800d5aa:	d001      	beq.n	800d5b0 <_dtoa_r+0x5f8>
 800d5ac:	46ba      	mov	sl, r7
 800d5ae:	e04a      	b.n	800d646 <_dtoa_r+0x68e>
 800d5b0:	4615      	mov	r5, r2
 800d5b2:	e7f6      	b.n	800d5a2 <_dtoa_r+0x5ea>
 800d5b4:	4b05      	ldr	r3, [pc, #20]	; (800d5cc <_dtoa_r+0x614>)
 800d5b6:	f7f2 fffb 	bl	80005b0 <__aeabi_dmul>
 800d5ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5be:	e7bd      	b.n	800d53c <_dtoa_r+0x584>
 800d5c0:	0800ec20 	.word	0x0800ec20
 800d5c4:	0800ebf8 	.word	0x0800ebf8
 800d5c8:	3ff00000 	.word	0x3ff00000
 800d5cc:	40240000 	.word	0x40240000
 800d5d0:	401c0000 	.word	0x401c0000
 800d5d4:	40140000 	.word	0x40140000
 800d5d8:	3fe00000 	.word	0x3fe00000
 800d5dc:	9d06      	ldr	r5, [sp, #24]
 800d5de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d5e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	4639      	mov	r1, r7
 800d5ea:	f7f3 f90b 	bl	8000804 <__aeabi_ddiv>
 800d5ee:	f7f3 fa8f 	bl	8000b10 <__aeabi_d2iz>
 800d5f2:	4681      	mov	r9, r0
 800d5f4:	f7f2 ff72 	bl	80004dc <__aeabi_i2d>
 800d5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5fc:	f7f2 ffd8 	bl	80005b0 <__aeabi_dmul>
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	4630      	mov	r0, r6
 800d606:	4639      	mov	r1, r7
 800d608:	f7f2 fe1a 	bl	8000240 <__aeabi_dsub>
 800d60c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800d610:	f805 6b01 	strb.w	r6, [r5], #1
 800d614:	9e06      	ldr	r6, [sp, #24]
 800d616:	4602      	mov	r2, r0
 800d618:	1bae      	subs	r6, r5, r6
 800d61a:	45b0      	cmp	r8, r6
 800d61c:	460b      	mov	r3, r1
 800d61e:	d135      	bne.n	800d68c <_dtoa_r+0x6d4>
 800d620:	f7f2 fe10 	bl	8000244 <__adddf3>
 800d624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d628:	4606      	mov	r6, r0
 800d62a:	460f      	mov	r7, r1
 800d62c:	f7f3 fa50 	bl	8000ad0 <__aeabi_dcmpgt>
 800d630:	b9c8      	cbnz	r0, 800d666 <_dtoa_r+0x6ae>
 800d632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d636:	4630      	mov	r0, r6
 800d638:	4639      	mov	r1, r7
 800d63a:	f7f3 fa21 	bl	8000a80 <__aeabi_dcmpeq>
 800d63e:	b110      	cbz	r0, 800d646 <_dtoa_r+0x68e>
 800d640:	f019 0f01 	tst.w	r9, #1
 800d644:	d10f      	bne.n	800d666 <_dtoa_r+0x6ae>
 800d646:	4659      	mov	r1, fp
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 fb85 	bl	800dd58 <_Bfree>
 800d64e:	2300      	movs	r3, #0
 800d650:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d652:	702b      	strb	r3, [r5, #0]
 800d654:	f10a 0301 	add.w	r3, sl, #1
 800d658:	6013      	str	r3, [r2, #0]
 800d65a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f43f acf3 	beq.w	800d048 <_dtoa_r+0x90>
 800d662:	601d      	str	r5, [r3, #0]
 800d664:	e4f0      	b.n	800d048 <_dtoa_r+0x90>
 800d666:	4657      	mov	r7, sl
 800d668:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d66c:	1e6b      	subs	r3, r5, #1
 800d66e:	2a39      	cmp	r2, #57	; 0x39
 800d670:	d106      	bne.n	800d680 <_dtoa_r+0x6c8>
 800d672:	9a06      	ldr	r2, [sp, #24]
 800d674:	429a      	cmp	r2, r3
 800d676:	d107      	bne.n	800d688 <_dtoa_r+0x6d0>
 800d678:	2330      	movs	r3, #48	; 0x30
 800d67a:	7013      	strb	r3, [r2, #0]
 800d67c:	4613      	mov	r3, r2
 800d67e:	3701      	adds	r7, #1
 800d680:	781a      	ldrb	r2, [r3, #0]
 800d682:	3201      	adds	r2, #1
 800d684:	701a      	strb	r2, [r3, #0]
 800d686:	e791      	b.n	800d5ac <_dtoa_r+0x5f4>
 800d688:	461d      	mov	r5, r3
 800d68a:	e7ed      	b.n	800d668 <_dtoa_r+0x6b0>
 800d68c:	2200      	movs	r2, #0
 800d68e:	4b99      	ldr	r3, [pc, #612]	; (800d8f4 <_dtoa_r+0x93c>)
 800d690:	f7f2 ff8e 	bl	80005b0 <__aeabi_dmul>
 800d694:	2200      	movs	r2, #0
 800d696:	2300      	movs	r3, #0
 800d698:	4606      	mov	r6, r0
 800d69a:	460f      	mov	r7, r1
 800d69c:	f7f3 f9f0 	bl	8000a80 <__aeabi_dcmpeq>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d09e      	beq.n	800d5e2 <_dtoa_r+0x62a>
 800d6a4:	e7cf      	b.n	800d646 <_dtoa_r+0x68e>
 800d6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6a8:	2a00      	cmp	r2, #0
 800d6aa:	f000 8088 	beq.w	800d7be <_dtoa_r+0x806>
 800d6ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d6b0:	2a01      	cmp	r2, #1
 800d6b2:	dc6d      	bgt.n	800d790 <_dtoa_r+0x7d8>
 800d6b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6b6:	2a00      	cmp	r2, #0
 800d6b8:	d066      	beq.n	800d788 <_dtoa_r+0x7d0>
 800d6ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d6be:	464d      	mov	r5, r9
 800d6c0:	9e08      	ldr	r6, [sp, #32]
 800d6c2:	9a07      	ldr	r2, [sp, #28]
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	441a      	add	r2, r3
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	4499      	add	r9, r3
 800d6cc:	9207      	str	r2, [sp, #28]
 800d6ce:	f000 fbe3 	bl	800de98 <__i2b>
 800d6d2:	4607      	mov	r7, r0
 800d6d4:	2d00      	cmp	r5, #0
 800d6d6:	dd0b      	ble.n	800d6f0 <_dtoa_r+0x738>
 800d6d8:	9b07      	ldr	r3, [sp, #28]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	dd08      	ble.n	800d6f0 <_dtoa_r+0x738>
 800d6de:	42ab      	cmp	r3, r5
 800d6e0:	bfa8      	it	ge
 800d6e2:	462b      	movge	r3, r5
 800d6e4:	9a07      	ldr	r2, [sp, #28]
 800d6e6:	eba9 0903 	sub.w	r9, r9, r3
 800d6ea:	1aed      	subs	r5, r5, r3
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	9307      	str	r3, [sp, #28]
 800d6f0:	9b08      	ldr	r3, [sp, #32]
 800d6f2:	b1eb      	cbz	r3, 800d730 <_dtoa_r+0x778>
 800d6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d065      	beq.n	800d7c6 <_dtoa_r+0x80e>
 800d6fa:	b18e      	cbz	r6, 800d720 <_dtoa_r+0x768>
 800d6fc:	4639      	mov	r1, r7
 800d6fe:	4632      	mov	r2, r6
 800d700:	4620      	mov	r0, r4
 800d702:	f000 fc67 	bl	800dfd4 <__pow5mult>
 800d706:	465a      	mov	r2, fp
 800d708:	4601      	mov	r1, r0
 800d70a:	4607      	mov	r7, r0
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 fbcc 	bl	800deaa <__multiply>
 800d712:	4659      	mov	r1, fp
 800d714:	900a      	str	r0, [sp, #40]	; 0x28
 800d716:	4620      	mov	r0, r4
 800d718:	f000 fb1e 	bl	800dd58 <_Bfree>
 800d71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d71e:	469b      	mov	fp, r3
 800d720:	9b08      	ldr	r3, [sp, #32]
 800d722:	1b9a      	subs	r2, r3, r6
 800d724:	d004      	beq.n	800d730 <_dtoa_r+0x778>
 800d726:	4659      	mov	r1, fp
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fc53 	bl	800dfd4 <__pow5mult>
 800d72e:	4683      	mov	fp, r0
 800d730:	2101      	movs	r1, #1
 800d732:	4620      	mov	r0, r4
 800d734:	f000 fbb0 	bl	800de98 <__i2b>
 800d738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d73a:	4606      	mov	r6, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 81c6 	beq.w	800dace <_dtoa_r+0xb16>
 800d742:	461a      	mov	r2, r3
 800d744:	4601      	mov	r1, r0
 800d746:	4620      	mov	r0, r4
 800d748:	f000 fc44 	bl	800dfd4 <__pow5mult>
 800d74c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d74e:	4606      	mov	r6, r0
 800d750:	2b01      	cmp	r3, #1
 800d752:	dc3e      	bgt.n	800d7d2 <_dtoa_r+0x81a>
 800d754:	9b02      	ldr	r3, [sp, #8]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d137      	bne.n	800d7ca <_dtoa_r+0x812>
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d760:	2b00      	cmp	r3, #0
 800d762:	d134      	bne.n	800d7ce <_dtoa_r+0x816>
 800d764:	9b03      	ldr	r3, [sp, #12]
 800d766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d76a:	0d1b      	lsrs	r3, r3, #20
 800d76c:	051b      	lsls	r3, r3, #20
 800d76e:	b12b      	cbz	r3, 800d77c <_dtoa_r+0x7c4>
 800d770:	9b07      	ldr	r3, [sp, #28]
 800d772:	f109 0901 	add.w	r9, r9, #1
 800d776:	3301      	adds	r3, #1
 800d778:	9307      	str	r3, [sp, #28]
 800d77a:	2301      	movs	r3, #1
 800d77c:	9308      	str	r3, [sp, #32]
 800d77e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d780:	2b00      	cmp	r3, #0
 800d782:	d128      	bne.n	800d7d6 <_dtoa_r+0x81e>
 800d784:	2001      	movs	r0, #1
 800d786:	e02e      	b.n	800d7e6 <_dtoa_r+0x82e>
 800d788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d78a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d78e:	e796      	b.n	800d6be <_dtoa_r+0x706>
 800d790:	9b08      	ldr	r3, [sp, #32]
 800d792:	f108 36ff 	add.w	r6, r8, #4294967295
 800d796:	42b3      	cmp	r3, r6
 800d798:	bfb7      	itett	lt
 800d79a:	9b08      	ldrlt	r3, [sp, #32]
 800d79c:	1b9e      	subge	r6, r3, r6
 800d79e:	1af2      	sublt	r2, r6, r3
 800d7a0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800d7a2:	bfbf      	itttt	lt
 800d7a4:	9608      	strlt	r6, [sp, #32]
 800d7a6:	189b      	addlt	r3, r3, r2
 800d7a8:	930c      	strlt	r3, [sp, #48]	; 0x30
 800d7aa:	2600      	movlt	r6, #0
 800d7ac:	f1b8 0f00 	cmp.w	r8, #0
 800d7b0:	bfb9      	ittee	lt
 800d7b2:	eba9 0508 	sublt.w	r5, r9, r8
 800d7b6:	2300      	movlt	r3, #0
 800d7b8:	464d      	movge	r5, r9
 800d7ba:	4643      	movge	r3, r8
 800d7bc:	e781      	b.n	800d6c2 <_dtoa_r+0x70a>
 800d7be:	9e08      	ldr	r6, [sp, #32]
 800d7c0:	464d      	mov	r5, r9
 800d7c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d7c4:	e786      	b.n	800d6d4 <_dtoa_r+0x71c>
 800d7c6:	9a08      	ldr	r2, [sp, #32]
 800d7c8:	e7ad      	b.n	800d726 <_dtoa_r+0x76e>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e7d6      	b.n	800d77c <_dtoa_r+0x7c4>
 800d7ce:	9b02      	ldr	r3, [sp, #8]
 800d7d0:	e7d4      	b.n	800d77c <_dtoa_r+0x7c4>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9308      	str	r3, [sp, #32]
 800d7d6:	6933      	ldr	r3, [r6, #16]
 800d7d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d7dc:	6918      	ldr	r0, [r3, #16]
 800d7de:	f000 fb0d 	bl	800ddfc <__hi0bits>
 800d7e2:	f1c0 0020 	rsb	r0, r0, #32
 800d7e6:	9b07      	ldr	r3, [sp, #28]
 800d7e8:	4418      	add	r0, r3
 800d7ea:	f010 001f 	ands.w	r0, r0, #31
 800d7ee:	d047      	beq.n	800d880 <_dtoa_r+0x8c8>
 800d7f0:	f1c0 0320 	rsb	r3, r0, #32
 800d7f4:	2b04      	cmp	r3, #4
 800d7f6:	dd3b      	ble.n	800d870 <_dtoa_r+0x8b8>
 800d7f8:	9b07      	ldr	r3, [sp, #28]
 800d7fa:	f1c0 001c 	rsb	r0, r0, #28
 800d7fe:	4481      	add	r9, r0
 800d800:	4405      	add	r5, r0
 800d802:	4403      	add	r3, r0
 800d804:	9307      	str	r3, [sp, #28]
 800d806:	f1b9 0f00 	cmp.w	r9, #0
 800d80a:	dd05      	ble.n	800d818 <_dtoa_r+0x860>
 800d80c:	4659      	mov	r1, fp
 800d80e:	464a      	mov	r2, r9
 800d810:	4620      	mov	r0, r4
 800d812:	f000 fc2d 	bl	800e070 <__lshift>
 800d816:	4683      	mov	fp, r0
 800d818:	9b07      	ldr	r3, [sp, #28]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	dd05      	ble.n	800d82a <_dtoa_r+0x872>
 800d81e:	4631      	mov	r1, r6
 800d820:	461a      	mov	r2, r3
 800d822:	4620      	mov	r0, r4
 800d824:	f000 fc24 	bl	800e070 <__lshift>
 800d828:	4606      	mov	r6, r0
 800d82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d82c:	b353      	cbz	r3, 800d884 <_dtoa_r+0x8cc>
 800d82e:	4631      	mov	r1, r6
 800d830:	4658      	mov	r0, fp
 800d832:	f000 fc71 	bl	800e118 <__mcmp>
 800d836:	2800      	cmp	r0, #0
 800d838:	da24      	bge.n	800d884 <_dtoa_r+0x8cc>
 800d83a:	2300      	movs	r3, #0
 800d83c:	4659      	mov	r1, fp
 800d83e:	220a      	movs	r2, #10
 800d840:	4620      	mov	r0, r4
 800d842:	f000 faa0 	bl	800dd86 <__multadd>
 800d846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d848:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d84c:	4683      	mov	fp, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 8144 	beq.w	800dadc <_dtoa_r+0xb24>
 800d854:	2300      	movs	r3, #0
 800d856:	4639      	mov	r1, r7
 800d858:	220a      	movs	r2, #10
 800d85a:	4620      	mov	r0, r4
 800d85c:	f000 fa93 	bl	800dd86 <__multadd>
 800d860:	9b04      	ldr	r3, [sp, #16]
 800d862:	4607      	mov	r7, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	dc4d      	bgt.n	800d904 <_dtoa_r+0x94c>
 800d868:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	dd4a      	ble.n	800d904 <_dtoa_r+0x94c>
 800d86e:	e011      	b.n	800d894 <_dtoa_r+0x8dc>
 800d870:	d0c9      	beq.n	800d806 <_dtoa_r+0x84e>
 800d872:	9a07      	ldr	r2, [sp, #28]
 800d874:	331c      	adds	r3, #28
 800d876:	441a      	add	r2, r3
 800d878:	4499      	add	r9, r3
 800d87a:	441d      	add	r5, r3
 800d87c:	4613      	mov	r3, r2
 800d87e:	e7c1      	b.n	800d804 <_dtoa_r+0x84c>
 800d880:	4603      	mov	r3, r0
 800d882:	e7f6      	b.n	800d872 <_dtoa_r+0x8ba>
 800d884:	f1b8 0f00 	cmp.w	r8, #0
 800d888:	dc36      	bgt.n	800d8f8 <_dtoa_r+0x940>
 800d88a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	dd33      	ble.n	800d8f8 <_dtoa_r+0x940>
 800d890:	f8cd 8010 	str.w	r8, [sp, #16]
 800d894:	9b04      	ldr	r3, [sp, #16]
 800d896:	b963      	cbnz	r3, 800d8b2 <_dtoa_r+0x8fa>
 800d898:	4631      	mov	r1, r6
 800d89a:	2205      	movs	r2, #5
 800d89c:	4620      	mov	r0, r4
 800d89e:	f000 fa72 	bl	800dd86 <__multadd>
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	4658      	mov	r0, fp
 800d8a8:	f000 fc36 	bl	800e118 <__mcmp>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	f73f add3 	bgt.w	800d458 <_dtoa_r+0x4a0>
 800d8b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d8b4:	9d06      	ldr	r5, [sp, #24]
 800d8b6:	ea6f 0a03 	mvn.w	sl, r3
 800d8ba:	f04f 0900 	mov.w	r9, #0
 800d8be:	4631      	mov	r1, r6
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f000 fa49 	bl	800dd58 <_Bfree>
 800d8c6:	2f00      	cmp	r7, #0
 800d8c8:	f43f aebd 	beq.w	800d646 <_dtoa_r+0x68e>
 800d8cc:	f1b9 0f00 	cmp.w	r9, #0
 800d8d0:	d005      	beq.n	800d8de <_dtoa_r+0x926>
 800d8d2:	45b9      	cmp	r9, r7
 800d8d4:	d003      	beq.n	800d8de <_dtoa_r+0x926>
 800d8d6:	4649      	mov	r1, r9
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 fa3d 	bl	800dd58 <_Bfree>
 800d8de:	4639      	mov	r1, r7
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f000 fa39 	bl	800dd58 <_Bfree>
 800d8e6:	e6ae      	b.n	800d646 <_dtoa_r+0x68e>
 800d8e8:	2600      	movs	r6, #0
 800d8ea:	4637      	mov	r7, r6
 800d8ec:	e7e1      	b.n	800d8b2 <_dtoa_r+0x8fa>
 800d8ee:	46ba      	mov	sl, r7
 800d8f0:	4637      	mov	r7, r6
 800d8f2:	e5b1      	b.n	800d458 <_dtoa_r+0x4a0>
 800d8f4:	40240000 	.word	0x40240000
 800d8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f000 80f3 	beq.w	800daea <_dtoa_r+0xb32>
 800d904:	2d00      	cmp	r5, #0
 800d906:	dd05      	ble.n	800d914 <_dtoa_r+0x95c>
 800d908:	4639      	mov	r1, r7
 800d90a:	462a      	mov	r2, r5
 800d90c:	4620      	mov	r0, r4
 800d90e:	f000 fbaf 	bl	800e070 <__lshift>
 800d912:	4607      	mov	r7, r0
 800d914:	9b08      	ldr	r3, [sp, #32]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d04c      	beq.n	800d9b4 <_dtoa_r+0x9fc>
 800d91a:	6879      	ldr	r1, [r7, #4]
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 f9e7 	bl	800dcf0 <_Balloc>
 800d922:	4605      	mov	r5, r0
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	f107 010c 	add.w	r1, r7, #12
 800d92a:	3202      	adds	r2, #2
 800d92c:	0092      	lsls	r2, r2, #2
 800d92e:	300c      	adds	r0, #12
 800d930:	f7fe fd80 	bl	800c434 <memcpy>
 800d934:	2201      	movs	r2, #1
 800d936:	4629      	mov	r1, r5
 800d938:	4620      	mov	r0, r4
 800d93a:	f000 fb99 	bl	800e070 <__lshift>
 800d93e:	46b9      	mov	r9, r7
 800d940:	4607      	mov	r7, r0
 800d942:	9b06      	ldr	r3, [sp, #24]
 800d944:	9307      	str	r3, [sp, #28]
 800d946:	9b02      	ldr	r3, [sp, #8]
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	9308      	str	r3, [sp, #32]
 800d94e:	4631      	mov	r1, r6
 800d950:	4658      	mov	r0, fp
 800d952:	f7ff faa1 	bl	800ce98 <quorem>
 800d956:	4649      	mov	r1, r9
 800d958:	4605      	mov	r5, r0
 800d95a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d95e:	4658      	mov	r0, fp
 800d960:	f000 fbda 	bl	800e118 <__mcmp>
 800d964:	463a      	mov	r2, r7
 800d966:	9002      	str	r0, [sp, #8]
 800d968:	4631      	mov	r1, r6
 800d96a:	4620      	mov	r0, r4
 800d96c:	f000 fbee 	bl	800e14c <__mdiff>
 800d970:	68c3      	ldr	r3, [r0, #12]
 800d972:	4602      	mov	r2, r0
 800d974:	bb03      	cbnz	r3, 800d9b8 <_dtoa_r+0xa00>
 800d976:	4601      	mov	r1, r0
 800d978:	9009      	str	r0, [sp, #36]	; 0x24
 800d97a:	4658      	mov	r0, fp
 800d97c:	f000 fbcc 	bl	800e118 <__mcmp>
 800d980:	4603      	mov	r3, r0
 800d982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d984:	4611      	mov	r1, r2
 800d986:	4620      	mov	r0, r4
 800d988:	9309      	str	r3, [sp, #36]	; 0x24
 800d98a:	f000 f9e5 	bl	800dd58 <_Bfree>
 800d98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d990:	b9a3      	cbnz	r3, 800d9bc <_dtoa_r+0xa04>
 800d992:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d994:	b992      	cbnz	r2, 800d9bc <_dtoa_r+0xa04>
 800d996:	9a08      	ldr	r2, [sp, #32]
 800d998:	b982      	cbnz	r2, 800d9bc <_dtoa_r+0xa04>
 800d99a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d99e:	d029      	beq.n	800d9f4 <_dtoa_r+0xa3c>
 800d9a0:	9b02      	ldr	r3, [sp, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	dd01      	ble.n	800d9aa <_dtoa_r+0x9f2>
 800d9a6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d9aa:	9b07      	ldr	r3, [sp, #28]
 800d9ac:	1c5d      	adds	r5, r3, #1
 800d9ae:	f883 8000 	strb.w	r8, [r3]
 800d9b2:	e784      	b.n	800d8be <_dtoa_r+0x906>
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	e7c2      	b.n	800d93e <_dtoa_r+0x986>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e7e3      	b.n	800d984 <_dtoa_r+0x9cc>
 800d9bc:	9a02      	ldr	r2, [sp, #8]
 800d9be:	2a00      	cmp	r2, #0
 800d9c0:	db04      	blt.n	800d9cc <_dtoa_r+0xa14>
 800d9c2:	d123      	bne.n	800da0c <_dtoa_r+0xa54>
 800d9c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d9c6:	bb0a      	cbnz	r2, 800da0c <_dtoa_r+0xa54>
 800d9c8:	9a08      	ldr	r2, [sp, #32]
 800d9ca:	b9fa      	cbnz	r2, 800da0c <_dtoa_r+0xa54>
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	ddec      	ble.n	800d9aa <_dtoa_r+0x9f2>
 800d9d0:	4659      	mov	r1, fp
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f000 fb4b 	bl	800e070 <__lshift>
 800d9da:	4631      	mov	r1, r6
 800d9dc:	4683      	mov	fp, r0
 800d9de:	f000 fb9b 	bl	800e118 <__mcmp>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	dc03      	bgt.n	800d9ee <_dtoa_r+0xa36>
 800d9e6:	d1e0      	bne.n	800d9aa <_dtoa_r+0x9f2>
 800d9e8:	f018 0f01 	tst.w	r8, #1
 800d9ec:	d0dd      	beq.n	800d9aa <_dtoa_r+0x9f2>
 800d9ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d9f2:	d1d8      	bne.n	800d9a6 <_dtoa_r+0x9ee>
 800d9f4:	9b07      	ldr	r3, [sp, #28]
 800d9f6:	9a07      	ldr	r2, [sp, #28]
 800d9f8:	1c5d      	adds	r5, r3, #1
 800d9fa:	2339      	movs	r3, #57	; 0x39
 800d9fc:	7013      	strb	r3, [r2, #0]
 800d9fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da02:	1e6a      	subs	r2, r5, #1
 800da04:	2b39      	cmp	r3, #57	; 0x39
 800da06:	d04d      	beq.n	800daa4 <_dtoa_r+0xaec>
 800da08:	3301      	adds	r3, #1
 800da0a:	e052      	b.n	800dab2 <_dtoa_r+0xafa>
 800da0c:	9a07      	ldr	r2, [sp, #28]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f102 0501 	add.w	r5, r2, #1
 800da14:	dd06      	ble.n	800da24 <_dtoa_r+0xa6c>
 800da16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da1a:	d0eb      	beq.n	800d9f4 <_dtoa_r+0xa3c>
 800da1c:	f108 0801 	add.w	r8, r8, #1
 800da20:	9b07      	ldr	r3, [sp, #28]
 800da22:	e7c4      	b.n	800d9ae <_dtoa_r+0x9f6>
 800da24:	9b06      	ldr	r3, [sp, #24]
 800da26:	9a04      	ldr	r2, [sp, #16]
 800da28:	1aeb      	subs	r3, r5, r3
 800da2a:	4293      	cmp	r3, r2
 800da2c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800da30:	d021      	beq.n	800da76 <_dtoa_r+0xabe>
 800da32:	4659      	mov	r1, fp
 800da34:	2300      	movs	r3, #0
 800da36:	220a      	movs	r2, #10
 800da38:	4620      	mov	r0, r4
 800da3a:	f000 f9a4 	bl	800dd86 <__multadd>
 800da3e:	45b9      	cmp	r9, r7
 800da40:	4683      	mov	fp, r0
 800da42:	f04f 0300 	mov.w	r3, #0
 800da46:	f04f 020a 	mov.w	r2, #10
 800da4a:	4649      	mov	r1, r9
 800da4c:	4620      	mov	r0, r4
 800da4e:	d105      	bne.n	800da5c <_dtoa_r+0xaa4>
 800da50:	f000 f999 	bl	800dd86 <__multadd>
 800da54:	4681      	mov	r9, r0
 800da56:	4607      	mov	r7, r0
 800da58:	9507      	str	r5, [sp, #28]
 800da5a:	e778      	b.n	800d94e <_dtoa_r+0x996>
 800da5c:	f000 f993 	bl	800dd86 <__multadd>
 800da60:	4639      	mov	r1, r7
 800da62:	4681      	mov	r9, r0
 800da64:	2300      	movs	r3, #0
 800da66:	220a      	movs	r2, #10
 800da68:	4620      	mov	r0, r4
 800da6a:	f000 f98c 	bl	800dd86 <__multadd>
 800da6e:	4607      	mov	r7, r0
 800da70:	e7f2      	b.n	800da58 <_dtoa_r+0xaa0>
 800da72:	f04f 0900 	mov.w	r9, #0
 800da76:	4659      	mov	r1, fp
 800da78:	2201      	movs	r2, #1
 800da7a:	4620      	mov	r0, r4
 800da7c:	f000 faf8 	bl	800e070 <__lshift>
 800da80:	4631      	mov	r1, r6
 800da82:	4683      	mov	fp, r0
 800da84:	f000 fb48 	bl	800e118 <__mcmp>
 800da88:	2800      	cmp	r0, #0
 800da8a:	dcb8      	bgt.n	800d9fe <_dtoa_r+0xa46>
 800da8c:	d102      	bne.n	800da94 <_dtoa_r+0xadc>
 800da8e:	f018 0f01 	tst.w	r8, #1
 800da92:	d1b4      	bne.n	800d9fe <_dtoa_r+0xa46>
 800da94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da98:	1e6a      	subs	r2, r5, #1
 800da9a:	2b30      	cmp	r3, #48	; 0x30
 800da9c:	f47f af0f 	bne.w	800d8be <_dtoa_r+0x906>
 800daa0:	4615      	mov	r5, r2
 800daa2:	e7f7      	b.n	800da94 <_dtoa_r+0xadc>
 800daa4:	9b06      	ldr	r3, [sp, #24]
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d105      	bne.n	800dab6 <_dtoa_r+0xafe>
 800daaa:	2331      	movs	r3, #49	; 0x31
 800daac:	9a06      	ldr	r2, [sp, #24]
 800daae:	f10a 0a01 	add.w	sl, sl, #1
 800dab2:	7013      	strb	r3, [r2, #0]
 800dab4:	e703      	b.n	800d8be <_dtoa_r+0x906>
 800dab6:	4615      	mov	r5, r2
 800dab8:	e7a1      	b.n	800d9fe <_dtoa_r+0xa46>
 800daba:	4b17      	ldr	r3, [pc, #92]	; (800db18 <_dtoa_r+0xb60>)
 800dabc:	f7ff bae1 	b.w	800d082 <_dtoa_r+0xca>
 800dac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f47f aabb 	bne.w	800d03e <_dtoa_r+0x86>
 800dac8:	4b14      	ldr	r3, [pc, #80]	; (800db1c <_dtoa_r+0xb64>)
 800daca:	f7ff bada 	b.w	800d082 <_dtoa_r+0xca>
 800dace:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	f77f ae3f 	ble.w	800d754 <_dtoa_r+0x79c>
 800dad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dad8:	9308      	str	r3, [sp, #32]
 800dada:	e653      	b.n	800d784 <_dtoa_r+0x7cc>
 800dadc:	9b04      	ldr	r3, [sp, #16]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	dc03      	bgt.n	800daea <_dtoa_r+0xb32>
 800dae2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	f73f aed5 	bgt.w	800d894 <_dtoa_r+0x8dc>
 800daea:	9d06      	ldr	r5, [sp, #24]
 800daec:	4631      	mov	r1, r6
 800daee:	4658      	mov	r0, fp
 800daf0:	f7ff f9d2 	bl	800ce98 <quorem>
 800daf4:	9b06      	ldr	r3, [sp, #24]
 800daf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dafa:	f805 8b01 	strb.w	r8, [r5], #1
 800dafe:	9a04      	ldr	r2, [sp, #16]
 800db00:	1aeb      	subs	r3, r5, r3
 800db02:	429a      	cmp	r2, r3
 800db04:	ddb5      	ble.n	800da72 <_dtoa_r+0xaba>
 800db06:	4659      	mov	r1, fp
 800db08:	2300      	movs	r3, #0
 800db0a:	220a      	movs	r2, #10
 800db0c:	4620      	mov	r0, r4
 800db0e:	f000 f93a 	bl	800dd86 <__multadd>
 800db12:	4683      	mov	fp, r0
 800db14:	e7ea      	b.n	800daec <_dtoa_r+0xb34>
 800db16:	bf00      	nop
 800db18:	0800eb60 	.word	0x0800eb60
 800db1c:	0800eb84 	.word	0x0800eb84

0800db20 <std>:
 800db20:	2300      	movs	r3, #0
 800db22:	b510      	push	{r4, lr}
 800db24:	4604      	mov	r4, r0
 800db26:	e9c0 3300 	strd	r3, r3, [r0]
 800db2a:	6083      	str	r3, [r0, #8]
 800db2c:	8181      	strh	r1, [r0, #12]
 800db2e:	6643      	str	r3, [r0, #100]	; 0x64
 800db30:	81c2      	strh	r2, [r0, #14]
 800db32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db36:	6183      	str	r3, [r0, #24]
 800db38:	4619      	mov	r1, r3
 800db3a:	2208      	movs	r2, #8
 800db3c:	305c      	adds	r0, #92	; 0x5c
 800db3e:	f7fe fc84 	bl	800c44a <memset>
 800db42:	4b05      	ldr	r3, [pc, #20]	; (800db58 <std+0x38>)
 800db44:	6224      	str	r4, [r4, #32]
 800db46:	6263      	str	r3, [r4, #36]	; 0x24
 800db48:	4b04      	ldr	r3, [pc, #16]	; (800db5c <std+0x3c>)
 800db4a:	62a3      	str	r3, [r4, #40]	; 0x28
 800db4c:	4b04      	ldr	r3, [pc, #16]	; (800db60 <std+0x40>)
 800db4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db50:	4b04      	ldr	r3, [pc, #16]	; (800db64 <std+0x44>)
 800db52:	6323      	str	r3, [r4, #48]	; 0x30
 800db54:	bd10      	pop	{r4, pc}
 800db56:	bf00      	nop
 800db58:	0800e53d 	.word	0x0800e53d
 800db5c:	0800e55f 	.word	0x0800e55f
 800db60:	0800e597 	.word	0x0800e597
 800db64:	0800e5bb 	.word	0x0800e5bb

0800db68 <_cleanup_r>:
 800db68:	4901      	ldr	r1, [pc, #4]	; (800db70 <_cleanup_r+0x8>)
 800db6a:	f000 b885 	b.w	800dc78 <_fwalk_reent>
 800db6e:	bf00      	nop
 800db70:	0800e895 	.word	0x0800e895

0800db74 <__sfmoreglue>:
 800db74:	b570      	push	{r4, r5, r6, lr}
 800db76:	2568      	movs	r5, #104	; 0x68
 800db78:	1e4a      	subs	r2, r1, #1
 800db7a:	4355      	muls	r5, r2
 800db7c:	460e      	mov	r6, r1
 800db7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db82:	f7fe fcb7 	bl	800c4f4 <_malloc_r>
 800db86:	4604      	mov	r4, r0
 800db88:	b140      	cbz	r0, 800db9c <__sfmoreglue+0x28>
 800db8a:	2100      	movs	r1, #0
 800db8c:	e9c0 1600 	strd	r1, r6, [r0]
 800db90:	300c      	adds	r0, #12
 800db92:	60a0      	str	r0, [r4, #8]
 800db94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db98:	f7fe fc57 	bl	800c44a <memset>
 800db9c:	4620      	mov	r0, r4
 800db9e:	bd70      	pop	{r4, r5, r6, pc}

0800dba0 <__sinit>:
 800dba0:	6983      	ldr	r3, [r0, #24]
 800dba2:	b510      	push	{r4, lr}
 800dba4:	4604      	mov	r4, r0
 800dba6:	bb33      	cbnz	r3, 800dbf6 <__sinit+0x56>
 800dba8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800dbac:	6503      	str	r3, [r0, #80]	; 0x50
 800dbae:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <__sinit+0x58>)
 800dbb0:	4a12      	ldr	r2, [pc, #72]	; (800dbfc <__sinit+0x5c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	6282      	str	r2, [r0, #40]	; 0x28
 800dbb6:	4298      	cmp	r0, r3
 800dbb8:	bf04      	itt	eq
 800dbba:	2301      	moveq	r3, #1
 800dbbc:	6183      	streq	r3, [r0, #24]
 800dbbe:	f000 f81f 	bl	800dc00 <__sfp>
 800dbc2:	6060      	str	r0, [r4, #4]
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f000 f81b 	bl	800dc00 <__sfp>
 800dbca:	60a0      	str	r0, [r4, #8]
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f000 f817 	bl	800dc00 <__sfp>
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	60e0      	str	r0, [r4, #12]
 800dbd6:	2104      	movs	r1, #4
 800dbd8:	6860      	ldr	r0, [r4, #4]
 800dbda:	f7ff ffa1 	bl	800db20 <std>
 800dbde:	2201      	movs	r2, #1
 800dbe0:	2109      	movs	r1, #9
 800dbe2:	68a0      	ldr	r0, [r4, #8]
 800dbe4:	f7ff ff9c 	bl	800db20 <std>
 800dbe8:	2202      	movs	r2, #2
 800dbea:	2112      	movs	r1, #18
 800dbec:	68e0      	ldr	r0, [r4, #12]
 800dbee:	f7ff ff97 	bl	800db20 <std>
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	61a3      	str	r3, [r4, #24]
 800dbf6:	bd10      	pop	{r4, pc}
 800dbf8:	0800eb4c 	.word	0x0800eb4c
 800dbfc:	0800db69 	.word	0x0800db69

0800dc00 <__sfp>:
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc02:	4b1b      	ldr	r3, [pc, #108]	; (800dc70 <__sfp+0x70>)
 800dc04:	4607      	mov	r7, r0
 800dc06:	681e      	ldr	r6, [r3, #0]
 800dc08:	69b3      	ldr	r3, [r6, #24]
 800dc0a:	b913      	cbnz	r3, 800dc12 <__sfp+0x12>
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7ff ffc7 	bl	800dba0 <__sinit>
 800dc12:	3648      	adds	r6, #72	; 0x48
 800dc14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	d503      	bpl.n	800dc24 <__sfp+0x24>
 800dc1c:	6833      	ldr	r3, [r6, #0]
 800dc1e:	b133      	cbz	r3, 800dc2e <__sfp+0x2e>
 800dc20:	6836      	ldr	r6, [r6, #0]
 800dc22:	e7f7      	b.n	800dc14 <__sfp+0x14>
 800dc24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc28:	b16d      	cbz	r5, 800dc46 <__sfp+0x46>
 800dc2a:	3468      	adds	r4, #104	; 0x68
 800dc2c:	e7f4      	b.n	800dc18 <__sfp+0x18>
 800dc2e:	2104      	movs	r1, #4
 800dc30:	4638      	mov	r0, r7
 800dc32:	f7ff ff9f 	bl	800db74 <__sfmoreglue>
 800dc36:	6030      	str	r0, [r6, #0]
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d1f1      	bne.n	800dc20 <__sfp+0x20>
 800dc3c:	230c      	movs	r3, #12
 800dc3e:	4604      	mov	r4, r0
 800dc40:	603b      	str	r3, [r7, #0]
 800dc42:	4620      	mov	r0, r4
 800dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc46:	4b0b      	ldr	r3, [pc, #44]	; (800dc74 <__sfp+0x74>)
 800dc48:	6665      	str	r5, [r4, #100]	; 0x64
 800dc4a:	e9c4 5500 	strd	r5, r5, [r4]
 800dc4e:	60a5      	str	r5, [r4, #8]
 800dc50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dc54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dc58:	2208      	movs	r2, #8
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc60:	f7fe fbf3 	bl	800c44a <memset>
 800dc64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc6c:	e7e9      	b.n	800dc42 <__sfp+0x42>
 800dc6e:	bf00      	nop
 800dc70:	0800eb4c 	.word	0x0800eb4c
 800dc74:	ffff0001 	.word	0xffff0001

0800dc78 <_fwalk_reent>:
 800dc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc7c:	4680      	mov	r8, r0
 800dc7e:	4689      	mov	r9, r1
 800dc80:	2600      	movs	r6, #0
 800dc82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc86:	b914      	cbnz	r4, 800dc8e <_fwalk_reent+0x16>
 800dc88:	4630      	mov	r0, r6
 800dc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800dc92:	3f01      	subs	r7, #1
 800dc94:	d501      	bpl.n	800dc9a <_fwalk_reent+0x22>
 800dc96:	6824      	ldr	r4, [r4, #0]
 800dc98:	e7f5      	b.n	800dc86 <_fwalk_reent+0xe>
 800dc9a:	89ab      	ldrh	r3, [r5, #12]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d907      	bls.n	800dcb0 <_fwalk_reent+0x38>
 800dca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dca4:	3301      	adds	r3, #1
 800dca6:	d003      	beq.n	800dcb0 <_fwalk_reent+0x38>
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4640      	mov	r0, r8
 800dcac:	47c8      	blx	r9
 800dcae:	4306      	orrs	r6, r0
 800dcb0:	3568      	adds	r5, #104	; 0x68
 800dcb2:	e7ee      	b.n	800dc92 <_fwalk_reent+0x1a>

0800dcb4 <_localeconv_r>:
 800dcb4:	4b04      	ldr	r3, [pc, #16]	; (800dcc8 <_localeconv_r+0x14>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6a18      	ldr	r0, [r3, #32]
 800dcba:	4b04      	ldr	r3, [pc, #16]	; (800dccc <_localeconv_r+0x18>)
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	bf08      	it	eq
 800dcc0:	4618      	moveq	r0, r3
 800dcc2:	30f0      	adds	r0, #240	; 0xf0
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	20000184 	.word	0x20000184
 800dccc:	200001e8 	.word	0x200001e8

0800dcd0 <memchr>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	b2c9      	uxtb	r1, r1
 800dcd4:	4402      	add	r2, r0
 800dcd6:	4290      	cmp	r0, r2
 800dcd8:	4603      	mov	r3, r0
 800dcda:	d101      	bne.n	800dce0 <memchr+0x10>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	e003      	b.n	800dce8 <memchr+0x18>
 800dce0:	781c      	ldrb	r4, [r3, #0]
 800dce2:	3001      	adds	r0, #1
 800dce4:	428c      	cmp	r4, r1
 800dce6:	d1f6      	bne.n	800dcd6 <memchr+0x6>
 800dce8:	4618      	mov	r0, r3
 800dcea:	bd10      	pop	{r4, pc}

0800dcec <__malloc_lock>:
 800dcec:	4770      	bx	lr

0800dcee <__malloc_unlock>:
 800dcee:	4770      	bx	lr

0800dcf0 <_Balloc>:
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	460e      	mov	r6, r1
 800dcf8:	b93d      	cbnz	r5, 800dd0a <_Balloc+0x1a>
 800dcfa:	2010      	movs	r0, #16
 800dcfc:	f7fe fb92 	bl	800c424 <malloc>
 800dd00:	6260      	str	r0, [r4, #36]	; 0x24
 800dd02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd06:	6005      	str	r5, [r0, #0]
 800dd08:	60c5      	str	r5, [r0, #12]
 800dd0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd0c:	68eb      	ldr	r3, [r5, #12]
 800dd0e:	b183      	cbz	r3, 800dd32 <_Balloc+0x42>
 800dd10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd18:	b9b8      	cbnz	r0, 800dd4a <_Balloc+0x5a>
 800dd1a:	2101      	movs	r1, #1
 800dd1c:	fa01 f506 	lsl.w	r5, r1, r6
 800dd20:	1d6a      	adds	r2, r5, #5
 800dd22:	0092      	lsls	r2, r2, #2
 800dd24:	4620      	mov	r0, r4
 800dd26:	f000 fabe 	bl	800e2a6 <_calloc_r>
 800dd2a:	b160      	cbz	r0, 800dd46 <_Balloc+0x56>
 800dd2c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dd30:	e00e      	b.n	800dd50 <_Balloc+0x60>
 800dd32:	2221      	movs	r2, #33	; 0x21
 800dd34:	2104      	movs	r1, #4
 800dd36:	4620      	mov	r0, r4
 800dd38:	f000 fab5 	bl	800e2a6 <_calloc_r>
 800dd3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd3e:	60e8      	str	r0, [r5, #12]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1e4      	bne.n	800dd10 <_Balloc+0x20>
 800dd46:	2000      	movs	r0, #0
 800dd48:	bd70      	pop	{r4, r5, r6, pc}
 800dd4a:	6802      	ldr	r2, [r0, #0]
 800dd4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dd50:	2300      	movs	r3, #0
 800dd52:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd56:	e7f7      	b.n	800dd48 <_Balloc+0x58>

0800dd58 <_Bfree>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	460d      	mov	r5, r1
 800dd60:	b93c      	cbnz	r4, 800dd72 <_Bfree+0x1a>
 800dd62:	2010      	movs	r0, #16
 800dd64:	f7fe fb5e 	bl	800c424 <malloc>
 800dd68:	6270      	str	r0, [r6, #36]	; 0x24
 800dd6a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd6e:	6004      	str	r4, [r0, #0]
 800dd70:	60c4      	str	r4, [r0, #12]
 800dd72:	b13d      	cbz	r5, 800dd84 <_Bfree+0x2c>
 800dd74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd76:	686a      	ldr	r2, [r5, #4]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd7e:	6029      	str	r1, [r5, #0]
 800dd80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dd84:	bd70      	pop	{r4, r5, r6, pc}

0800dd86 <__multadd>:
 800dd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8a:	461f      	mov	r7, r3
 800dd8c:	4606      	mov	r6, r0
 800dd8e:	460c      	mov	r4, r1
 800dd90:	2300      	movs	r3, #0
 800dd92:	690d      	ldr	r5, [r1, #16]
 800dd94:	f101 0c14 	add.w	ip, r1, #20
 800dd98:	f8dc 0000 	ldr.w	r0, [ip]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b281      	uxth	r1, r0
 800dda0:	fb02 7101 	mla	r1, r2, r1, r7
 800dda4:	0c00      	lsrs	r0, r0, #16
 800dda6:	0c0f      	lsrs	r7, r1, #16
 800dda8:	fb02 7000 	mla	r0, r2, r0, r7
 800ddac:	b289      	uxth	r1, r1
 800ddae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ddb2:	429d      	cmp	r5, r3
 800ddb4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ddb8:	f84c 1b04 	str.w	r1, [ip], #4
 800ddbc:	dcec      	bgt.n	800dd98 <__multadd+0x12>
 800ddbe:	b1d7      	cbz	r7, 800ddf6 <__multadd+0x70>
 800ddc0:	68a3      	ldr	r3, [r4, #8]
 800ddc2:	42ab      	cmp	r3, r5
 800ddc4:	dc12      	bgt.n	800ddec <__multadd+0x66>
 800ddc6:	6861      	ldr	r1, [r4, #4]
 800ddc8:	4630      	mov	r0, r6
 800ddca:	3101      	adds	r1, #1
 800ddcc:	f7ff ff90 	bl	800dcf0 <_Balloc>
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	6922      	ldr	r2, [r4, #16]
 800ddd4:	f104 010c 	add.w	r1, r4, #12
 800ddd8:	3202      	adds	r2, #2
 800ddda:	0092      	lsls	r2, r2, #2
 800dddc:	300c      	adds	r0, #12
 800ddde:	f7fe fb29 	bl	800c434 <memcpy>
 800dde2:	4621      	mov	r1, r4
 800dde4:	4630      	mov	r0, r6
 800dde6:	f7ff ffb7 	bl	800dd58 <_Bfree>
 800ddea:	4644      	mov	r4, r8
 800ddec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddf0:	3501      	adds	r5, #1
 800ddf2:	615f      	str	r7, [r3, #20]
 800ddf4:	6125      	str	r5, [r4, #16]
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ddfc <__hi0bits>:
 800ddfc:	0c02      	lsrs	r2, r0, #16
 800ddfe:	0412      	lsls	r2, r2, #16
 800de00:	4603      	mov	r3, r0
 800de02:	b9b2      	cbnz	r2, 800de32 <__hi0bits+0x36>
 800de04:	0403      	lsls	r3, r0, #16
 800de06:	2010      	movs	r0, #16
 800de08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800de0c:	bf04      	itt	eq
 800de0e:	021b      	lsleq	r3, r3, #8
 800de10:	3008      	addeq	r0, #8
 800de12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800de16:	bf04      	itt	eq
 800de18:	011b      	lsleq	r3, r3, #4
 800de1a:	3004      	addeq	r0, #4
 800de1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800de20:	bf04      	itt	eq
 800de22:	009b      	lsleq	r3, r3, #2
 800de24:	3002      	addeq	r0, #2
 800de26:	2b00      	cmp	r3, #0
 800de28:	db06      	blt.n	800de38 <__hi0bits+0x3c>
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	d503      	bpl.n	800de36 <__hi0bits+0x3a>
 800de2e:	3001      	adds	r0, #1
 800de30:	4770      	bx	lr
 800de32:	2000      	movs	r0, #0
 800de34:	e7e8      	b.n	800de08 <__hi0bits+0xc>
 800de36:	2020      	movs	r0, #32
 800de38:	4770      	bx	lr

0800de3a <__lo0bits>:
 800de3a:	6803      	ldr	r3, [r0, #0]
 800de3c:	4601      	mov	r1, r0
 800de3e:	f013 0207 	ands.w	r2, r3, #7
 800de42:	d00b      	beq.n	800de5c <__lo0bits+0x22>
 800de44:	07da      	lsls	r2, r3, #31
 800de46:	d423      	bmi.n	800de90 <__lo0bits+0x56>
 800de48:	0798      	lsls	r0, r3, #30
 800de4a:	bf49      	itett	mi
 800de4c:	085b      	lsrmi	r3, r3, #1
 800de4e:	089b      	lsrpl	r3, r3, #2
 800de50:	2001      	movmi	r0, #1
 800de52:	600b      	strmi	r3, [r1, #0]
 800de54:	bf5c      	itt	pl
 800de56:	600b      	strpl	r3, [r1, #0]
 800de58:	2002      	movpl	r0, #2
 800de5a:	4770      	bx	lr
 800de5c:	b298      	uxth	r0, r3
 800de5e:	b9a8      	cbnz	r0, 800de8c <__lo0bits+0x52>
 800de60:	2010      	movs	r0, #16
 800de62:	0c1b      	lsrs	r3, r3, #16
 800de64:	f013 0fff 	tst.w	r3, #255	; 0xff
 800de68:	bf04      	itt	eq
 800de6a:	0a1b      	lsreq	r3, r3, #8
 800de6c:	3008      	addeq	r0, #8
 800de6e:	071a      	lsls	r2, r3, #28
 800de70:	bf04      	itt	eq
 800de72:	091b      	lsreq	r3, r3, #4
 800de74:	3004      	addeq	r0, #4
 800de76:	079a      	lsls	r2, r3, #30
 800de78:	bf04      	itt	eq
 800de7a:	089b      	lsreq	r3, r3, #2
 800de7c:	3002      	addeq	r0, #2
 800de7e:	07da      	lsls	r2, r3, #31
 800de80:	d402      	bmi.n	800de88 <__lo0bits+0x4e>
 800de82:	085b      	lsrs	r3, r3, #1
 800de84:	d006      	beq.n	800de94 <__lo0bits+0x5a>
 800de86:	3001      	adds	r0, #1
 800de88:	600b      	str	r3, [r1, #0]
 800de8a:	4770      	bx	lr
 800de8c:	4610      	mov	r0, r2
 800de8e:	e7e9      	b.n	800de64 <__lo0bits+0x2a>
 800de90:	2000      	movs	r0, #0
 800de92:	4770      	bx	lr
 800de94:	2020      	movs	r0, #32
 800de96:	4770      	bx	lr

0800de98 <__i2b>:
 800de98:	b510      	push	{r4, lr}
 800de9a:	460c      	mov	r4, r1
 800de9c:	2101      	movs	r1, #1
 800de9e:	f7ff ff27 	bl	800dcf0 <_Balloc>
 800dea2:	2201      	movs	r2, #1
 800dea4:	6144      	str	r4, [r0, #20]
 800dea6:	6102      	str	r2, [r0, #16]
 800dea8:	bd10      	pop	{r4, pc}

0800deaa <__multiply>:
 800deaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deae:	4614      	mov	r4, r2
 800deb0:	690a      	ldr	r2, [r1, #16]
 800deb2:	6923      	ldr	r3, [r4, #16]
 800deb4:	4688      	mov	r8, r1
 800deb6:	429a      	cmp	r2, r3
 800deb8:	bfbe      	ittt	lt
 800deba:	460b      	movlt	r3, r1
 800debc:	46a0      	movlt	r8, r4
 800debe:	461c      	movlt	r4, r3
 800dec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dec4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dec8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800decc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ded0:	eb07 0609 	add.w	r6, r7, r9
 800ded4:	42b3      	cmp	r3, r6
 800ded6:	bfb8      	it	lt
 800ded8:	3101      	addlt	r1, #1
 800deda:	f7ff ff09 	bl	800dcf0 <_Balloc>
 800dede:	f100 0514 	add.w	r5, r0, #20
 800dee2:	462b      	mov	r3, r5
 800dee4:	2200      	movs	r2, #0
 800dee6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800deea:	4573      	cmp	r3, lr
 800deec:	d316      	bcc.n	800df1c <__multiply+0x72>
 800deee:	f104 0214 	add.w	r2, r4, #20
 800def2:	f108 0114 	add.w	r1, r8, #20
 800def6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800defa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	9b00      	ldr	r3, [sp, #0]
 800df02:	9201      	str	r2, [sp, #4]
 800df04:	4293      	cmp	r3, r2
 800df06:	d80c      	bhi.n	800df22 <__multiply+0x78>
 800df08:	2e00      	cmp	r6, #0
 800df0a:	dd03      	ble.n	800df14 <__multiply+0x6a>
 800df0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800df10:	2b00      	cmp	r3, #0
 800df12:	d05d      	beq.n	800dfd0 <__multiply+0x126>
 800df14:	6106      	str	r6, [r0, #16]
 800df16:	b003      	add	sp, #12
 800df18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1c:	f843 2b04 	str.w	r2, [r3], #4
 800df20:	e7e3      	b.n	800deea <__multiply+0x40>
 800df22:	f8b2 b000 	ldrh.w	fp, [r2]
 800df26:	f1bb 0f00 	cmp.w	fp, #0
 800df2a:	d023      	beq.n	800df74 <__multiply+0xca>
 800df2c:	4689      	mov	r9, r1
 800df2e:	46ac      	mov	ip, r5
 800df30:	f04f 0800 	mov.w	r8, #0
 800df34:	f859 4b04 	ldr.w	r4, [r9], #4
 800df38:	f8dc a000 	ldr.w	sl, [ip]
 800df3c:	b2a3      	uxth	r3, r4
 800df3e:	fa1f fa8a 	uxth.w	sl, sl
 800df42:	fb0b a303 	mla	r3, fp, r3, sl
 800df46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800df4a:	f8dc 4000 	ldr.w	r4, [ip]
 800df4e:	4443      	add	r3, r8
 800df50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800df54:	fb0b 840a 	mla	r4, fp, sl, r8
 800df58:	46e2      	mov	sl, ip
 800df5a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800df5e:	b29b      	uxth	r3, r3
 800df60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800df64:	454f      	cmp	r7, r9
 800df66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800df6a:	f84a 3b04 	str.w	r3, [sl], #4
 800df6e:	d82b      	bhi.n	800dfc8 <__multiply+0x11e>
 800df70:	f8cc 8004 	str.w	r8, [ip, #4]
 800df74:	9b01      	ldr	r3, [sp, #4]
 800df76:	3204      	adds	r2, #4
 800df78:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800df7c:	f1ba 0f00 	cmp.w	sl, #0
 800df80:	d020      	beq.n	800dfc4 <__multiply+0x11a>
 800df82:	4689      	mov	r9, r1
 800df84:	46a8      	mov	r8, r5
 800df86:	f04f 0b00 	mov.w	fp, #0
 800df8a:	682b      	ldr	r3, [r5, #0]
 800df8c:	f8b9 c000 	ldrh.w	ip, [r9]
 800df90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800df94:	b29b      	uxth	r3, r3
 800df96:	fb0a 440c 	mla	r4, sl, ip, r4
 800df9a:	46c4      	mov	ip, r8
 800df9c:	445c      	add	r4, fp
 800df9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dfa2:	f84c 3b04 	str.w	r3, [ip], #4
 800dfa6:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfaa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dfae:	0c1b      	lsrs	r3, r3, #16
 800dfb0:	fb0a b303 	mla	r3, sl, r3, fp
 800dfb4:	454f      	cmp	r7, r9
 800dfb6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dfba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dfbe:	d805      	bhi.n	800dfcc <__multiply+0x122>
 800dfc0:	f8c8 3004 	str.w	r3, [r8, #4]
 800dfc4:	3504      	adds	r5, #4
 800dfc6:	e79b      	b.n	800df00 <__multiply+0x56>
 800dfc8:	46d4      	mov	ip, sl
 800dfca:	e7b3      	b.n	800df34 <__multiply+0x8a>
 800dfcc:	46e0      	mov	r8, ip
 800dfce:	e7dd      	b.n	800df8c <__multiply+0xe2>
 800dfd0:	3e01      	subs	r6, #1
 800dfd2:	e799      	b.n	800df08 <__multiply+0x5e>

0800dfd4 <__pow5mult>:
 800dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	4615      	mov	r5, r2
 800dfda:	f012 0203 	ands.w	r2, r2, #3
 800dfde:	4606      	mov	r6, r0
 800dfe0:	460f      	mov	r7, r1
 800dfe2:	d007      	beq.n	800dff4 <__pow5mult+0x20>
 800dfe4:	4c21      	ldr	r4, [pc, #132]	; (800e06c <__pow5mult+0x98>)
 800dfe6:	3a01      	subs	r2, #1
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfee:	f7ff feca 	bl	800dd86 <__multadd>
 800dff2:	4607      	mov	r7, r0
 800dff4:	10ad      	asrs	r5, r5, #2
 800dff6:	d035      	beq.n	800e064 <__pow5mult+0x90>
 800dff8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dffa:	b93c      	cbnz	r4, 800e00c <__pow5mult+0x38>
 800dffc:	2010      	movs	r0, #16
 800dffe:	f7fe fa11 	bl	800c424 <malloc>
 800e002:	6270      	str	r0, [r6, #36]	; 0x24
 800e004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e008:	6004      	str	r4, [r0, #0]
 800e00a:	60c4      	str	r4, [r0, #12]
 800e00c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e014:	b94c      	cbnz	r4, 800e02a <__pow5mult+0x56>
 800e016:	f240 2171 	movw	r1, #625	; 0x271
 800e01a:	4630      	mov	r0, r6
 800e01c:	f7ff ff3c 	bl	800de98 <__i2b>
 800e020:	2300      	movs	r3, #0
 800e022:	4604      	mov	r4, r0
 800e024:	f8c8 0008 	str.w	r0, [r8, #8]
 800e028:	6003      	str	r3, [r0, #0]
 800e02a:	f04f 0800 	mov.w	r8, #0
 800e02e:	07eb      	lsls	r3, r5, #31
 800e030:	d50a      	bpl.n	800e048 <__pow5mult+0x74>
 800e032:	4639      	mov	r1, r7
 800e034:	4622      	mov	r2, r4
 800e036:	4630      	mov	r0, r6
 800e038:	f7ff ff37 	bl	800deaa <__multiply>
 800e03c:	4681      	mov	r9, r0
 800e03e:	4639      	mov	r1, r7
 800e040:	4630      	mov	r0, r6
 800e042:	f7ff fe89 	bl	800dd58 <_Bfree>
 800e046:	464f      	mov	r7, r9
 800e048:	106d      	asrs	r5, r5, #1
 800e04a:	d00b      	beq.n	800e064 <__pow5mult+0x90>
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	b938      	cbnz	r0, 800e060 <__pow5mult+0x8c>
 800e050:	4622      	mov	r2, r4
 800e052:	4621      	mov	r1, r4
 800e054:	4630      	mov	r0, r6
 800e056:	f7ff ff28 	bl	800deaa <__multiply>
 800e05a:	6020      	str	r0, [r4, #0]
 800e05c:	f8c0 8000 	str.w	r8, [r0]
 800e060:	4604      	mov	r4, r0
 800e062:	e7e4      	b.n	800e02e <__pow5mult+0x5a>
 800e064:	4638      	mov	r0, r7
 800e066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06a:	bf00      	nop
 800e06c:	0800ece8 	.word	0x0800ece8

0800e070 <__lshift>:
 800e070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e074:	460c      	mov	r4, r1
 800e076:	4607      	mov	r7, r0
 800e078:	4616      	mov	r6, r2
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e080:	eb0a 0903 	add.w	r9, sl, r3
 800e084:	6849      	ldr	r1, [r1, #4]
 800e086:	68a3      	ldr	r3, [r4, #8]
 800e088:	f109 0501 	add.w	r5, r9, #1
 800e08c:	42ab      	cmp	r3, r5
 800e08e:	db32      	blt.n	800e0f6 <__lshift+0x86>
 800e090:	4638      	mov	r0, r7
 800e092:	f7ff fe2d 	bl	800dcf0 <_Balloc>
 800e096:	2300      	movs	r3, #0
 800e098:	4680      	mov	r8, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	f100 0114 	add.w	r1, r0, #20
 800e0a0:	4553      	cmp	r3, sl
 800e0a2:	db2b      	blt.n	800e0fc <__lshift+0x8c>
 800e0a4:	6920      	ldr	r0, [r4, #16]
 800e0a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0aa:	f104 0314 	add.w	r3, r4, #20
 800e0ae:	f016 021f 	ands.w	r2, r6, #31
 800e0b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0ba:	d025      	beq.n	800e108 <__lshift+0x98>
 800e0bc:	2000      	movs	r0, #0
 800e0be:	f1c2 0e20 	rsb	lr, r2, #32
 800e0c2:	468a      	mov	sl, r1
 800e0c4:	681e      	ldr	r6, [r3, #0]
 800e0c6:	4096      	lsls	r6, r2
 800e0c8:	4330      	orrs	r0, r6
 800e0ca:	f84a 0b04 	str.w	r0, [sl], #4
 800e0ce:	f853 0b04 	ldr.w	r0, [r3], #4
 800e0d2:	459c      	cmp	ip, r3
 800e0d4:	fa20 f00e 	lsr.w	r0, r0, lr
 800e0d8:	d814      	bhi.n	800e104 <__lshift+0x94>
 800e0da:	6048      	str	r0, [r1, #4]
 800e0dc:	b108      	cbz	r0, 800e0e2 <__lshift+0x72>
 800e0de:	f109 0502 	add.w	r5, r9, #2
 800e0e2:	3d01      	subs	r5, #1
 800e0e4:	4638      	mov	r0, r7
 800e0e6:	f8c8 5010 	str.w	r5, [r8, #16]
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	f7ff fe34 	bl	800dd58 <_Bfree>
 800e0f0:	4640      	mov	r0, r8
 800e0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f6:	3101      	adds	r1, #1
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	e7c7      	b.n	800e08c <__lshift+0x1c>
 800e0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e100:	3301      	adds	r3, #1
 800e102:	e7cd      	b.n	800e0a0 <__lshift+0x30>
 800e104:	4651      	mov	r1, sl
 800e106:	e7dc      	b.n	800e0c2 <__lshift+0x52>
 800e108:	3904      	subs	r1, #4
 800e10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e10e:	459c      	cmp	ip, r3
 800e110:	f841 2f04 	str.w	r2, [r1, #4]!
 800e114:	d8f9      	bhi.n	800e10a <__lshift+0x9a>
 800e116:	e7e4      	b.n	800e0e2 <__lshift+0x72>

0800e118 <__mcmp>:
 800e118:	6903      	ldr	r3, [r0, #16]
 800e11a:	690a      	ldr	r2, [r1, #16]
 800e11c:	b530      	push	{r4, r5, lr}
 800e11e:	1a9b      	subs	r3, r3, r2
 800e120:	d10c      	bne.n	800e13c <__mcmp+0x24>
 800e122:	0092      	lsls	r2, r2, #2
 800e124:	3014      	adds	r0, #20
 800e126:	3114      	adds	r1, #20
 800e128:	1884      	adds	r4, r0, r2
 800e12a:	4411      	add	r1, r2
 800e12c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e134:	4295      	cmp	r5, r2
 800e136:	d003      	beq.n	800e140 <__mcmp+0x28>
 800e138:	d305      	bcc.n	800e146 <__mcmp+0x2e>
 800e13a:	2301      	movs	r3, #1
 800e13c:	4618      	mov	r0, r3
 800e13e:	bd30      	pop	{r4, r5, pc}
 800e140:	42a0      	cmp	r0, r4
 800e142:	d3f3      	bcc.n	800e12c <__mcmp+0x14>
 800e144:	e7fa      	b.n	800e13c <__mcmp+0x24>
 800e146:	f04f 33ff 	mov.w	r3, #4294967295
 800e14a:	e7f7      	b.n	800e13c <__mcmp+0x24>

0800e14c <__mdiff>:
 800e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e150:	460d      	mov	r5, r1
 800e152:	4607      	mov	r7, r0
 800e154:	4611      	mov	r1, r2
 800e156:	4628      	mov	r0, r5
 800e158:	4614      	mov	r4, r2
 800e15a:	f7ff ffdd 	bl	800e118 <__mcmp>
 800e15e:	1e06      	subs	r6, r0, #0
 800e160:	d108      	bne.n	800e174 <__mdiff+0x28>
 800e162:	4631      	mov	r1, r6
 800e164:	4638      	mov	r0, r7
 800e166:	f7ff fdc3 	bl	800dcf0 <_Balloc>
 800e16a:	2301      	movs	r3, #1
 800e16c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e174:	bfa4      	itt	ge
 800e176:	4623      	movge	r3, r4
 800e178:	462c      	movge	r4, r5
 800e17a:	4638      	mov	r0, r7
 800e17c:	6861      	ldr	r1, [r4, #4]
 800e17e:	bfa6      	itte	ge
 800e180:	461d      	movge	r5, r3
 800e182:	2600      	movge	r6, #0
 800e184:	2601      	movlt	r6, #1
 800e186:	f7ff fdb3 	bl	800dcf0 <_Balloc>
 800e18a:	f04f 0e00 	mov.w	lr, #0
 800e18e:	60c6      	str	r6, [r0, #12]
 800e190:	692b      	ldr	r3, [r5, #16]
 800e192:	6926      	ldr	r6, [r4, #16]
 800e194:	f104 0214 	add.w	r2, r4, #20
 800e198:	f105 0914 	add.w	r9, r5, #20
 800e19c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e1a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e1a4:	f100 0114 	add.w	r1, r0, #20
 800e1a8:	f852 ab04 	ldr.w	sl, [r2], #4
 800e1ac:	f859 5b04 	ldr.w	r5, [r9], #4
 800e1b0:	fa1f f38a 	uxth.w	r3, sl
 800e1b4:	4473      	add	r3, lr
 800e1b6:	b2ac      	uxth	r4, r5
 800e1b8:	1b1b      	subs	r3, r3, r4
 800e1ba:	0c2c      	lsrs	r4, r5, #16
 800e1bc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800e1c0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800e1ca:	45c8      	cmp	r8, r9
 800e1cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e1d0:	4694      	mov	ip, r2
 800e1d2:	f841 4b04 	str.w	r4, [r1], #4
 800e1d6:	d8e7      	bhi.n	800e1a8 <__mdiff+0x5c>
 800e1d8:	45bc      	cmp	ip, r7
 800e1da:	d304      	bcc.n	800e1e6 <__mdiff+0x9a>
 800e1dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e1e0:	b183      	cbz	r3, 800e204 <__mdiff+0xb8>
 800e1e2:	6106      	str	r6, [r0, #16]
 800e1e4:	e7c4      	b.n	800e170 <__mdiff+0x24>
 800e1e6:	f85c 4b04 	ldr.w	r4, [ip], #4
 800e1ea:	b2a2      	uxth	r2, r4
 800e1ec:	4472      	add	r2, lr
 800e1ee:	1413      	asrs	r3, r2, #16
 800e1f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e1f4:	b292      	uxth	r2, r2
 800e1f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e1fa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e1fe:	f841 2b04 	str.w	r2, [r1], #4
 800e202:	e7e9      	b.n	800e1d8 <__mdiff+0x8c>
 800e204:	3e01      	subs	r6, #1
 800e206:	e7e9      	b.n	800e1dc <__mdiff+0x90>

0800e208 <__d2b>:
 800e208:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e20c:	461c      	mov	r4, r3
 800e20e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800e212:	2101      	movs	r1, #1
 800e214:	4690      	mov	r8, r2
 800e216:	f7ff fd6b 	bl	800dcf0 <_Balloc>
 800e21a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800e21e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800e222:	4607      	mov	r7, r0
 800e224:	bb34      	cbnz	r4, 800e274 <__d2b+0x6c>
 800e226:	9201      	str	r2, [sp, #4]
 800e228:	f1b8 0200 	subs.w	r2, r8, #0
 800e22c:	d027      	beq.n	800e27e <__d2b+0x76>
 800e22e:	a802      	add	r0, sp, #8
 800e230:	f840 2d08 	str.w	r2, [r0, #-8]!
 800e234:	f7ff fe01 	bl	800de3a <__lo0bits>
 800e238:	9900      	ldr	r1, [sp, #0]
 800e23a:	b1f0      	cbz	r0, 800e27a <__d2b+0x72>
 800e23c:	9a01      	ldr	r2, [sp, #4]
 800e23e:	f1c0 0320 	rsb	r3, r0, #32
 800e242:	fa02 f303 	lsl.w	r3, r2, r3
 800e246:	430b      	orrs	r3, r1
 800e248:	40c2      	lsrs	r2, r0
 800e24a:	617b      	str	r3, [r7, #20]
 800e24c:	9201      	str	r2, [sp, #4]
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	bf14      	ite	ne
 800e254:	2102      	movne	r1, #2
 800e256:	2101      	moveq	r1, #1
 800e258:	61bb      	str	r3, [r7, #24]
 800e25a:	6139      	str	r1, [r7, #16]
 800e25c:	b1c4      	cbz	r4, 800e290 <__d2b+0x88>
 800e25e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e262:	4404      	add	r4, r0
 800e264:	6034      	str	r4, [r6, #0]
 800e266:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e26a:	6028      	str	r0, [r5, #0]
 800e26c:	4638      	mov	r0, r7
 800e26e:	b002      	add	sp, #8
 800e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e274:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e278:	e7d5      	b.n	800e226 <__d2b+0x1e>
 800e27a:	6179      	str	r1, [r7, #20]
 800e27c:	e7e7      	b.n	800e24e <__d2b+0x46>
 800e27e:	a801      	add	r0, sp, #4
 800e280:	f7ff fddb 	bl	800de3a <__lo0bits>
 800e284:	2101      	movs	r1, #1
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	6139      	str	r1, [r7, #16]
 800e28a:	617b      	str	r3, [r7, #20]
 800e28c:	3020      	adds	r0, #32
 800e28e:	e7e5      	b.n	800e25c <__d2b+0x54>
 800e290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e294:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e298:	6030      	str	r0, [r6, #0]
 800e29a:	6918      	ldr	r0, [r3, #16]
 800e29c:	f7ff fdae 	bl	800ddfc <__hi0bits>
 800e2a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e2a4:	e7e1      	b.n	800e26a <__d2b+0x62>

0800e2a6 <_calloc_r>:
 800e2a6:	b538      	push	{r3, r4, r5, lr}
 800e2a8:	fb02 f401 	mul.w	r4, r2, r1
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	f7fe f921 	bl	800c4f4 <_malloc_r>
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	b118      	cbz	r0, 800e2be <_calloc_r+0x18>
 800e2b6:	4622      	mov	r2, r4
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	f7fe f8c6 	bl	800c44a <memset>
 800e2be:	4628      	mov	r0, r5
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}

0800e2c2 <__sfputc_r>:
 800e2c2:	6893      	ldr	r3, [r2, #8]
 800e2c4:	b410      	push	{r4}
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	6093      	str	r3, [r2, #8]
 800e2cc:	da07      	bge.n	800e2de <__sfputc_r+0x1c>
 800e2ce:	6994      	ldr	r4, [r2, #24]
 800e2d0:	42a3      	cmp	r3, r4
 800e2d2:	db01      	blt.n	800e2d8 <__sfputc_r+0x16>
 800e2d4:	290a      	cmp	r1, #10
 800e2d6:	d102      	bne.n	800e2de <__sfputc_r+0x1c>
 800e2d8:	bc10      	pop	{r4}
 800e2da:	f000 b973 	b.w	800e5c4 <__swbuf_r>
 800e2de:	6813      	ldr	r3, [r2, #0]
 800e2e0:	1c58      	adds	r0, r3, #1
 800e2e2:	6010      	str	r0, [r2, #0]
 800e2e4:	7019      	strb	r1, [r3, #0]
 800e2e6:	4608      	mov	r0, r1
 800e2e8:	bc10      	pop	{r4}
 800e2ea:	4770      	bx	lr

0800e2ec <__sfputs_r>:
 800e2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	460f      	mov	r7, r1
 800e2f2:	4614      	mov	r4, r2
 800e2f4:	18d5      	adds	r5, r2, r3
 800e2f6:	42ac      	cmp	r4, r5
 800e2f8:	d101      	bne.n	800e2fe <__sfputs_r+0x12>
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	e007      	b.n	800e30e <__sfputs_r+0x22>
 800e2fe:	463a      	mov	r2, r7
 800e300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e304:	4630      	mov	r0, r6
 800e306:	f7ff ffdc 	bl	800e2c2 <__sfputc_r>
 800e30a:	1c43      	adds	r3, r0, #1
 800e30c:	d1f3      	bne.n	800e2f6 <__sfputs_r+0xa>
 800e30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e310 <_vfiprintf_r>:
 800e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e314:	460c      	mov	r4, r1
 800e316:	b09d      	sub	sp, #116	; 0x74
 800e318:	4617      	mov	r7, r2
 800e31a:	461d      	mov	r5, r3
 800e31c:	4606      	mov	r6, r0
 800e31e:	b118      	cbz	r0, 800e328 <_vfiprintf_r+0x18>
 800e320:	6983      	ldr	r3, [r0, #24]
 800e322:	b90b      	cbnz	r3, 800e328 <_vfiprintf_r+0x18>
 800e324:	f7ff fc3c 	bl	800dba0 <__sinit>
 800e328:	4b7c      	ldr	r3, [pc, #496]	; (800e51c <_vfiprintf_r+0x20c>)
 800e32a:	429c      	cmp	r4, r3
 800e32c:	d158      	bne.n	800e3e0 <_vfiprintf_r+0xd0>
 800e32e:	6874      	ldr	r4, [r6, #4]
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	0718      	lsls	r0, r3, #28
 800e334:	d55e      	bpl.n	800e3f4 <_vfiprintf_r+0xe4>
 800e336:	6923      	ldr	r3, [r4, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d05b      	beq.n	800e3f4 <_vfiprintf_r+0xe4>
 800e33c:	2300      	movs	r3, #0
 800e33e:	9309      	str	r3, [sp, #36]	; 0x24
 800e340:	2320      	movs	r3, #32
 800e342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e346:	2330      	movs	r3, #48	; 0x30
 800e348:	f04f 0b01 	mov.w	fp, #1
 800e34c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e350:	9503      	str	r5, [sp, #12]
 800e352:	46b8      	mov	r8, r7
 800e354:	4645      	mov	r5, r8
 800e356:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e35a:	b10b      	cbz	r3, 800e360 <_vfiprintf_r+0x50>
 800e35c:	2b25      	cmp	r3, #37	; 0x25
 800e35e:	d154      	bne.n	800e40a <_vfiprintf_r+0xfa>
 800e360:	ebb8 0a07 	subs.w	sl, r8, r7
 800e364:	d00b      	beq.n	800e37e <_vfiprintf_r+0x6e>
 800e366:	4653      	mov	r3, sl
 800e368:	463a      	mov	r2, r7
 800e36a:	4621      	mov	r1, r4
 800e36c:	4630      	mov	r0, r6
 800e36e:	f7ff ffbd 	bl	800e2ec <__sfputs_r>
 800e372:	3001      	adds	r0, #1
 800e374:	f000 80c2 	beq.w	800e4fc <_vfiprintf_r+0x1ec>
 800e378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e37a:	4453      	add	r3, sl
 800e37c:	9309      	str	r3, [sp, #36]	; 0x24
 800e37e:	f898 3000 	ldrb.w	r3, [r8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	f000 80ba 	beq.w	800e4fc <_vfiprintf_r+0x1ec>
 800e388:	2300      	movs	r3, #0
 800e38a:	f04f 32ff 	mov.w	r2, #4294967295
 800e38e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e392:	9304      	str	r3, [sp, #16]
 800e394:	9307      	str	r3, [sp, #28]
 800e396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e39a:	931a      	str	r3, [sp, #104]	; 0x68
 800e39c:	46a8      	mov	r8, r5
 800e39e:	2205      	movs	r2, #5
 800e3a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e3a4:	485e      	ldr	r0, [pc, #376]	; (800e520 <_vfiprintf_r+0x210>)
 800e3a6:	f7ff fc93 	bl	800dcd0 <memchr>
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	bb78      	cbnz	r0, 800e40e <_vfiprintf_r+0xfe>
 800e3ae:	06d9      	lsls	r1, r3, #27
 800e3b0:	bf44      	itt	mi
 800e3b2:	2220      	movmi	r2, #32
 800e3b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3b8:	071a      	lsls	r2, r3, #28
 800e3ba:	bf44      	itt	mi
 800e3bc:	222b      	movmi	r2, #43	; 0x2b
 800e3be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3c2:	782a      	ldrb	r2, [r5, #0]
 800e3c4:	2a2a      	cmp	r2, #42	; 0x2a
 800e3c6:	d02a      	beq.n	800e41e <_vfiprintf_r+0x10e>
 800e3c8:	46a8      	mov	r8, r5
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	250a      	movs	r5, #10
 800e3ce:	9a07      	ldr	r2, [sp, #28]
 800e3d0:	4641      	mov	r1, r8
 800e3d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3d6:	3b30      	subs	r3, #48	; 0x30
 800e3d8:	2b09      	cmp	r3, #9
 800e3da:	d969      	bls.n	800e4b0 <_vfiprintf_r+0x1a0>
 800e3dc:	b360      	cbz	r0, 800e438 <_vfiprintf_r+0x128>
 800e3de:	e024      	b.n	800e42a <_vfiprintf_r+0x11a>
 800e3e0:	4b50      	ldr	r3, [pc, #320]	; (800e524 <_vfiprintf_r+0x214>)
 800e3e2:	429c      	cmp	r4, r3
 800e3e4:	d101      	bne.n	800e3ea <_vfiprintf_r+0xda>
 800e3e6:	68b4      	ldr	r4, [r6, #8]
 800e3e8:	e7a2      	b.n	800e330 <_vfiprintf_r+0x20>
 800e3ea:	4b4f      	ldr	r3, [pc, #316]	; (800e528 <_vfiprintf_r+0x218>)
 800e3ec:	429c      	cmp	r4, r3
 800e3ee:	bf08      	it	eq
 800e3f0:	68f4      	ldreq	r4, [r6, #12]
 800e3f2:	e79d      	b.n	800e330 <_vfiprintf_r+0x20>
 800e3f4:	4621      	mov	r1, r4
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f000 f948 	bl	800e68c <__swsetup_r>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d09d      	beq.n	800e33c <_vfiprintf_r+0x2c>
 800e400:	f04f 30ff 	mov.w	r0, #4294967295
 800e404:	b01d      	add	sp, #116	; 0x74
 800e406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40a:	46a8      	mov	r8, r5
 800e40c:	e7a2      	b.n	800e354 <_vfiprintf_r+0x44>
 800e40e:	4a44      	ldr	r2, [pc, #272]	; (800e520 <_vfiprintf_r+0x210>)
 800e410:	4645      	mov	r5, r8
 800e412:	1a80      	subs	r0, r0, r2
 800e414:	fa0b f000 	lsl.w	r0, fp, r0
 800e418:	4318      	orrs	r0, r3
 800e41a:	9004      	str	r0, [sp, #16]
 800e41c:	e7be      	b.n	800e39c <_vfiprintf_r+0x8c>
 800e41e:	9a03      	ldr	r2, [sp, #12]
 800e420:	1d11      	adds	r1, r2, #4
 800e422:	6812      	ldr	r2, [r2, #0]
 800e424:	9103      	str	r1, [sp, #12]
 800e426:	2a00      	cmp	r2, #0
 800e428:	db01      	blt.n	800e42e <_vfiprintf_r+0x11e>
 800e42a:	9207      	str	r2, [sp, #28]
 800e42c:	e004      	b.n	800e438 <_vfiprintf_r+0x128>
 800e42e:	4252      	negs	r2, r2
 800e430:	f043 0302 	orr.w	r3, r3, #2
 800e434:	9207      	str	r2, [sp, #28]
 800e436:	9304      	str	r3, [sp, #16]
 800e438:	f898 3000 	ldrb.w	r3, [r8]
 800e43c:	2b2e      	cmp	r3, #46	; 0x2e
 800e43e:	d10e      	bne.n	800e45e <_vfiprintf_r+0x14e>
 800e440:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e444:	2b2a      	cmp	r3, #42	; 0x2a
 800e446:	d138      	bne.n	800e4ba <_vfiprintf_r+0x1aa>
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	f108 0802 	add.w	r8, r8, #2
 800e44e:	1d1a      	adds	r2, r3, #4
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	9203      	str	r2, [sp, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	bfb8      	it	lt
 800e458:	f04f 33ff 	movlt.w	r3, #4294967295
 800e45c:	9305      	str	r3, [sp, #20]
 800e45e:	4d33      	ldr	r5, [pc, #204]	; (800e52c <_vfiprintf_r+0x21c>)
 800e460:	2203      	movs	r2, #3
 800e462:	f898 1000 	ldrb.w	r1, [r8]
 800e466:	4628      	mov	r0, r5
 800e468:	f7ff fc32 	bl	800dcd0 <memchr>
 800e46c:	b140      	cbz	r0, 800e480 <_vfiprintf_r+0x170>
 800e46e:	2340      	movs	r3, #64	; 0x40
 800e470:	1b40      	subs	r0, r0, r5
 800e472:	fa03 f000 	lsl.w	r0, r3, r0
 800e476:	9b04      	ldr	r3, [sp, #16]
 800e478:	f108 0801 	add.w	r8, r8, #1
 800e47c:	4303      	orrs	r3, r0
 800e47e:	9304      	str	r3, [sp, #16]
 800e480:	f898 1000 	ldrb.w	r1, [r8]
 800e484:	2206      	movs	r2, #6
 800e486:	482a      	ldr	r0, [pc, #168]	; (800e530 <_vfiprintf_r+0x220>)
 800e488:	f108 0701 	add.w	r7, r8, #1
 800e48c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e490:	f7ff fc1e 	bl	800dcd0 <memchr>
 800e494:	2800      	cmp	r0, #0
 800e496:	d037      	beq.n	800e508 <_vfiprintf_r+0x1f8>
 800e498:	4b26      	ldr	r3, [pc, #152]	; (800e534 <_vfiprintf_r+0x224>)
 800e49a:	bb1b      	cbnz	r3, 800e4e4 <_vfiprintf_r+0x1d4>
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	3307      	adds	r3, #7
 800e4a0:	f023 0307 	bic.w	r3, r3, #7
 800e4a4:	3308      	adds	r3, #8
 800e4a6:	9303      	str	r3, [sp, #12]
 800e4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4aa:	444b      	add	r3, r9
 800e4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ae:	e750      	b.n	800e352 <_vfiprintf_r+0x42>
 800e4b0:	fb05 3202 	mla	r2, r5, r2, r3
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	4688      	mov	r8, r1
 800e4b8:	e78a      	b.n	800e3d0 <_vfiprintf_r+0xc0>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	250a      	movs	r5, #10
 800e4be:	4619      	mov	r1, r3
 800e4c0:	f108 0801 	add.w	r8, r8, #1
 800e4c4:	9305      	str	r3, [sp, #20]
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4cc:	3a30      	subs	r2, #48	; 0x30
 800e4ce:	2a09      	cmp	r2, #9
 800e4d0:	d903      	bls.n	800e4da <_vfiprintf_r+0x1ca>
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d0c3      	beq.n	800e45e <_vfiprintf_r+0x14e>
 800e4d6:	9105      	str	r1, [sp, #20]
 800e4d8:	e7c1      	b.n	800e45e <_vfiprintf_r+0x14e>
 800e4da:	fb05 2101 	mla	r1, r5, r1, r2
 800e4de:	2301      	movs	r3, #1
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	e7f0      	b.n	800e4c6 <_vfiprintf_r+0x1b6>
 800e4e4:	ab03      	add	r3, sp, #12
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	4622      	mov	r2, r4
 800e4ea:	4b13      	ldr	r3, [pc, #76]	; (800e538 <_vfiprintf_r+0x228>)
 800e4ec:	a904      	add	r1, sp, #16
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f7fe f8ec 	bl	800c6cc <_printf_float>
 800e4f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e4f8:	4681      	mov	r9, r0
 800e4fa:	d1d5      	bne.n	800e4a8 <_vfiprintf_r+0x198>
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	065b      	lsls	r3, r3, #25
 800e500:	f53f af7e 	bmi.w	800e400 <_vfiprintf_r+0xf0>
 800e504:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e506:	e77d      	b.n	800e404 <_vfiprintf_r+0xf4>
 800e508:	ab03      	add	r3, sp, #12
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	4622      	mov	r2, r4
 800e50e:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <_vfiprintf_r+0x228>)
 800e510:	a904      	add	r1, sp, #16
 800e512:	4630      	mov	r0, r6
 800e514:	f7fe fb86 	bl	800cc24 <_printf_i>
 800e518:	e7ec      	b.n	800e4f4 <_vfiprintf_r+0x1e4>
 800e51a:	bf00      	nop
 800e51c:	0800ebb4 	.word	0x0800ebb4
 800e520:	0800ecf4 	.word	0x0800ecf4
 800e524:	0800ebd4 	.word	0x0800ebd4
 800e528:	0800eb94 	.word	0x0800eb94
 800e52c:	0800ecfa 	.word	0x0800ecfa
 800e530:	0800ecfe 	.word	0x0800ecfe
 800e534:	0800c6cd 	.word	0x0800c6cd
 800e538:	0800e2ed 	.word	0x0800e2ed

0800e53c <__sread>:
 800e53c:	b510      	push	{r4, lr}
 800e53e:	460c      	mov	r4, r1
 800e540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e544:	f000 fa58 	bl	800e9f8 <_read_r>
 800e548:	2800      	cmp	r0, #0
 800e54a:	bfab      	itete	ge
 800e54c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e54e:	89a3      	ldrhlt	r3, [r4, #12]
 800e550:	181b      	addge	r3, r3, r0
 800e552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e556:	bfac      	ite	ge
 800e558:	6563      	strge	r3, [r4, #84]	; 0x54
 800e55a:	81a3      	strhlt	r3, [r4, #12]
 800e55c:	bd10      	pop	{r4, pc}

0800e55e <__swrite>:
 800e55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e562:	461f      	mov	r7, r3
 800e564:	898b      	ldrh	r3, [r1, #12]
 800e566:	4605      	mov	r5, r0
 800e568:	05db      	lsls	r3, r3, #23
 800e56a:	460c      	mov	r4, r1
 800e56c:	4616      	mov	r6, r2
 800e56e:	d505      	bpl.n	800e57c <__swrite+0x1e>
 800e570:	2302      	movs	r3, #2
 800e572:	2200      	movs	r2, #0
 800e574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e578:	f000 f9b6 	bl	800e8e8 <_lseek_r>
 800e57c:	89a3      	ldrh	r3, [r4, #12]
 800e57e:	4632      	mov	r2, r6
 800e580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e584:	81a3      	strh	r3, [r4, #12]
 800e586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e58a:	463b      	mov	r3, r7
 800e58c:	4628      	mov	r0, r5
 800e58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e592:	f000 b869 	b.w	800e668 <_write_r>

0800e596 <__sseek>:
 800e596:	b510      	push	{r4, lr}
 800e598:	460c      	mov	r4, r1
 800e59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e59e:	f000 f9a3 	bl	800e8e8 <_lseek_r>
 800e5a2:	1c43      	adds	r3, r0, #1
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	bf15      	itete	ne
 800e5a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5b2:	81a3      	strheq	r3, [r4, #12]
 800e5b4:	bf18      	it	ne
 800e5b6:	81a3      	strhne	r3, [r4, #12]
 800e5b8:	bd10      	pop	{r4, pc}

0800e5ba <__sclose>:
 800e5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5be:	f000 b8d3 	b.w	800e768 <_close_r>
	...

0800e5c4 <__swbuf_r>:
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c6:	460e      	mov	r6, r1
 800e5c8:	4614      	mov	r4, r2
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	b118      	cbz	r0, 800e5d6 <__swbuf_r+0x12>
 800e5ce:	6983      	ldr	r3, [r0, #24]
 800e5d0:	b90b      	cbnz	r3, 800e5d6 <__swbuf_r+0x12>
 800e5d2:	f7ff fae5 	bl	800dba0 <__sinit>
 800e5d6:	4b21      	ldr	r3, [pc, #132]	; (800e65c <__swbuf_r+0x98>)
 800e5d8:	429c      	cmp	r4, r3
 800e5da:	d12a      	bne.n	800e632 <__swbuf_r+0x6e>
 800e5dc:	686c      	ldr	r4, [r5, #4]
 800e5de:	69a3      	ldr	r3, [r4, #24]
 800e5e0:	60a3      	str	r3, [r4, #8]
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	071a      	lsls	r2, r3, #28
 800e5e6:	d52e      	bpl.n	800e646 <__swbuf_r+0x82>
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	b363      	cbz	r3, 800e646 <__swbuf_r+0x82>
 800e5ec:	6923      	ldr	r3, [r4, #16]
 800e5ee:	6820      	ldr	r0, [r4, #0]
 800e5f0:	b2f6      	uxtb	r6, r6
 800e5f2:	1ac0      	subs	r0, r0, r3
 800e5f4:	6963      	ldr	r3, [r4, #20]
 800e5f6:	4637      	mov	r7, r6
 800e5f8:	4283      	cmp	r3, r0
 800e5fa:	dc04      	bgt.n	800e606 <__swbuf_r+0x42>
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	4628      	mov	r0, r5
 800e600:	f000 f948 	bl	800e894 <_fflush_r>
 800e604:	bb28      	cbnz	r0, 800e652 <__swbuf_r+0x8e>
 800e606:	68a3      	ldr	r3, [r4, #8]
 800e608:	3001      	adds	r0, #1
 800e60a:	3b01      	subs	r3, #1
 800e60c:	60a3      	str	r3, [r4, #8]
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	1c5a      	adds	r2, r3, #1
 800e612:	6022      	str	r2, [r4, #0]
 800e614:	701e      	strb	r6, [r3, #0]
 800e616:	6963      	ldr	r3, [r4, #20]
 800e618:	4283      	cmp	r3, r0
 800e61a:	d004      	beq.n	800e626 <__swbuf_r+0x62>
 800e61c:	89a3      	ldrh	r3, [r4, #12]
 800e61e:	07db      	lsls	r3, r3, #31
 800e620:	d519      	bpl.n	800e656 <__swbuf_r+0x92>
 800e622:	2e0a      	cmp	r6, #10
 800e624:	d117      	bne.n	800e656 <__swbuf_r+0x92>
 800e626:	4621      	mov	r1, r4
 800e628:	4628      	mov	r0, r5
 800e62a:	f000 f933 	bl	800e894 <_fflush_r>
 800e62e:	b190      	cbz	r0, 800e656 <__swbuf_r+0x92>
 800e630:	e00f      	b.n	800e652 <__swbuf_r+0x8e>
 800e632:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <__swbuf_r+0x9c>)
 800e634:	429c      	cmp	r4, r3
 800e636:	d101      	bne.n	800e63c <__swbuf_r+0x78>
 800e638:	68ac      	ldr	r4, [r5, #8]
 800e63a:	e7d0      	b.n	800e5de <__swbuf_r+0x1a>
 800e63c:	4b09      	ldr	r3, [pc, #36]	; (800e664 <__swbuf_r+0xa0>)
 800e63e:	429c      	cmp	r4, r3
 800e640:	bf08      	it	eq
 800e642:	68ec      	ldreq	r4, [r5, #12]
 800e644:	e7cb      	b.n	800e5de <__swbuf_r+0x1a>
 800e646:	4621      	mov	r1, r4
 800e648:	4628      	mov	r0, r5
 800e64a:	f000 f81f 	bl	800e68c <__swsetup_r>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d0cc      	beq.n	800e5ec <__swbuf_r+0x28>
 800e652:	f04f 37ff 	mov.w	r7, #4294967295
 800e656:	4638      	mov	r0, r7
 800e658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e65a:	bf00      	nop
 800e65c:	0800ebb4 	.word	0x0800ebb4
 800e660:	0800ebd4 	.word	0x0800ebd4
 800e664:	0800eb94 	.word	0x0800eb94

0800e668 <_write_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4605      	mov	r5, r0
 800e66c:	4608      	mov	r0, r1
 800e66e:	4611      	mov	r1, r2
 800e670:	2200      	movs	r2, #0
 800e672:	4c05      	ldr	r4, [pc, #20]	; (800e688 <_write_r+0x20>)
 800e674:	6022      	str	r2, [r4, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	f7f5 f881 	bl	800377e <_write>
 800e67c:	1c43      	adds	r3, r0, #1
 800e67e:	d102      	bne.n	800e686 <_write_r+0x1e>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	b103      	cbz	r3, 800e686 <_write_r+0x1e>
 800e684:	602b      	str	r3, [r5, #0]
 800e686:	bd38      	pop	{r3, r4, r5, pc}
 800e688:	200016dc 	.word	0x200016dc

0800e68c <__swsetup_r>:
 800e68c:	4b32      	ldr	r3, [pc, #200]	; (800e758 <__swsetup_r+0xcc>)
 800e68e:	b570      	push	{r4, r5, r6, lr}
 800e690:	681d      	ldr	r5, [r3, #0]
 800e692:	4606      	mov	r6, r0
 800e694:	460c      	mov	r4, r1
 800e696:	b125      	cbz	r5, 800e6a2 <__swsetup_r+0x16>
 800e698:	69ab      	ldr	r3, [r5, #24]
 800e69a:	b913      	cbnz	r3, 800e6a2 <__swsetup_r+0x16>
 800e69c:	4628      	mov	r0, r5
 800e69e:	f7ff fa7f 	bl	800dba0 <__sinit>
 800e6a2:	4b2e      	ldr	r3, [pc, #184]	; (800e75c <__swsetup_r+0xd0>)
 800e6a4:	429c      	cmp	r4, r3
 800e6a6:	d10f      	bne.n	800e6c8 <__swsetup_r+0x3c>
 800e6a8:	686c      	ldr	r4, [r5, #4]
 800e6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	0715      	lsls	r5, r2, #28
 800e6b2:	d42c      	bmi.n	800e70e <__swsetup_r+0x82>
 800e6b4:	06d0      	lsls	r0, r2, #27
 800e6b6:	d411      	bmi.n	800e6dc <__swsetup_r+0x50>
 800e6b8:	2209      	movs	r2, #9
 800e6ba:	6032      	str	r2, [r6, #0]
 800e6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c0:	81a3      	strh	r3, [r4, #12]
 800e6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c6:	e03e      	b.n	800e746 <__swsetup_r+0xba>
 800e6c8:	4b25      	ldr	r3, [pc, #148]	; (800e760 <__swsetup_r+0xd4>)
 800e6ca:	429c      	cmp	r4, r3
 800e6cc:	d101      	bne.n	800e6d2 <__swsetup_r+0x46>
 800e6ce:	68ac      	ldr	r4, [r5, #8]
 800e6d0:	e7eb      	b.n	800e6aa <__swsetup_r+0x1e>
 800e6d2:	4b24      	ldr	r3, [pc, #144]	; (800e764 <__swsetup_r+0xd8>)
 800e6d4:	429c      	cmp	r4, r3
 800e6d6:	bf08      	it	eq
 800e6d8:	68ec      	ldreq	r4, [r5, #12]
 800e6da:	e7e6      	b.n	800e6aa <__swsetup_r+0x1e>
 800e6dc:	0751      	lsls	r1, r2, #29
 800e6de:	d512      	bpl.n	800e706 <__swsetup_r+0x7a>
 800e6e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6e2:	b141      	cbz	r1, 800e6f6 <__swsetup_r+0x6a>
 800e6e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6e8:	4299      	cmp	r1, r3
 800e6ea:	d002      	beq.n	800e6f2 <__swsetup_r+0x66>
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7fd feb5 	bl	800c45c <_free_r>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6fc:	81a3      	strh	r3, [r4, #12]
 800e6fe:	2300      	movs	r3, #0
 800e700:	6063      	str	r3, [r4, #4]
 800e702:	6923      	ldr	r3, [r4, #16]
 800e704:	6023      	str	r3, [r4, #0]
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	f043 0308 	orr.w	r3, r3, #8
 800e70c:	81a3      	strh	r3, [r4, #12]
 800e70e:	6923      	ldr	r3, [r4, #16]
 800e710:	b94b      	cbnz	r3, 800e726 <__swsetup_r+0x9a>
 800e712:	89a3      	ldrh	r3, [r4, #12]
 800e714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e71c:	d003      	beq.n	800e726 <__swsetup_r+0x9a>
 800e71e:	4621      	mov	r1, r4
 800e720:	4630      	mov	r0, r6
 800e722:	f000 f917 	bl	800e954 <__smakebuf_r>
 800e726:	89a2      	ldrh	r2, [r4, #12]
 800e728:	f012 0301 	ands.w	r3, r2, #1
 800e72c:	d00c      	beq.n	800e748 <__swsetup_r+0xbc>
 800e72e:	2300      	movs	r3, #0
 800e730:	60a3      	str	r3, [r4, #8]
 800e732:	6963      	ldr	r3, [r4, #20]
 800e734:	425b      	negs	r3, r3
 800e736:	61a3      	str	r3, [r4, #24]
 800e738:	6923      	ldr	r3, [r4, #16]
 800e73a:	b953      	cbnz	r3, 800e752 <__swsetup_r+0xc6>
 800e73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e740:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e744:	d1ba      	bne.n	800e6bc <__swsetup_r+0x30>
 800e746:	bd70      	pop	{r4, r5, r6, pc}
 800e748:	0792      	lsls	r2, r2, #30
 800e74a:	bf58      	it	pl
 800e74c:	6963      	ldrpl	r3, [r4, #20]
 800e74e:	60a3      	str	r3, [r4, #8]
 800e750:	e7f2      	b.n	800e738 <__swsetup_r+0xac>
 800e752:	2000      	movs	r0, #0
 800e754:	e7f7      	b.n	800e746 <__swsetup_r+0xba>
 800e756:	bf00      	nop
 800e758:	20000184 	.word	0x20000184
 800e75c:	0800ebb4 	.word	0x0800ebb4
 800e760:	0800ebd4 	.word	0x0800ebd4
 800e764:	0800eb94 	.word	0x0800eb94

0800e768 <_close_r>:
 800e768:	b538      	push	{r3, r4, r5, lr}
 800e76a:	2300      	movs	r3, #0
 800e76c:	4c05      	ldr	r4, [pc, #20]	; (800e784 <_close_r+0x1c>)
 800e76e:	4605      	mov	r5, r0
 800e770:	4608      	mov	r0, r1
 800e772:	6023      	str	r3, [r4, #0]
 800e774:	f7f5 f81f 	bl	80037b6 <_close>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d102      	bne.n	800e782 <_close_r+0x1a>
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	b103      	cbz	r3, 800e782 <_close_r+0x1a>
 800e780:	602b      	str	r3, [r5, #0]
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	200016dc 	.word	0x200016dc

0800e788 <__sflush_r>:
 800e788:	898a      	ldrh	r2, [r1, #12]
 800e78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78e:	4605      	mov	r5, r0
 800e790:	0710      	lsls	r0, r2, #28
 800e792:	460c      	mov	r4, r1
 800e794:	d458      	bmi.n	800e848 <__sflush_r+0xc0>
 800e796:	684b      	ldr	r3, [r1, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dc05      	bgt.n	800e7a8 <__sflush_r+0x20>
 800e79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	dc02      	bgt.n	800e7a8 <__sflush_r+0x20>
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7aa:	2e00      	cmp	r6, #0
 800e7ac:	d0f9      	beq.n	800e7a2 <__sflush_r+0x1a>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7b4:	682f      	ldr	r7, [r5, #0]
 800e7b6:	6a21      	ldr	r1, [r4, #32]
 800e7b8:	602b      	str	r3, [r5, #0]
 800e7ba:	d032      	beq.n	800e822 <__sflush_r+0x9a>
 800e7bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	075a      	lsls	r2, r3, #29
 800e7c2:	d505      	bpl.n	800e7d0 <__sflush_r+0x48>
 800e7c4:	6863      	ldr	r3, [r4, #4]
 800e7c6:	1ac0      	subs	r0, r0, r3
 800e7c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7ca:	b10b      	cbz	r3, 800e7d0 <__sflush_r+0x48>
 800e7cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7ce:	1ac0      	subs	r0, r0, r3
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7d6:	6a21      	ldr	r1, [r4, #32]
 800e7d8:	4628      	mov	r0, r5
 800e7da:	47b0      	blx	r6
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	d106      	bne.n	800e7f0 <__sflush_r+0x68>
 800e7e2:	6829      	ldr	r1, [r5, #0]
 800e7e4:	291d      	cmp	r1, #29
 800e7e6:	d848      	bhi.n	800e87a <__sflush_r+0xf2>
 800e7e8:	4a29      	ldr	r2, [pc, #164]	; (800e890 <__sflush_r+0x108>)
 800e7ea:	40ca      	lsrs	r2, r1
 800e7ec:	07d6      	lsls	r6, r2, #31
 800e7ee:	d544      	bpl.n	800e87a <__sflush_r+0xf2>
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	6062      	str	r2, [r4, #4]
 800e7f4:	6922      	ldr	r2, [r4, #16]
 800e7f6:	04d9      	lsls	r1, r3, #19
 800e7f8:	6022      	str	r2, [r4, #0]
 800e7fa:	d504      	bpl.n	800e806 <__sflush_r+0x7e>
 800e7fc:	1c42      	adds	r2, r0, #1
 800e7fe:	d101      	bne.n	800e804 <__sflush_r+0x7c>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b903      	cbnz	r3, 800e806 <__sflush_r+0x7e>
 800e804:	6560      	str	r0, [r4, #84]	; 0x54
 800e806:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e808:	602f      	str	r7, [r5, #0]
 800e80a:	2900      	cmp	r1, #0
 800e80c:	d0c9      	beq.n	800e7a2 <__sflush_r+0x1a>
 800e80e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e812:	4299      	cmp	r1, r3
 800e814:	d002      	beq.n	800e81c <__sflush_r+0x94>
 800e816:	4628      	mov	r0, r5
 800e818:	f7fd fe20 	bl	800c45c <_free_r>
 800e81c:	2000      	movs	r0, #0
 800e81e:	6360      	str	r0, [r4, #52]	; 0x34
 800e820:	e7c0      	b.n	800e7a4 <__sflush_r+0x1c>
 800e822:	2301      	movs	r3, #1
 800e824:	4628      	mov	r0, r5
 800e826:	47b0      	blx	r6
 800e828:	1c41      	adds	r1, r0, #1
 800e82a:	d1c8      	bne.n	800e7be <__sflush_r+0x36>
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d0c5      	beq.n	800e7be <__sflush_r+0x36>
 800e832:	2b1d      	cmp	r3, #29
 800e834:	d001      	beq.n	800e83a <__sflush_r+0xb2>
 800e836:	2b16      	cmp	r3, #22
 800e838:	d101      	bne.n	800e83e <__sflush_r+0xb6>
 800e83a:	602f      	str	r7, [r5, #0]
 800e83c:	e7b1      	b.n	800e7a2 <__sflush_r+0x1a>
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e844:	81a3      	strh	r3, [r4, #12]
 800e846:	e7ad      	b.n	800e7a4 <__sflush_r+0x1c>
 800e848:	690f      	ldr	r7, [r1, #16]
 800e84a:	2f00      	cmp	r7, #0
 800e84c:	d0a9      	beq.n	800e7a2 <__sflush_r+0x1a>
 800e84e:	0793      	lsls	r3, r2, #30
 800e850:	bf18      	it	ne
 800e852:	2300      	movne	r3, #0
 800e854:	680e      	ldr	r6, [r1, #0]
 800e856:	bf08      	it	eq
 800e858:	694b      	ldreq	r3, [r1, #20]
 800e85a:	eba6 0807 	sub.w	r8, r6, r7
 800e85e:	600f      	str	r7, [r1, #0]
 800e860:	608b      	str	r3, [r1, #8]
 800e862:	f1b8 0f00 	cmp.w	r8, #0
 800e866:	dd9c      	ble.n	800e7a2 <__sflush_r+0x1a>
 800e868:	4643      	mov	r3, r8
 800e86a:	463a      	mov	r2, r7
 800e86c:	6a21      	ldr	r1, [r4, #32]
 800e86e:	4628      	mov	r0, r5
 800e870:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e872:	47b0      	blx	r6
 800e874:	2800      	cmp	r0, #0
 800e876:	dc06      	bgt.n	800e886 <__sflush_r+0xfe>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e87e:	81a3      	strh	r3, [r4, #12]
 800e880:	f04f 30ff 	mov.w	r0, #4294967295
 800e884:	e78e      	b.n	800e7a4 <__sflush_r+0x1c>
 800e886:	4407      	add	r7, r0
 800e888:	eba8 0800 	sub.w	r8, r8, r0
 800e88c:	e7e9      	b.n	800e862 <__sflush_r+0xda>
 800e88e:	bf00      	nop
 800e890:	20400001 	.word	0x20400001

0800e894 <_fflush_r>:
 800e894:	b538      	push	{r3, r4, r5, lr}
 800e896:	690b      	ldr	r3, [r1, #16]
 800e898:	4605      	mov	r5, r0
 800e89a:	460c      	mov	r4, r1
 800e89c:	b1db      	cbz	r3, 800e8d6 <_fflush_r+0x42>
 800e89e:	b118      	cbz	r0, 800e8a8 <_fflush_r+0x14>
 800e8a0:	6983      	ldr	r3, [r0, #24]
 800e8a2:	b90b      	cbnz	r3, 800e8a8 <_fflush_r+0x14>
 800e8a4:	f7ff f97c 	bl	800dba0 <__sinit>
 800e8a8:	4b0c      	ldr	r3, [pc, #48]	; (800e8dc <_fflush_r+0x48>)
 800e8aa:	429c      	cmp	r4, r3
 800e8ac:	d109      	bne.n	800e8c2 <_fflush_r+0x2e>
 800e8ae:	686c      	ldr	r4, [r5, #4]
 800e8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8b4:	b17b      	cbz	r3, 800e8d6 <_fflush_r+0x42>
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8be:	f7ff bf63 	b.w	800e788 <__sflush_r>
 800e8c2:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <_fflush_r+0x4c>)
 800e8c4:	429c      	cmp	r4, r3
 800e8c6:	d101      	bne.n	800e8cc <_fflush_r+0x38>
 800e8c8:	68ac      	ldr	r4, [r5, #8]
 800e8ca:	e7f1      	b.n	800e8b0 <_fflush_r+0x1c>
 800e8cc:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <_fflush_r+0x50>)
 800e8ce:	429c      	cmp	r4, r3
 800e8d0:	bf08      	it	eq
 800e8d2:	68ec      	ldreq	r4, [r5, #12]
 800e8d4:	e7ec      	b.n	800e8b0 <_fflush_r+0x1c>
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	bd38      	pop	{r3, r4, r5, pc}
 800e8da:	bf00      	nop
 800e8dc:	0800ebb4 	.word	0x0800ebb4
 800e8e0:	0800ebd4 	.word	0x0800ebd4
 800e8e4:	0800eb94 	.word	0x0800eb94

0800e8e8 <_lseek_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	4608      	mov	r0, r1
 800e8ee:	4611      	mov	r1, r2
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	4c05      	ldr	r4, [pc, #20]	; (800e908 <_lseek_r+0x20>)
 800e8f4:	6022      	str	r2, [r4, #0]
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	f7f4 ff81 	bl	80037fe <_lseek>
 800e8fc:	1c43      	adds	r3, r0, #1
 800e8fe:	d102      	bne.n	800e906 <_lseek_r+0x1e>
 800e900:	6823      	ldr	r3, [r4, #0]
 800e902:	b103      	cbz	r3, 800e906 <_lseek_r+0x1e>
 800e904:	602b      	str	r3, [r5, #0]
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	200016dc 	.word	0x200016dc

0800e90c <__swhatbuf_r>:
 800e90c:	b570      	push	{r4, r5, r6, lr}
 800e90e:	460e      	mov	r6, r1
 800e910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e914:	b096      	sub	sp, #88	; 0x58
 800e916:	2900      	cmp	r1, #0
 800e918:	4614      	mov	r4, r2
 800e91a:	461d      	mov	r5, r3
 800e91c:	da07      	bge.n	800e92e <__swhatbuf_r+0x22>
 800e91e:	2300      	movs	r3, #0
 800e920:	602b      	str	r3, [r5, #0]
 800e922:	89b3      	ldrh	r3, [r6, #12]
 800e924:	061a      	lsls	r2, r3, #24
 800e926:	d410      	bmi.n	800e94a <__swhatbuf_r+0x3e>
 800e928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e92c:	e00e      	b.n	800e94c <__swhatbuf_r+0x40>
 800e92e:	466a      	mov	r2, sp
 800e930:	f000 f882 	bl	800ea38 <_fstat_r>
 800e934:	2800      	cmp	r0, #0
 800e936:	dbf2      	blt.n	800e91e <__swhatbuf_r+0x12>
 800e938:	9a01      	ldr	r2, [sp, #4]
 800e93a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e93e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e942:	425a      	negs	r2, r3
 800e944:	415a      	adcs	r2, r3
 800e946:	602a      	str	r2, [r5, #0]
 800e948:	e7ee      	b.n	800e928 <__swhatbuf_r+0x1c>
 800e94a:	2340      	movs	r3, #64	; 0x40
 800e94c:	2000      	movs	r0, #0
 800e94e:	6023      	str	r3, [r4, #0]
 800e950:	b016      	add	sp, #88	; 0x58
 800e952:	bd70      	pop	{r4, r5, r6, pc}

0800e954 <__smakebuf_r>:
 800e954:	898b      	ldrh	r3, [r1, #12]
 800e956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e958:	079d      	lsls	r5, r3, #30
 800e95a:	4606      	mov	r6, r0
 800e95c:	460c      	mov	r4, r1
 800e95e:	d507      	bpl.n	800e970 <__smakebuf_r+0x1c>
 800e960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	6123      	str	r3, [r4, #16]
 800e968:	2301      	movs	r3, #1
 800e96a:	6163      	str	r3, [r4, #20]
 800e96c:	b002      	add	sp, #8
 800e96e:	bd70      	pop	{r4, r5, r6, pc}
 800e970:	ab01      	add	r3, sp, #4
 800e972:	466a      	mov	r2, sp
 800e974:	f7ff ffca 	bl	800e90c <__swhatbuf_r>
 800e978:	9900      	ldr	r1, [sp, #0]
 800e97a:	4605      	mov	r5, r0
 800e97c:	4630      	mov	r0, r6
 800e97e:	f7fd fdb9 	bl	800c4f4 <_malloc_r>
 800e982:	b948      	cbnz	r0, 800e998 <__smakebuf_r+0x44>
 800e984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e988:	059a      	lsls	r2, r3, #22
 800e98a:	d4ef      	bmi.n	800e96c <__smakebuf_r+0x18>
 800e98c:	f023 0303 	bic.w	r3, r3, #3
 800e990:	f043 0302 	orr.w	r3, r3, #2
 800e994:	81a3      	strh	r3, [r4, #12]
 800e996:	e7e3      	b.n	800e960 <__smakebuf_r+0xc>
 800e998:	4b0d      	ldr	r3, [pc, #52]	; (800e9d0 <__smakebuf_r+0x7c>)
 800e99a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	6020      	str	r0, [r4, #0]
 800e9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9a4:	81a3      	strh	r3, [r4, #12]
 800e9a6:	9b00      	ldr	r3, [sp, #0]
 800e9a8:	6120      	str	r0, [r4, #16]
 800e9aa:	6163      	str	r3, [r4, #20]
 800e9ac:	9b01      	ldr	r3, [sp, #4]
 800e9ae:	b15b      	cbz	r3, 800e9c8 <__smakebuf_r+0x74>
 800e9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	f000 f851 	bl	800ea5c <_isatty_r>
 800e9ba:	b128      	cbz	r0, 800e9c8 <__smakebuf_r+0x74>
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	f023 0303 	bic.w	r3, r3, #3
 800e9c2:	f043 0301 	orr.w	r3, r3, #1
 800e9c6:	81a3      	strh	r3, [r4, #12]
 800e9c8:	89a3      	ldrh	r3, [r4, #12]
 800e9ca:	431d      	orrs	r5, r3
 800e9cc:	81a5      	strh	r5, [r4, #12]
 800e9ce:	e7cd      	b.n	800e96c <__smakebuf_r+0x18>
 800e9d0:	0800db69 	.word	0x0800db69

0800e9d4 <__ascii_mbtowc>:
 800e9d4:	b082      	sub	sp, #8
 800e9d6:	b901      	cbnz	r1, 800e9da <__ascii_mbtowc+0x6>
 800e9d8:	a901      	add	r1, sp, #4
 800e9da:	b142      	cbz	r2, 800e9ee <__ascii_mbtowc+0x1a>
 800e9dc:	b14b      	cbz	r3, 800e9f2 <__ascii_mbtowc+0x1e>
 800e9de:	7813      	ldrb	r3, [r2, #0]
 800e9e0:	600b      	str	r3, [r1, #0]
 800e9e2:	7812      	ldrb	r2, [r2, #0]
 800e9e4:	1c10      	adds	r0, r2, #0
 800e9e6:	bf18      	it	ne
 800e9e8:	2001      	movne	r0, #1
 800e9ea:	b002      	add	sp, #8
 800e9ec:	4770      	bx	lr
 800e9ee:	4610      	mov	r0, r2
 800e9f0:	e7fb      	b.n	800e9ea <__ascii_mbtowc+0x16>
 800e9f2:	f06f 0001 	mvn.w	r0, #1
 800e9f6:	e7f8      	b.n	800e9ea <__ascii_mbtowc+0x16>

0800e9f8 <_read_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	4608      	mov	r0, r1
 800e9fe:	4611      	mov	r1, r2
 800ea00:	2200      	movs	r2, #0
 800ea02:	4c05      	ldr	r4, [pc, #20]	; (800ea18 <_read_r+0x20>)
 800ea04:	6022      	str	r2, [r4, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	f7f4 fe9c 	bl	8003744 <_read>
 800ea0c:	1c43      	adds	r3, r0, #1
 800ea0e:	d102      	bne.n	800ea16 <_read_r+0x1e>
 800ea10:	6823      	ldr	r3, [r4, #0]
 800ea12:	b103      	cbz	r3, 800ea16 <_read_r+0x1e>
 800ea14:	602b      	str	r3, [r5, #0]
 800ea16:	bd38      	pop	{r3, r4, r5, pc}
 800ea18:	200016dc 	.word	0x200016dc

0800ea1c <__ascii_wctomb>:
 800ea1c:	b149      	cbz	r1, 800ea32 <__ascii_wctomb+0x16>
 800ea1e:	2aff      	cmp	r2, #255	; 0xff
 800ea20:	bf8b      	itete	hi
 800ea22:	238a      	movhi	r3, #138	; 0x8a
 800ea24:	700a      	strbls	r2, [r1, #0]
 800ea26:	6003      	strhi	r3, [r0, #0]
 800ea28:	2001      	movls	r0, #1
 800ea2a:	bf88      	it	hi
 800ea2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea30:	4770      	bx	lr
 800ea32:	4608      	mov	r0, r1
 800ea34:	4770      	bx	lr
	...

0800ea38 <_fstat_r>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	4c06      	ldr	r4, [pc, #24]	; (800ea58 <_fstat_r+0x20>)
 800ea3e:	4605      	mov	r5, r0
 800ea40:	4608      	mov	r0, r1
 800ea42:	4611      	mov	r1, r2
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	f7f4 fec1 	bl	80037cc <_fstat>
 800ea4a:	1c43      	adds	r3, r0, #1
 800ea4c:	d102      	bne.n	800ea54 <_fstat_r+0x1c>
 800ea4e:	6823      	ldr	r3, [r4, #0]
 800ea50:	b103      	cbz	r3, 800ea54 <_fstat_r+0x1c>
 800ea52:	602b      	str	r3, [r5, #0]
 800ea54:	bd38      	pop	{r3, r4, r5, pc}
 800ea56:	bf00      	nop
 800ea58:	200016dc 	.word	0x200016dc

0800ea5c <_isatty_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	2300      	movs	r3, #0
 800ea60:	4c05      	ldr	r4, [pc, #20]	; (800ea78 <_isatty_r+0x1c>)
 800ea62:	4605      	mov	r5, r0
 800ea64:	4608      	mov	r0, r1
 800ea66:	6023      	str	r3, [r4, #0]
 800ea68:	f7f4 febf 	bl	80037ea <_isatty>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_isatty_r+0x1a>
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_isatty_r+0x1a>
 800ea74:	602b      	str	r3, [r5, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	200016dc 	.word	0x200016dc

0800ea7c <_init>:
 800ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7e:	bf00      	nop
 800ea80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea82:	bc08      	pop	{r3}
 800ea84:	469e      	mov	lr, r3
 800ea86:	4770      	bx	lr

0800ea88 <_fini>:
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8a:	bf00      	nop
 800ea8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea8e:	bc08      	pop	{r3}
 800ea90:	469e      	mov	lr, r3
 800ea92:	4770      	bx	lr
